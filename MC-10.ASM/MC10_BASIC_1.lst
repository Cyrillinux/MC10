0001   0000             ; Radio Shack MC-10 ROM Disassembly
0002   0000             ; Modified to use Canonical Microsoft Label Names where possible
0003   0000             ; by Curtis F Kaylor May 2020
0004   0000             ; From http://www.roust-it.dk/coco/mc10/romlist.txt
0005   0000             ;; Radio Shack MC-10 Disassembly
0006   0000             ;; (C) Copyright 1999 Kevin Timmerman
0007   0000             ;;    Additional annotation by Greg D.
0008   0000             ;;    Fixed and modified by James Tamer for use with TASM cross-assembler
0009   0000             
0010   0000             ; References:
0011   0000             ; MBASIC.ASM - Microsoft BASIC for 6502 Original Source Code [1978]
0012   0000             ;   https://www.pagetable.com/?p=774
0013   0000             ; mapping_64.txt - Mapping the Commodore 64
0014   0000             ;   https://www.commodore.ca/manuals/funet/cbm/c64/manuals/mapping-c64.txt.gz
0015   0000             ; color-basic-unravelled.pdf - Color Basic Unraveled II
0016   0000             ; color-basic-unravelled.pdf - Color Basic Unraveled II
0017   0000             ;   http://techheap.packetizer.com/computers/coco/unravelled_series/color-basic-unravelled.pdf
0018   0000             ; mbasic.zip - Microsoft Basic-80 5.2 Source
0019   0000             ;   https://winworldpc.com/download/c2bfc380-c2b2-c2b4-7d00-11c3a7c29d25
0020   0000             ;   https://zachowajto.pl/file/T72AzBwyeCot/microsoft-basic-80-5-2-source-7z
0021   0000             
0022   0000             ; A few handy defines to make TASM more like typcial 
0023   0000             ; motorola syntax
0024   0000             
0025   0000             .MSFIRST        ; Most Significant byte first
0026   0000             
0027   0000             ; .ADDINSTR inst args opcode nbytes rule class shift binor
0028   0000             ;.ADDINSTR JSR * BD 3 SWAP 1 shift binor
0029   0000             
0030   0000             ; *
0031   0000             ; * Modified by Cyril BARBATO 2025
0032   0000             ; * bacciel.com
0033   0000             ; * Cyril BARBATO / cyrl.barbato@gmx.com
0034   0000             ; *
0035   0000             
0036   0000             #define EQU     .EQU
0037   0000             #define ORG     .ORG
0038   0000             #define RMB     .BCSCK
0039   0000             #define FCB     .BYTE
0040   0000             #define FCC     .TEXT
0041   0000             #define FDB     .WORD
0042   0000             
0043   0000             #define equ     .EQU
0044   0000             #define org     .ORG
0045   0000             #define rmb     .BCSCK
0046   0000             #define fcb     .BYTE
0047   0000             #define fcc     .TEXT
0048   0000             #define fdb     .WORD
0049   0000             ; end a few handy defines
0050   0000             
0051   0000             ;ACRLF  (Canonical Label)
0052   0000             CR      EQU     $0D ;Carriage Return
0053   0000             
0054   0000             DDR1    equ     $00 ;Port 1 Data Directon Register (1=Output, 0=Input)
0055   0000             DDR2    equ     $01 ;Port 2 Data Directon Register 
0056   0000             PORT1   equ     $02 ;Port 1 Data Register
0057   0000             PORT2   equ     $03 ;Port 2 Data Register
0058   0000             TIMER   equ     $08 ;Timer control and status register
0059   0000             COUNTER equ     $09 ;Counter        (2 bytes)
0060   0000             COMPARE equ     $0B ;Output Compare (2 bytes)
0061   0000             
0062   0000             CHARAC  equ     $80 ;number build store MSB
0063   0000             ENDCHR  equ     $81 ;number build store LSB
0064   0000             COUNT   equ     $82 ;Index into Text Input Buffer/Number of Array Subscripts
0065   0000                                 ;logic AND/OR function store
0066   0000             DIMFLG  equ     $83 ; Array Variable Flags
0067   0000             VALTYP  equ     $84 ;vartype flag
0068   0000             ram84   equ     $84
0069   0000             ram85   equ     $85 ;data token flag
0070   0000             SUBFLG  equ     $86
0071   0000             ram87   equ     $87 ;READ cmd status flag
0072   0000             TANSGN  equ     $88 ;Used to Determin Sign of Tangent
0073   0000             DOMASK  equ     $88 ;Mask Used by Relational Operations
0074   0000             TEMPADR equ     $89 ;address temp store
0075   0000             ram8B     equ     $8B
0076   0000             RES     equ     $8C ; Floating-Point Result
0077   0000             RESHO   equ     $8D ; Result Mantissa
0078   0000             RESMOH  equ     $8E
0079   0000             RESMO   equ     $8F
0080   0000             RESLO   equ     $90
0081   0000             INDEX   equ     $91 ; stack pointer store
0082   0000             TXTTAB  equ     $93 ; start of TXTTAB memory
0083   0000             VARTAB  equ     $95 ; start of variable space
0084   0000             ram97   equ     $97
0085   0000             ARYTAB  equ     $97 ; start of dimensioned variable space
0086   0000             ;       (Non-Canonical from Color Basic Unraveled)
0087   0000             ram99   equ     $99
0088   0000             ARREND  equ     $99 ; end of variables.
0089   0000             ARYEND  equ     $99 ; end of variables.
0090   0000             ram9B   equ     $9B
0091   0000             FRETOP  equ     $9B ; start of string space
0092   0000             FRESPC  equ     $9D ; next free string store
0093   0000             ram9F   equ     $9F ; address build store
0094   0000             ramA1   equ     $A1
0095   0000             MEMSIZ  equ     $A1 ; top of string storage
0096   0000             ramA3   equ     $A3
0097   0000             LINNUM  equ     $A5 ;Integer Line Number Value
0098   0000             BRKADR  equ     $A7 ; program break address MSB
0099   0000             OLDTXT  equ     $A9 ;Pointer to Address of Current BASIC Statement
0100   0000             ramAB   equ     $AB
0101   0000             DATPTR  equ     $AD ; DATA pointer
0102   0000             ramAF   equ     $AF ; LIST command end line no.
0103   0000             VARNAM  equ     $B1 ;Variable Name
0104   0000                           ; $B2
0105   0000             ramB3   equ     $B3
0106   0000             FORPNT  equ     $B5 ; FOR-NEXT var pointer
0107   0000             OPPTR   equ     $B7 ;Pointer to Entry in Operator Table
0108   0000             OPMASK  equ     $B9 ;Relational Operator Mask
0109   0000             FPTMP   equ     $BA ; EXPONENT
0110   0000             FPTMPM  equ     $BB ; DIGIT 4-3
0111   0000             HIGHTR  equ     $BD ;Source of Highest Element to Move
0112   0000             FPTMPS  equ     $BF ; SIGN
0113   0000             DPTFLG  equ     $C0
0114   0000             TENEXP  equ     $C1
0115   0000             ramC2   equ     $C2
0116   0000             TBL00C4 equ     $C4
0117   0000             ramC5   equ     $C5
0118   0000             ramC7   equ     $C7
0119   0000             DSCTMP  equ     $C9 ; Temporary Descriptor
0120   0000             FAC     equ     $C9 ; Floating Point Accumulator
0121   0000             FACEXP  equ     $C9 ; Exponent
0122   0000             FACHO   equ     $CA ; DIGIT 4 MSB
0123   0000             FACMOH  equ     $CB ; DIGIT 3
0124   0000             FACMO   equ     $CC ; DIGIT 2
0125   0000             FACLO   equ     $CD ; DIGIT 1 LSB
0126   0000             FACSGN  equ     $CE ; SIGN
0127   0000             SGNFLG   equ     $CF
0128   0000             ramD0   equ     $D0
0129   0000             ramD2   equ     $D2
0130   0000             ramD5   equ     $D5
0131   0000             ARGEXP  equ     $D6 ; EXPONENT        [FPA1]
0132   0000             ARGHO   equ     $D7 ; DIGIT 4 MSB
0133   0000             ARGMOH  equ     $D8 ; DIGIT 3
0134   0000             ARGMO   equ     $D9 ; DIGIT 2
0135   0000             ARGLO   equ     $DA ; DIGIT 1 LSB
0136   0000             ARGSGN  equ     $DB ; SIGN 
0137   0000             ARISGN  equ     $DC ; Floating Point Result Sign
0138   0000             STRNG1  equ     $DC ; Pointer to String or Descriptor
0139   0000             FACOV   equ     $DD ; Floating Point Overflow
0140   0000             ramDE   equ     $DE ; end of string address MSB
0141   0000             ramDF   equ     $DF ; end of string address LSB
0142   0000             CURLIN  equ     $E2 ; Current Line #
0143   0000             ramE4   equ     $E4 ; i/o tab field
0144   0000             ramE5   equ     $E5 ; i/o last tab field
0145   0000             ramE6   equ     $E6 ; max line length MSB
0146   0000             ramE7   equ     $E7 ; max line length LSB
0147   0000             CHANNEL equ     $E8 ; I/O select 0=screen -1=printer
0148   0000             ramE9   equ     $E9
0149   0000             ramEA   equ     $EA ; warm start setup flag =$55
0150   0000             CHRGET  equ     $EB ; INC   TXTPTR+1
0151   0000                            ;$EE   BNE   CHRGOT
0152   0000                            ;$F0   INC   TXTPTR
0153   0000             CHRGOT  equ     $F3 ; LDAA {next two bytes}
0154   0000             TXTPTR  equ     $F4 ; Pointer to BASIC character 
0155   0000                            ;$F6 ; JMP   $E1C8
0156   0000             
0157   0000             SCREEN  equ     $4000 ; start of screen mem
0158   0000             TBL41FD equ     $41FD ; start clearing.
0159   0000             USR     equ     $4215 ; JMP Instruction for USR()
0160   0000             USRADD  equ     $4216 ; Address of USR Routine {Mapping the C64}
0161   0000             RNDX    equ     $4218 ; RND Function Seed Value
0162   0000             ram421C equ     $421C ; upcase flag
0163   0000             KCOUNT  equ     $421D ; keyboard debounce delay $045E
0164   0000             EXEADR  equ     $421F ; default EXEC address    $EC2E
0165   0000             ram4221 equ     $4221
0166   0000             PBDELAY equ     $4223 ; printer baud rate  $0080
0167   0000             CRDELAY equ     $4225 ; cr. delay count    $0001
0168   0000             TABSIZE equ     $4227 ; tab field width    16
0169   0000             PLINLEN equ     $4229 ; last tab zone      112
0170   0000             ram422A equ     $422A ; printer line length max MSB 88
0171   0000             FLSHCNT equ     $422B ; printer line length max LSB 132
0172   0000             ram422C equ     $422C ; cassette 1200/2400Hz partition  21 ($15)
0173   0000             ram422D equ     $422D ; upper limit of 1200 Hz
0174   0000             ram422E equ     $422E ; lower limit of 2400 Hz
0175   0000             LDRCNT  equ     $422F ; number of 55's in leader MSB
0176   0000             SCANBUF equ     $4230 ; number of 55's in leader LSB 128; kyboard scan buff 4231-8.
0177   0000             KEYSTRB equ     $4239 ; keyboard strobe store
0178   0000             CTLFLAG equ     $423A ; keyboard control key flag
0179   0000             BRKFLAG equ     $423B ; keyboard break flag
0180   0000             ram423C equ     $423C
0181   0000             LASTPT  equ     $423D ;Pointer to Address of Last String in Temporary String Stack
0182   0000             TEMPST  equ     $423F ;Descriptor Stack for Temporary Strings
0183   0000             STRBUFF equ     $4241 ; string buffer
0184   0000             RAMTOP  equ     $4250 ; end of memory pointer
0185   0000             ram4252 equ     $4252
0186   0000             ram4253 equ     $4253
0187   0000             ram4254 equ     $4254 ; random number store 1
0188   0000             ram4255 equ     $4255 ; random number store 2
0189   0000             FNLEN   equ     $4256 ; File Name Length
0190   0000             FNAM    equ     $4257 ; Cassette File Name Buffer {CBU}
0191   0000             CASBUF  equ     $425F ; TAPE file name block
0192   0000             FNAME   equ     $425F
0193   0000             FTYPE   equ     $4267 ;File Type 0=Basic, 4=Variable
0194   0000             DTYPE   equ     $4268 ;Data Type 0=Binary
0195   0000             GAPFLG  equ     $4269 ;Gap Between Blocks Flag: 0=No
0196   0000             XOFS    equ     $426A ; EXEC address offset
0197   0000             LAL     equ     $426C ; LOAD address
0198   0000             ram426E equ     $426E ; NEW command status flag
0199   0000             SAL     equ     $426F ;Start Address for Load/Save
0200   0000             EAL     equ     $4271 ;End Address for Load/Save
0201   0000             SKPFLG  equ     $4273
0202   0000             ram4274 equ     $4274
0203   0000             BLKTYP  equ     $4275 ;Cassette Block Type: 0=Header, 1=Data, $FF=EOF
0204   0000             BLKLEN  equ     $4276 ;Cassette Block Length
0205   0000             ;               $4277 ;Unused
0206   0000             CBUFAD  equ     $4278 ;Cassette Buffer Address
0207   0000             CCKSUM  equ     $427A ;Cassette Block Checksum
0208   0000             LOADSTS equ     $427B ; Cassette load status flag
0209   0000             BITCNTR equ     $427C ; cass byte load bit counter
0210   0000             DURCNTR equ     $427D ; tone duration counter
0211   0000             ram427E equ     $427E ; cass polarity flag
0212   0000             LASTKEY equ     $427F ; last keyboard input char
0213   0000             CRSRADR equ     $4280 ; cursor address MSB
0214   0000                                   ; cursor address LSB
0215   0000             CRSRCLR equ     $4282 ; cursor color
0216   0000             BRKSTS  equ     $4283 ; break status flag
0217   0000             ram4284 equ     $4284 ; LIST command status flag
0218   0000             X_INCHAR equ    $4285 ; input char command extension
0219   0000             LBL4288 equ     $4288 ; output char command extension
0220   0000             LBL428B equ     $428B ; output char command extension
0221   0000             X_NEW   equ     $428E ; NEW command extension
0222   0000             X_CMDLN equ     $4291 ; build command line extension
0223   0000             XMATHS equ      $4294 ; maths command extension
0224   0000             X_ERR1  equ     $4297 ; error return extension 1
0225   0000             X_ERR2  equ     $429A ; error return extension 2
0226   0000             XFIN equ        $429D ; fp-acc number transfer extension
0227   0000             X_RUN   equ     $42A0 ; RUN command extension
0228   0000             X_TOKEN equ     $42A3 ; command token lookup extension
0229   0000             X_LIST  equ     $42A6 ; LIST command extension
0230   0000             LBL42A9 equ     $42A9
0231   0000             LBL42AC equ     $42AC
0232   0000             ram42AF equ     $42AF
0233   0000             SAVLIN  equ     $42B0 ;Line Number of Tokenized Line
0234   0000             TBL42B1 equ     $42B1
0235   0000             BUF     equ     $42B2 ; command line buffer
0236   0000             LOFBUF  equ     $4333 ;Low FAC Buffer - Copyable
0237   0000             FBUFFR  equ     $4335 ; binary-decimal conversion buffer
0238   0000             TBL4346 equ     $4346
0239   0000             
0240   0000             ioBFFF  equ     $BFFF
0241   0000             
0242   E000                     org     $E000
0243   E000             
0244   E000             ;$E000  Function Dispatch Vector Table
0245   E000 F2 BA       FUNDSP  FDB     SGN       ; $F2BA  SGN
0246   E002 F3 35               FDB     INT       ; $F335  INT
0247   E004 F2 D5               FDB     ABS       ; $F2D5  ABS
0248   E006 42 15               FDB     USR       ; $4215  USR
0249   E008 F6 2A               FDB     F_RND       ; $F62A  RND
0250   E00A F5 4D               FDB     F_SQR       ; $F54D  SQR
0251   E00C F0 B9               FDB     F_LOG       ; $F0B9  LOG
0252   E00E F5 C9               FDB     EXP       ; $F5C9  EXP
0253   E010 F6 8C               FDB     F_SIN       ; $F68C  SIN
0254   E012 F6 86               FDB     F_COS       ; $F686  COS
0255   E014 F6 D2               FDB     F_TAN       ; $F6D2  TAN
0256   E016 EF 5F               FDB     F_PEEK      ; $EF5F  PEEK
0257   E018 EE 82               FDB     F_LEN       ; $EE82  LEN
0258   E01A EC ED               FDB     STR       ; $ECED  STR$
0259   E01C EF 1C               FDB     F_VAL       ; $EF1C  VAL
0260   E01E EE A2               FDB     F_ASC       ; $EEA2  ASC
0261   E020 EE 8E               FDB     F_CHR       ; $EE8E  CHR$
0262   E022 EE AD               FDB     F_LEFT      ; $EEAD  LEFT$
0263   E024 EE C8               FDB     F_RIGHT     ; $EEC8  RIGHT$
0264   E026 EE CF               FDB     F_MID       ; $EECF  MID$
0265   E028 FB 9C               FDB     F_POINT     ; $FB9C  POINT
0266   E02A FC 11               FDB     F_VARPTR    ; $FC11  VARPTR
0267   E02C FB ED               FDB     F_INKEY     ; $FBED  INKEY$
0268   E02E EC DB               FDB     MEM         ; $ECDB  MEM
0269   E030             
0270   E030             ;$E030  Operator Dispatch Vector Table
0271   E030 79          OPTAB   FCB     $79
0272   E031 EF 80               FDB     FP_ADD    ; $EF80 +
0273   E033 79                  FCB     $79
0274   E034 EF 75               FDB     FP_SUB    ; $EF75 -
0275   E036 7B                  FCB     $7B
0276   E037 F0 F1               FDB     FP_MUL    ; $F0F1 *
0277   E039 7B                  FCB     $7B
0278   E03A F1 D2               FDB     FDIVT    ; $F1C8 /
0279   E03C 7F                  FCB     $7F
0280   E03D F5 56               FDB     FP_POW    ; $F556 ^
0281   E03F 50                  FCB     $50
0282   E040 EA 8E               FDB     FP_OR+1   ; $EA8E AND (FP_AND)
0283   E042 46                  FCB     $46
0284   E043 EA 8D               FDB     FP_OR     ; $EA8D OR
0285   E045             
0286   E045             ;$E045  List of Keywords
0287   E045 46 4F D2    RESLST  FCB     $46,$4F,$D2             ;FOR           80
0288   E048 47 4F 54 CF         FCB     $47,$4F,$54,$CF         ;GOTO          81
0289   E04C 474F5355C2          FCB     $47,$4F,$53,$55,$C2     ;GOSUB         82
0290   E051 52 45 CD            FCB     $52,$45,$CD             ;REM           83
0291   E054 49 C6               FCB     $49,$C6                 ;IF            84
0292   E056 44 41 54 C1         FCB     $44,$41,$54,$C1         ;DATA          85
0293   E05A 5052494ED4          FCB     $50,$52,$49,$4E,$D4     ;PRINT         86
0294   E05F 4F CE               FCB     $4F,$CE                 ;ON            87
0295   E061 494E5055D4          FCB     $49,$4E,$50,$55,$D4     ;INPUT         88
0296   E066 45 4E C4            FCB     $45,$4E,$C4             ;END           89
0297   E069 4E 45 58 D4         FCB     $4E,$45,$58,$D4         ;NEXT          8A
0298   E06D 44 49 CD            FCB     $44,$49,$CD             ;DIM           8B
0299   E070 52 45 41 C4         FCB     $52,$45,$41,$C4         ;READ          8C
0300   E074 4C 45 D4            FCB     $4C,$45,$D4             ;LET           8D
0301   E077 52 55 CE            FCB     $52,$55,$CE             ;RUN           8E
0302   E07A 524553544F52C5        FCB     $52,$45,$53,$54,$4F,$52,$C5 ;RESTORE   8F
0303   E081 5245545552CE        FCB     $52,$45,$54,$55,$52,$CE ;RETURN        90
0304   E087 53 54 4F D0         FCB     $53,$54,$4F,$D0         ;STOP          91
0305   E08B 50 4F 4B C5         FCB     $50,$4F,$4B,$C5         ;POKE          92
0306   E08F 43 4F 4E D4         FCB     $43,$4F,$4E,$D4         ;CONT          93
0307   E093 4C 49 53 D4         FCB     $4C,$49,$53,$D4         ;LIST          94
0308   E097 434C4541D2          FCB     $43,$4C,$45,$41,$D2     ;CLEAR         95
0309   E09C 4E 45 D7            FCB     $4E,$45,$D7             ;NEW           96
0310   E09F 434C4F41C4          FCB     $43,$4C,$4F,$41,$C4     ;CLOAD         97
0311   E0A4 43534156C5          FCB     $43,$53,$41,$56,$C5     ;CSAVE         98
0312   E0A9 4C4C4953D4          FCB     $4C,$4C,$49,$53,$D4     ;LLIST         99
0313   E0AE 4C5052494ED4        FCB     $4C,$50,$52,$49,$4E,$D4 ;LPRINT        9A
0314   E0B4 53 45 D4            FCB     $53,$45,$D4             ;SET           9B
0315   E0B7 52455345D4          FCB     $52,$45,$53,$45,$D4     ;RESET         9C
0316   E0BC 43 4C D3            FCB     $43,$4C,$D3             ;CLS           9D
0317   E0BF 534F554EC4          FCB     $53,$4F,$55,$4E,$C4     ;SOUND         9E
0318   E0C4 45 58 45 C3         FCB     $45,$58,$45,$C3         ;EXEC          9F
0319   E0C8 534B4950C6          FCB     $53,$4B,$49,$50,$C6     ;SKIPF         A0        
0320   E0CD 54 41 42 A8         FCB     $54,$41,$42,$A8         ;TAB(          A1
0321   E0D1 54 CF               FCB     $54,$CF                 ;TO            A2
0322   E0D3 54 48 45 CE         FCB     $54,$48,$45,$CE         ;THEN          A3
0323   E0D7 4E 4F D4            FCB     $4E,$4F,$D4             ;NOT           A4
0324   E0DA 53 54 45 D0         FCB     $53,$54,$45,$D0         ;STEP          A5
0325   E0DE 4F 46 C6            FCB     $4F,$46,$C6             ;OFF           A6
0326   E0E1 AB                  FCB     $AB                     ;+             A7
0327   E0E2 AD                  FCB     $AD                     ;-             A8
0328   E0E3 AA                  FCB     $AA                     ;*             A9
0329   E0E4 AF                  FCB     $AF                     ;/             AA
0330   E0E5 DE                  FCB     $DE                     ;^             AB
0331   E0E6 41 4E C4            FCB     $41,$4E,$C4             ;AND           AC
0332   E0E9 4F D2               FCB     $4F,$D2                 ;OR            AD
0333   E0EB BE                  FCB     $BE                     ;>             AE
0334   E0EC BD                  FCB     $BD                     ;=             AF
0335   E0ED BC                  FCB     $BC                     ;<             B0
0336   E0EE 53 47 CE            FCB     $53,$47,$CE             ;SGN           B1
0337   E0F1 49 4E D4            FCB     $49,$4E,$D4             ;INT           B2
0338   E0F4 41 42 D3            FCB     $41,$42,$D3             ;ABS           B3
0339   E0F7 55 53 D2            FCB     $55,$53,$D2             ;USR           B4
0340   E0FA 52 4E C4            FCB     $52,$4E,$C4             ;RND           B5
0341   E0FD 53 51 D2            FCB     $53,$51,$D2             ;SQR           B6
0342   E100 4C 4F C7            FCB     $4C,$4F,$C7             ;LOG           B7
0343   E103 45 58 D0            FCB     $45,$58,$D0             ;EXP           B8
0344   E106 53 49 CE            FCB     $53,$49,$CE             ;SIN           B9
0345   E109 43 4F D3            FCB     $43,$4F,$D3             ;COS           BA
0346   E10C 54 41 CE            FCB     $54,$41,$CE             ;TAN           BB
0347   E10F 50 45 45 CB         FCB     $50,$45,$45,$CB         ;PEEK          BC
0348   E113 4C 45 CE            FCB     $4C,$45,$CE             ;LEN           BD
0349   E116 53 54 52 A4         FCB     $53,$54,$52,$A4         ;STR$          BE
0350   E11A 56 41 CC            FCB     $56,$41,$CC             ;VAL           BF
0351   E11D 41 53 C3            FCB     $41,$53,$C3             ;ASC           C0
0352   E120 43 48 52 A4         FCB     $43,$48,$52,$A4         ;CHR$          C1
0353   E124 4C454654A4          FCB     $4C,$45,$46,$54,$A4     ;LEFT$         C2
0354   E129 5249474854A4        FCB     $52,$49,$47,$48,$54,$A4 ;RIGHT$        C3
0355   E12F 4D 49 44 A4         FCB     $4D,$49,$44,$A4         ;MID$          C4
0356   E133 504F494ED4          FCB     $50,$4F,$49,$4E,$D4     ;POINT         C5
0357   E138 5641525054D2        FCB     $56,$41,$52,$50,$54,$D2 ;VARPTR        C6
0358   E13E 494E4B4559A4        FCB     $49,$4E,$4B,$45,$59,$A4 ;INKEY$        C7
0359   E144 4D 45 CD            FCB     $4D,$45,$CD             ;MEM           C8
0360   E147 00                  FCB     $00
0361   E148             
0362   E148             ;$E148  Statement Dispatch Vector Table
0363   E148 E4 C4       STMDSP  FDB     FOR         ; $E4C4  FOR
0364   E14A E6 1A               FDB     C_GOTO        ; $E61A  GOTO
0365   E14C E6 04               FDB     C_GOSUB       ; $E604  GOSUB
0366   E14E E6 85               FDB     REM         ; $E685  REM
0367   E150 E6 72               FDB     IF          ; $E672  IF
0368   E152 E6 51               FDB     DATA        ; $E651  DATA
0369   E154 E7 1F               FDB     C_PRINT       ; $E71F  PRINT
0370   E156 E6 92               FDB     C_ON          ; $E692  ON
0371   E158 E7 DE               FDB     C_INPUT       ; $E7DE  INPUT
0372   E15A E5 7F               FDB     END         ; $E57F  END
0373   E15C E8 BB               FDB     C_NEXT        ; $E8BB  NEXT
0374   E15E EB 12               FDB     C_DIM         ; $EB12  DIM
0375   E160 E8 0E               FDB     C_READ        ; $E80E  READ
0376   E162 E6 D3               FDB     LET         ; $E6D3  LET
0377   E164 E5 FA               FDB     C_RUN         ; $E5FA  RUN
0378   E166 E5 60               FDB     RESTOR     ; $E560  RESTORE
0379   E168 E6 31               FDB     C_RETURN      ; $E631  RETURN
0380   E16A E5 7E               FDB     STOP        ; $E57E  STOP
0381   E16C EF 66               FDB     C_POKE        ; $EF66  POKE
0382   E16E E5 A6               FDB     CONT        ; $E5A6  CONT
0383   E170 E4 0D               FDB     LIST        ; $E40D  LIST
0384   E172 E5 B8               FDB     C_CLEAR       ; $E5B8  CLEAR
0385   E174 E3 CD               FDB     SCRATH         ; $E3CD  NEW
0386   E176 FD 5C               FDB     CLOAD       ; $FD5C  CLOAD
0387   E178 FC 3B               FDB     CSAVE         ; $FC3B  CSAVE
0388   E17A E4 0B               FDB     LLIST       ; $E40B  LLIST
0389   E17C E7 1C               FDB     LPRINT      ; $E71C  LPRINT
0390   E17E FB 25               FDB     C_SET         ; $FB25  SET
0391   E180 FB 55               FDB     C_RESET       ; $FB55  RESET
0392   E182 FB BF               FDB     C_CLS         ; $FBBF  CLS
0393   E184 FF A5               FDB     C_SOUND       ; $FFA5  SOUND
0394   E186 FC 04               FDB     EXEC        ; $FC04  EXEC
0395   E188 FE 2F               FDB     C_SKIPF       ; $FE2F  SKIPF
0396   E18A             
0397   E18A             ;$E18A  ASCII Text of TXTTAB Error Messages
0398   E18A 4E 46       ERRTAB  FCB     $4E,$46         ;$00 NF NEXT without FOR                      
0399   E18C 53 4E               FCB     $53,$4E         ;$02 SN Syntax Error                          
0400   E18E 52 47               FCB     $52,$47         ;$04 RG RETURN without GOSUB                  
0401   E190 4F 44               FCB     $4F,$44         ;$06 OD Out of Data                           
0402   E192 46 43               FCB     $46,$43         ;$08 FC Illegal Function Call                 
0403   E194 4F 56               FCB     $4F,$56         ;$0A OV Overflow                              
0404   E196 4F 4D               FCB     $4F,$4D         ;$0C OM Out of Memory                         
0405   E198 55 4C               FCB     $55,$4C         ;$0E UL Undefined Line                        
0406   E19A 42 53               FCB     $42,$53         ;$20 BS Bad Subscript                         
0407   E19C 44 44               FCB     $44,$44         ;$22 DD Double Dimensioned Array              
0408   E19E 2F 30               FCB     $2F,$30         ;$24 /0 Division by 0                         
0409   E1A0 49 44               FCB     $49,$44         ;$26 ID Illegal Direct Statement              
0410   E1A2 54 4D               FCB     $54,$4D         ;$28 TM Type Mismatch                         
0411   E1A4 4F 53               FCB     $4F,$53         ;$2A OS Out of String Space                   
0412   E1A6 4C 53               FCB     $4C,$53         ;$2C LS Long String (exceeds 255 characters)  
0413   E1A8 53 54               FCB     $53,$54         ;$2E ST String Formula Too Complex ? ""+(""+(""+""))
0414   E1AA 43 4E               FCB     $43,$4E         ;$30 CN Can't Continue                        
0415   E1AC 49 4F               FCB     $49,$4F         ;$32 IO Input/Output Error                    
0416   E1AE 46 4D               FCB     $46,$4D         ;$34 FM File Mode Error                       
0417   E1B0             
0418   E1B0             ;$E1B0  Miscellaneous Messages
0419   E1B0             ;ERR    (Canonical Label)
0420   E1B0 204552524F5200ERRTXT  FCB     $20,$45,$52,$52,$4F,$52,$00     ; " ERROR",0
0421   E1B7 20494E2000  INTXT   FCB     $20,$49,$4E,$20,$00             ; " IN ",0
0422   E1BC 0D4F4B0D00  REDDY    FCB     $0D,$4F,$4B,$0D,$00            ; CR,"OK",CR,0
0423   E1C1 0D425245414B00BRKTXT FCB     $0D,$42,$52,$45,$41,$4B,$00     ; CR,"BREAK",0
0424   E1C8             
0425   E1C8             ;$E1C8  Continuation of CHRGET/CHRGOT
0426   E1C8 81 3A       QNUM    CMPA    #$3A    ;Leave if non-numeric. Z=':' or NULL
0427   E1CA 24 0B               BCC     CHRRTS ;                      C=Numeric
0428   E1CC 81 20               CMPA    #$20    ;skip whitespace
0429   E1CE 26 03               BNE     LBLE1D3
0430   E1D0 7E 00 EB            JMP     CHRGET 
0431   E1D3 80 30       LBLE1D3 SUBA    #$30
0432   E1D5 80 D0               SUBA    #$D0    ;Set Carry if numeric.
0433   E1D7 39          CHRRTS  RTS     
0434   E1D8             
0435   E1D8             ;$E1D8  Find FOR on Stack
0436   E1D8 30          FNDFOR  TSX           
0437   E1D9 C6 04               LDAB    #$04
0438   E1DB 3A                  ABX     
0439   E1DC C6 12       FFLOOP  LDAB    #$12
0440   E1DE DF 89               STX     TEMPADR
0441   E1E0 A6 00               LDAA    ,X   ; SP+0==return addr.  SP+2==?.  SP+4->A
0442   E1E2 80 80               SUBA    #$80
0443   E1E4 26 14               BNE     ADDFRS
0444   E1E6 EE 01               LDX     1,X
0445   E1E8 DF 8B               STX     ram8B
0446   E1EA DE B5               LDX     FORPNT
0447   E1EC 27 08               BEQ     ADDFR1
0448   E1EE 9C 8B               CPX     ram8B
0449   E1F0 27 08               BEQ     ADDFRS
0450   E1F2 8D 3B               BSR     LBLE22F
0451   E1F4 20 E6               BRA     FFLOOP
0452   E1F6 DE 8B       ADDFR1  LDX     ram8B     ;(Non-Canonical Label)
0453   E1F8 DF B5               STX     FORPNT
0454   E1FA DE 89       ADDFRS  LDX     TEMPADR
0455   E1FC 4D                  TSTA
0456   E1FD 39                  RTS
0457   E1FE             
0458   E1FE                             ; -- copy [C1:BD]->[bf:BB]
0459   E1FE 8D 1E       LBLE1FE BSR     GETSTD; see if D bytes fit on stack
0460   E200 07          LBLE200 TPA     
0461   E201 36                  PSHA    
0462   E202 9F 91               STS     INDEX
0463   E204 0F                  SEI     
0464   E205 9E BB               LDS     FPTMPM   ; store in [BB]
0465   E207 DE BD               LDX     HIGHTR   ; start at [BD]
0466   E209 08                  INX    
0467   E20A 09          LBLE20A DEX    
0468   E20B A6 00               LDAA    ,X
0469   E20D 36                  PSHA    
0470   E20E 9C C1               CPX     TENEXP   ; stop at [C1]
0471   E210 26 F8               BNE     LBLE20A
0472   E212 31                  INS    
0473   E213 9F BF               STS     FPTMPS   ; store end in [BF]
0474   E215 9E 91               LDS     INDEX
0475   E217 32                  PULA    
0476   E218 06                  TAP     
0477   E219 39                  RTS     
0478   E21A             
0479   E21A             ;$E21A  Check for Space on Stack
0480   E21A 4F          GETSTK  CLRA                  ; return with 2*B+#$3A+ram99
0481   E21B 58                  ASLB                  ;
0482   E21C D3 99               ADDD    ARREND        ; check if 2*B+3A+ram99>0xffff
0483   E21E                     
0484   E21E             ;$E21E  See if D Bytes fit on Stack (Non-Canonical Label)
0485   E21E C3 00 3A    GETSTD  ADDD    #$003A
0486   E221 25 13               BCS     OMERR       ; ?OM error
0487   E223 9F 91               STS     INDEX       
0488   E225 93 91               SUBD    INDEX       
0489   E227 24 0D               BHS     OMERR       ; ?OM if greater than stack
0490   E229 D3 91               ADDD    INDEX
0491   E22B 39                  RTS     
0492   E22C             
0493   E22C 4F          LBLE22C CLRA          ; B+X->D,X
0494   E22D DF 89       LBLE22D STX     TEMPADR ; D+X->D,X (save old X in 89.  New X,D in 8B)
0495   E22F D3 89       LBLE22F ADDD    TEMPADR ; D+TEMPADR->D,X.
0496   E231 DD 8B               STD     ram8B
0497   E233 DE 8B               LDX     ram8B
0498   E235 39                  RTS
0499   E236             
0500   E236             ;$E236  OUT OF MEMORY Error Handler
0501   E236 C6 0C       OMERR   LDAB    #$0C        ;?OM error
0502   E238             
0503   E238             ;$E238  General Error Handler
0504   E238 BD 42 97    ERROR   JSR     X_ERR1      ;error return extension 1
0505   E23B BD 42 9A            JSR     X_ERR2      ;error return extension 2
0506   E23E BD FC 86            JSR     LBLFC86
0507   E241 B6 42 6E            LDAA    ram426E
0508   E244 27 03               BEQ     LBLE249
0509   E246 BD E3 CF            JSR     LBLE3CF
0510   E249 BD E3 EE    LBLE249 JSR     LBLE3EE
0511   E24C 7F 00 E8            CLR     CHANNEL     ;turn off printer
0512   E24F BD E7 6A            JSR     LBLE76A
0513   E252 BD E7 BC            JSR     LBLE7BC
0514   E255 CE E1 8A            LDX     #ERRTAB     ;Error table
0515   E258 3A                  ABX     
0516   E259 A6 00               LDAA    ,X
0517   E25B BD E7 BE            JSR     LBLE7BE     ;A->SCN
0518   E25E A6 01               LDAA    1,X 
0519   E260 BD E7 BE            JSR     LBLE7BE     ;A->SCN
0520   E263 CE E1 AF            LDX     #ERRTXT-1  ;"ERROR"
0521   E266                     
0522   E266             ;$E266  Print "ERROR" or "ERROR IN line"
0523   E266 BD E7 A8    ERRFIN  JSR     STROUT      ;Write string
0524   E269 DE E2               LDX     CURLIN
0525   E26B 08                  INX    
0526   E26C 27 03               BEQ     READY 
0527   E26E BD F4 12            JSR     LBLF412         ;' IN ' line
0528   E271                     
0529   E271             ;$E271  Print "READY" and Return to Direct Mode
0530   E271 BD E7 6A    READY   JSR     LBLE76A
0531   E274 CE E1 BC            LDX     #REDDY           ;"OK"
0532   E277 BD E7 A8            JSR     STROUT          ;Write string
0533   E27A             
0534   E27A             ;$E27A  Main Loop - Direct Mode
0535   E27A CE FF FF    MAIN    LDX     #$FFFF
0536   E27D DF E2               STX     CURLIN
0537   E27F BD FA A4            JSR     LBLFAA4       ;Get Command Line
0538   E282 25 F6               BCS     MAIN          ;Try again if carry set (BREAK)
0539   E284 DF F4               STX     TXTPTR
0540   E286 BD 00 EB            JSR     >CHRGET
0541   E289 27 EF               BEQ     MAIN          ;Try again if blank line
0542   E28B 25 06               BCS     MAIN1
0543   E28D BD E3 11            JSR     CRUNCH       ;immediate mode - CRUNCH line.
0544   E290 7E E5 3D            JMP     GONE
0545   E293             
0546   E293 BD E6 B2    MAIN1   JSR     LINGET        ;get line number->LINNUM
0547   E296 DE A5               LDX     LINNUM
0548   E298 FF 42 B0            STX     SAVLIN        ;store line number (for extensions?)
0549   E29B BD E3 11            JSR     CRUNCH        ;CRUNCH line
0550   E29E D7 82               STAB    COUNT         ;length of line
0551   E2A0 BD E3 B9            JSR     FNDLIN        ;find first line greater than line number
0552   E2A3 25 1C               BCS     NODEL         ;none found, insert at end.
0553   E2A5 DC C1               LDD     TENEXP
0554   E2A7 A3 00               SUBD    ,X
0555   E2A9 D3 95               ADDD    VARTAB 
0556   E2AB DD 95               STD     VARTAB 
0557   E2AD 07                  TPA     
0558   E2AE 36                  PSHA    
0559   E2AF 9F 91               STS     INDEX
0560   E2B1 0F                  SEI     
0561   E2B2 AE 00               LDS     ,X
0562   E2B4 34                  DES    
0563   E2B5 32          LBLE2B5 PULA    
0564   E2B6 A7 00               STAA    ,X
0565   E2B8 08                  INX    
0566   E2B9 9C 95               CPX     VARTAB 
0567   E2BB 26 F8               BNE     LBLE2B5
0568   E2BD 9E 91               LDS     INDEX
0569   E2BF 32                  PULA    
0570   E2C0 06                  TAP     
0571   E2C1             
0572   E2C1             ;$E2C1  Add Line to End of Program
0573   E2C1 B6 42 B2    NODEL   LDAA    BUF
0574   E2C4 27 25               BEQ     LBLE2EB
0575   E2C6 DC 95               LDD     VARTAB 
0576   E2C8 DD BD               STD     HIGHTR
0577   E2CA DB 82               ADDB    COUNT
0578   E2CC 89 00               ADCA    #$00
0579   E2CE DD BB               STD     FPTMPM
0580   E2D0 BD E1 FE            JSR     LBLE1FE  ;copy [C1:BD]->[bf:BB]
0581   E2D3 07                  TPA     
0582   E2D4 36                  PSHA    
0583   E2D5 9F 91               STS     INDEX
0584   E2D7 0F                  SEI     
0585   E2D8 8E 42 AD            LDS     #$42AD
0586   E2DB 32          LBLE2DB PULA    
0587   E2DC A7 00               STAA    ,X
0588   E2DE 08                  INX    
0589   E2DF 9C BF               CPX     FPTMPS  
0590   E2E1 26 F8               BNE     LBLE2DB
0591   E2E3 9E 91               LDS     INDEX
0592   E2E5 32                  PULA    
0593   E2E6 06                  TAP     
0594   E2E7 DE BB               LDX     FPTMPM
0595   E2E9 DF 95               STX     VARTAB 
0596   E2EB BD E3 D9    LBLE2EB JSR     LBLE3D9  ;reset variables
0597   E2EE 8D 03               BSR     LBLE2F3  ;adjust next statement pointers
0598   E2F0 7E E2 7A            JMP     MAIN     ;get command line
0599   E2F3                                      ; adjust next statement pointers
0600   E2F3                                      
0601   E2F3 DE 93       LBLE2F3 LDX     TXTTAB    ;start of TXTTAB
0602   E2F5 EC 00       LBLE2F5 LDD     ,X       ;return if last statement.
0603   E2F7 26 01               BNE     LBLE2FA
0604   E2F9 39                  RTS
0605   E2FA                     
0606   E2FA 3C          LBLE2FA PSHX             ;push address of statement
0607   E2FB C6 04               LDAB    #$04
0608   E2FD 3A                  ABX     
0609   E2FE 08          LBLE2FE INX    
0610   E2FF A6 00               LDAA    ,X
0611   E301 26 FB               BNE     LBLE2FE
0612   E303 08                  INX    
0613   E304 3C                  PSHX           ;push address of next statement
0614   E305 30                  TSX     
0615   E306 EC 00               LDD     ,X     ;addr of next statement -> D
0616   E308 EE 02               LDX     2,X    ;addr of prev statement -> X
0617   E30A ED 00               STD     ,X     ;update addr of prev statment to point to next statement.
0618   E30C 38                  PULX    
0619   E30D 31                  INS    
0620   E30E 31                  INS    
0621   E30F 20 E4               BRA     LBLE2F5
0622   E311             
0623   E311 7F 00 85    CRUNCH  CLR     ram85    ;clear DATA token flag
0624   E314 DE F4               LDX     TXTPTR  ;reset pointer back to start of line.
0625   E316 09                  DEX    
0626   E317 DF F4               STX     TXTPTR
0627   E319 CE 42 B1            LDX     #TBL42B1 ;start of command line buffer-1
0628   E31C DF DE               STX     ramDE
0629   E31E 9F 91               STS     INDEX
0630   E320 07                  TPA             ; save interrupt flag
0631   E321 97 87               STAA    ram87
0632   E323 01          LBLE323 NOP     
0633   E324 0F                  SEI             ; disable interrupts
0634   E325 9E F4               LDS     TXTPTR
0635   E327 33                  PULB    
0636   E328 C1 20               CMPB    #$20    ; ' '
0637   E32A 27 38               BEQ     LBLE364
0638   E32C D7 81               STAB    ENDCHR
0639   E32E C1 22               CMPB    #$22    ; '"'
0640   E330 27 5B               BEQ     LBLE38D
0641   E332 96 85               LDAA    ram85
0642   E334 26 2E               BNE     LBLE364
0643   E336 C1 3F               CMPB    #$3F    ; '?'
0644   E338 26 04               BNE     LBLE33E
0645   E33A C6 86               LDAB    #$86    ; 'PRINT' code
0646   E33C 20 26               BRA     LBLE364
0647   E33E C1 30       LBLE33E CMPB    #$30    ; '0'
0648   E340 25 04               BCS     LBLE346
0649   E342 C1 3C               CMPB    #$3C    ; '<'
0650   E344 25 1E               BCS     LBLE364
0651   E346 5D          LBLE346 TSTB            ; use ! for non-printing input chars
0652   E347 2B 19               BMI     LBLE362
0653   E349 CE E0 44            LDX     #RESLST -1 ; start matching RESLST
0654   E34C 9E F4               LDS     TXTPTR
0655   E34E 5F                  CLRB    
0656   E34F 08          LBLE34F INX    
0657   E350 32          LBLE350 PULA    
0658   E351 81 20               CMPA    #$20    ; skip whitespace when matching RESLST
0659   E353 27 FB               BEQ     LBLE350
0660   E355 A0 00               SUBA    ,X
0661   E357 27 F6               BEQ     LBLE34F
0662   E359 81 80               CMPA    #$80
0663   E35B 26 35               BNE     LBLE392
0664   E35D CA 80               ORAB    #$80    ; found match, store token.
0665   E35F DE DE       LBLE35F LDX     ramDE
0666   E361             
0667   E361             ;old        FCB     $CB        ;CPX #
0668   E361                     
0669   E361             LBLE362 EQU $+1
0670   E361 8C C6 21            CPX     #$C621 ;old LDAB    #'!'
0671   E364             
0672   E364 9F F4       LBLE364 STS     TXTPTR
0673   E366 9E 91               LDS     INDEX
0674   E368 96 87               LDAA    ram87   ; restore interrupt
0675   E36A 06                  TAP     
0676   E36B 08                  INX    
0677   E36C DF DE               STX     ramDE
0678   E36E E7 00               STAB    ,X
0679   E370 27 38               BEQ     LBLE3AA
0680   E372 C0 3A               SUBB    #$3A    ; ':'
0681   E374 27 04               BEQ     LBLE37A
0682   E376 C1 4B               CMPB    #$4B    ; 'DATA' encountered
0683   E378 26 02               BNE     LBLE37C
0684   E37A D7 85       LBLE37A STAB    ram85   ; set DATA token flag
0685   E37C C0 49       LBLE37C SUBB    #$49    ; 'REM' 
0686   E37E 26 A3               BNE     LBLE323 ; get next char.
0687   E380 D7 81               STAB    ENDCHR   ; 'REM' found, clear ENDCHR
0688   E382 0F                  SEI     
0689   E383 9E F4               LDS     TXTPTR
0690   E385 33          LBLE385 PULB           ; copy until 0 or ENDCHR encountered.
0691   E386 5D                  TSTB    
0692   E387 27 DB               BEQ     LBLE364
0693   E389 D1 81               CMPB    ENDCHR
0694   E38B 27 D7               BEQ     LBLE364
0695   E38D 08          LBLE38D INX    
0696   E38E E7 00               STAB    ,X
0697   E390 20 F3               BRA     LBLE385
0698   E392 9E F4       LBLE392 LDS     TXTPTR ; token failed match
0699   E394 5C                  INCB            ;  inc token count
0700   E395 A6 00       LBLE395 LDAA    ,X      ;  
0701   E397 08                  INX    
0702   E398 2A FB               BPL     LBLE395
0703   E39A A6 00               LDAA    ,X
0704   E39C 26 B2               BNE     LBLE350
0705   E39E 9F F4               STS     TXTPTR ; no RESLST matched.
0706   E3A0 9E 91               LDS     INDEX
0707   E3A2 BD 42 A3            JSR     X_TOKEN
0708   E3A5 9E F4               LDS     TXTPTR
0709   E3A7 33                  PULB    
0710   E3A8 20 B5               BRA     LBLE35F
0711   E3AA E7 01       LBLE3AA STAB    1,X     ; clear next two bytes
0712   E3AC E7 02               STAB    2,X
0713   E3AE DC DE               LDD     ramDE
0714   E3B0 83 42 AD            SUBD    #$42AD  ; length of buff in D.
0715   E3B3 CE 42 B1            LDX     #TBL42B1
0716   E3B6 DF F4               STX     TXTPTR
0717   E3B8 39                  RTS     
0718   E3B9             
0719   E3B9             ;$E3B9  Get Pointer to Line in LINNUM
0720   E3B9 DE 93       FNDLIN  LDX     TXTTAB
0721   E3BB             ;$E3BB  Get Pointer to Line in X
0722   E3BB EC 00       FNDLNC  LDD     ,X
0723   E3BD 27 0A               BEQ     FLNFND        ;Line Found
0724   E3BF DC A5               LDD     LINNUM
0725   E3C1 A3 02               SUBD    2,X
0726   E3C3 23 05               BLS     FLINRT 
0727   E3C5 EE 00               LDX     ,X
0728   E3C7 20 F2               BRA     FNDLNC
0729   E3C9 0D          FLNFND  SEC                   ;(Non-Canonical Label)
0730   E3CA DF C1       FLINRT  STX     TENEXP
0731   E3CC 39                  RTS
0732   E3CD             
0733   E3CD             ;#E3CD  NEW command ---
0734   E3CD 26 FB       SCRATH  BNE     FLINRT  ; cause syntax error
0735   E3CF DE 93       LBLE3CF LDX     TXTTAB   ; start of TXTTAB 
0736   E3D1 6F 00               CLR     ,X       ; clear line
0737   E3D3 08                  INX            
0738   E3D4 6F 00               CLR     ,X
0739   E3D6 08                  INX    
0740   E3D7 DF 95               STX     VARTAB    ; end of TXTTAB
0741   E3D9 DE 93       LBLE3D9 LDX     TXTTAB   ; transfer control to program
0742   E3DB 09                  DEX    
0743   E3DC DF F4               STX     TXTPTR ; read pointer
0744   E3DE BD 42 8E    LBLE3DE JSR     X_NEW   ; NEW command extension
0745   E3E1 DE A1               LDX     MEMSIZ  ; top of string storage
0746   E3E3 DF 9D               STX     FRESPC   ; avail string storage.
0747   E3E5 BD E5 60            JSR     RESTOR
0748   E3E8 DE 95               LDX     VARTAB    ; end of TXTTAB
0749   E3EA DF 97               STX     ARYTAB  ; DATA pointer
0750   E3EC DF 99               STX     ARREND  ; 
0751   E3EE CE 42 41    LBLE3EE LDX     #STRBUFF  ; string buff.
0752   E3F1 FF 42 3D            STX     LASTPT   ; string ptr.
0753   E3F4 38                  PULX    
0754   E3F5 9E 9B               LDS     FRETOP ; bottom of system stack 
0755   E3F7 4F                  CLRA    
0756   E3F8 36                  PSHA    
0757   E3F9 97 A7               STAA    BRKADR   ; program BREAK address
0758   E3FB 97 A8               STAA    BRKADR+1   ; program BREAK address
0759   E3FD 97 86               STAA    SUBFLG   ; ?
0760   E3FF B7 42 6E            STAA    ram426E ; NEW command status flag
0761   E402 6E 00               JMP     ,X      ; RTS
0762   E404             
0763   E404             ;$E404  ;Set CHANNEL to Printer (Non-Canonical Labels)
0764   E404 C6 FE       LPCHAN  LDAB    #$FE    ; select printer
0765   E406 D7 E8               STAB    CHANNEL ; turn on printer
0766   E408 7E 00 F3    LCHGOT  JMP     CHRGOT 
0767   E40B             
0768   E40B             ;       LLIST command 
0769   E40B 8D F7       LLIST   BSR     LPCHAN      ;Set CHANNEL to Printer
0770   E40D             
0771   E40D             ;       LIST command
0772   E40D 07          LIST    TPA     
0773   E40E 36                  PSHA    
0774   E40F 8D F7               BSR     LCHGOT      ; Get char
0775   E411 BD E6 B2            JSR     LINGET     ; Get line number
0776   E414 8D A3               BSR     FNDLIN     ; Find line number in program
0777   E416 32                  PULA    
0778   E417 06                  TAP     
0779   E418 3C                  PSHX    
0780   E419 27 16               BEQ     LBLE431
0781   E41B BD 00 F3            JSR     >CHRGOT
0782   E41E 27 16               BEQ     LBLE436
0783   E420 81 A8               CMPA    #$A8    ; '-'
0784   E422 26 0A               BNE     LBLE42E
0785   E424 BD 00 EB            JSR     >CHRGET
0786   E427 27 08               BEQ     LBLE431
0787   E429 BD E6 B2            JSR     LINGET
0788   E42C 27 08               BEQ     LBLE436
0789   E42E 7E EA 3C    LBLE42E JMP     SNERR  ;?SN ERROR
0790   E431 CE FF FF    LBLE431 LDX     #$FFFF
0791   E434 DF A5               STX     LINNUM
0792   E436 38          LBLE436 PULX    
0793   E437 31                  INS    
0794   E438 31                  INS    
0795   E439 BD E7 6A    LBLE439 JSR     LBLE76A
0796   E43C BD E5 66            JSR     ISCNTC
0797   E43F EC 00               LDD     ,X
0798   E441 26 06               BNE     LBLE449
0799   E443 7F 00 E8    LBLE443 CLR     CHANNEL ; set output to printer
0800   E446 7E E2 71            JMP     READY 
0801   E449 EC 02       LBLE449 LDD     2,X
0802   E44B 93 A5               SUBD    LINNUM
0803   E44D 22 F4               BHI     LBLE443
0804   E44F EC 02               LDD     2,X
0805   E451 3C                  PSHX    
0806   E452 BD F4 19            JSR     LINPRT
0807   E455 38                  PULX    
0808   E456 08                  INX    
0809   E457 08                  INX    
0810   E458 08                  INX    
0811   E459 08                  INX    
0812   E45A DF 89               STX     TEMPADR
0813   E45C 7F 42 84            CLR     ram4284
0814   E45F 86 20               LDAA    #$20
0815   E461             LBLE462 EQU $+1
0816   E461 8C 86 21    LBLE461 CPX     #$8621
0817   E464 DE 89       LBLE464 LDX     TEMPADR
0818   E466 84 7F               ANDA    #$7F
0819   E468 BD E7 BE    LBLE468 JSR     LBLE7BE  ;A->SCN
0820   E46B A6 00               LDAA    ,X
0821   E46D 08                  INX    
0822   E46E 4D                  TSTA    
0823   E46F 27 C8               BEQ     LBLE439
0824   E471 F6 42 84            LDAB    ram4284
0825   E474 81 22               CMPA    #$22   ; '"'
0826   E476 26 05               BNE     LBLE47D
0827   E478 C8 01               EORB    #$01
0828   E47A F7 42 84            STAB    ram4284
0829   E47D 81 3A       LBLE47D CMPA    #$3A   ; ':'
0830   E47F 26 09               BNE     LBLE48A
0831   E481 C5 01               BITB    #$01
0832   E483 26 05               BNE     LBLE48A
0833   E485 C4 FD               ANDB    #$FD
0834   E487 F7 42 84            STAB    ram4284
0835   E48A 4D          LBLE48A TSTA    
0836   E48B 2A DB               BPL     LBLE468
0837   E48D 5D                  TSTB    
0838   E48E 26 D8               BNE     LBLE468
0839   E490 81 85               CMPA    #$85   ; 'DATA'
0840   E492 26 02               BNE     LBLE496
0841   E494 CA 02               ORAB    #$02
0842   E496 81 83       LBLE496 CMPA    #$83   ; 'REM'
0843   E498 26 02               BNE     LBLE49C
0844   E49A CA 04               ORAB    #$04
0845   E49C F7 42 84    LBLE49C STAB    ram4284
0846   E49F BD 42 A6            JSR     X_LIST 
0847   E4A2 81 C8               CMPA    #$C8       ; 'MEM'
0848   E4A4 22 BC               BHI     LBLE462  ; write ! for unknown print
0849   E4A6 8D 0A               BSR     TOKADR 
0850   E4A8 A6 00       LBLE4A8 LDAA    ,X     ; write token
0851   E4AA 2B B8               BMI     LBLE464
0852   E4AC 08                  INX    
0853   E4AD BD E7 BE            JSR     LBLE7BE;A->SCN
0854   E4B0 20 F6               BRA     LBLE4A8
0855   E4B2             
0856   E4B2 80 7F       TOKADR  SUBA    #$7F     ;Find address of matching token->X
0857   E4B4 DF 89               STX     TEMPADR    ;save X into TEMPADR
0858   E4B6 CE E0 45            LDX     #RESLST 
0859   E4B9 4A          LBLE4B9 DECA    
0860   E4BA 26 01               BNE     LBLE4BD
0861   E4BC 39                  RTS     
0862   E4BD 6D 00       LBLE4BD TST     ,X
0863   E4BF 08                  INX    
0864   E4C0 2A FB               BPL     LBLE4BD
0865   E4C2 20 F5               BRA     LBLE4B9
0866   E4C4             
0867   E4C4                              ; --- FOR Command ---
0868   E4C4 86 80       FOR     LDAA    #$80
0869   E4C6 97 86               STAA    SUBFLG
0870   E4C8 BD E6 D3            JSR     LET
0871   E4CB BD E1 D8            JSR     FNDFOR
0872   E4CE 38                  PULX    
0873   E4CF 26 04               BNE     NOTOL
0874   E4D1 DE 89               LDX     TEMPADR
0875   E4D3 3A                  ABX     
0876   E4D4 35                  TXS     
0877   E4D5 C6 09       NOTOL   LDAB    #$09          ;Precision
0878   E4D7 BD E2 1A            JSR     GETSTK        ; Verify 9 words will fit on stack
0879   E4DA BD E6 56            JSR     DATAN       ; ignore rest of line until ':' seen
0880   E4DD 3C                  PSHX    
0881   E4DE DE E2               LDX     CURLIN
0882   E4E0 3C                  PSHX    
0883   E4E1 C6 A2               LDAB    #$A2     ;'TO' index
0884   E4E3 BD EA 31            JSR     SYNCHR
0885   E4E6 BD E9 0E            JSR     CHKNUM   ; expect numeric
0886   E4E9 BD E9 0C            JSR     FRMNUM  ; Get numeric value
0887   E4EC D6 CE               LDAB    FACSGN
0888   E4EE CA 7F               ORAB    #$7F
0889   E4F0 D4 CA               ANDB    FACHO
0890   E4F2 D7 CA               STAB    FACHO
0891   E4F4 CE E4 FA            LDX     #LBLE4FA  ; push C9-CA onto stack
0892   E4F7 7E E9 A4            JMP     LBLE9A4
0893   E4FA CE F0 8B    LBLE4FA LDX     #TBLF08B  ; 1.0
0894   E4FD BD F2 51            JSR     MOVFM  ;X->C9-E
0895   E500 BD 00 F3            JSR    >CHRGOT 
0896   E503 81 A5               CMPA    #$A5     ;'STEP' index
0897   E505 26 06               BNE     LBLE50D
0898   E507 BD 00 EB            JSR    >CHRGET
0899   E50A BD E9 0C            JSR     FRMNUM  ; Get numeric value
0900   E50D BD F2 AD    LBLE50D JSR     SIGN  ;Sign C9-E -> B -1 0 1
0901   E510 BD E9 A2            JSR     LBLE9A2
0902   E513 DE B5               LDX     FORPNT
0903   E515 3C                  PSHX    
0904   E516 86 80               LDAA    #$80
0905   E518 36                  PSHA    
0906   E519 8D 4B       LBLE519 BSR     ISCNTC  ; check for BREAK or PAUSE
0907   E51B DE F4               LDX     TXTPTR
0908   E51D DF A9               STX     OLDTXT
0909   E51F A6 00               LDAA    ,X
0910   E521 27 07               BEQ     LBLE52A
0911   E523 81 3A               CMPA    #$3A     ; ':'
0912   E525 27 16               BEQ     GONE
0913   E527 7E EA 3C    SNERRF  JMP     SNERR  ; ?SN ERROR
0914   E52A 08          LBLE52A INX              ; check for next line
0915   E52B A6 00               LDAA    ,X
0916   E52D 08                  INX    
0917   E52E AA 00               ORAA    ,X
0918   E530 B7 42 83            STAA    BRKSTS   ; 0 if at last line number
0919   E533 27 54               BEQ     LBLE589  ; Implicit END if no next line.
0920   E535 08                  INX    
0921   E536 EC 00               LDD     ,X
0922   E538 DD E2               STD     CURLIN    ; Otherwise store current line in E2.
0923   E53A 08                  INX    
0924   E53B DF F4               STX     TXTPTR
0925   E53D             
0926   E53D             ;$E53D   Read and Execute Next Statement
0927   E53D BD 00 EB    GONE    JSR    >CHRGET   ; get token
0928   E540 8D 02               BSR     GONE3
0929   E542 20 D5               BRA     LBLE519  ; continue executing line
0930   E544             ;E544   
0931   E544 27 71       GONE3   BEQ     CONTRT  ; RTS if 0 encountered.
0932   E546             ;$E546
0933   E546 BD 42 A0    GONE2   JSR     X_RUN    ; Run command extension
0934   E549 4D                  TSTA    
0935   E54A 2B 03               BMI     NOTLET        ; Command encountered. (Non-Canonical Label)
0936   E54C 7E E6 D3            JMP     LET           ; otherwise, this must be an assignment.
0937   E54F 81 A0       NOTLET  CMPA    #$A0          ; SKIPF is the last valid command.
0938   E551 22 D4               BHI     SNERRF   ; ?SN ERROR
0939   E553 48                  ASLA             ; lookup command.
0940   E554 16                  TAB     
0941   E555 CE E1 48            LDX     #STMDSP  
0942   E558 3A                  ABX     
0943   E559 EE 00               LDX     ,X
0944   E55B BD 00 EB            JSR    >CHRGET   ; prefetch next character.
0945   E55E 6E 00               JMP     ,X       ; GO! [to command]
0946   E560             
0947   E560             ;$E560  RESTORE command
0948   E560 DE 93       RESTOR  LDX     TXTTAB
0949   E562 09                  DEX    
0950   E563 DF AD       RESFIN  STX     DATPTR  ;DATA pointer
0951   E565 39                  RTS
0952   E566             
0953   E566             ;$E566  Check for Ctrl-C
0954   E566 BD F8 79    ISCNTC  JSR     LBLF879
0955   E569 27 0B               BEQ     ISCRTS
0956   E56B             ;       Loop after Pause  (Non-Canonical Label)
0957   E56B 81 03       ISCNTL  CMPA    #$03          ; 'break pressed?
0958   E56D 27 0F               BEQ     STOP
0959   E56F 81 13               CMPA    #$13          ; 'shift+@ pressed (pause)
0960   E571 27 04               BEQ     ISCNTW        ;  wait for next key.
0961   E573 B7 42 7F            STAA    LASTKEY
0962   E576 39          ISCRTS  RTS
0963   E577             
0964   E577             ;       Wait fotr Key Press (Non-Canonical Label)
0965   E577 BD F8 83    ISCNTW  JSR     SCANKBD 
0966   E57A 27 FB               BEQ     ISCNTW
0967   E57C 20 ED               BRA     ISCNTL
0968   E57E             
0969   E57E             ;$E57E  STOP command
0970   E57E 0D          STOP    SEC
0971   E57F             
0972   E57F             ;$E57F  END command 
0973   E57F 26 36       END     BNE     CONTRT
0974   E581 DE F4               LDX     TXTPTR
0975   E583 DF A9               STX     OLDTXT
0976   E585 76 42 83    LBLE585 ROR     BRKSTS  ; break status flag 
0977   E588 38                  PULX    
0978   E589 DE E2       LBLE589 LDX     CURLIN
0979   E58B 08                  INX    
0980   E58C 27 07               BEQ     LBLE595
0981   E58E 09                  DEX    
0982   E58F DF A3               STX     ramA3
0983   E591 DE A9               LDX     OLDTXT
0984   E593 DF A7               STX     BRKADR
0985   E595 7F 00 E8    LBLE595 CLR     CHANNEL    ; turn off printing
0986   E598 CE E1 C0            LDX     #BRKTXT-1 ; 'BREAK'
0987   E59B 7D 42 83            TST     BRKSTS 
0988   E59E 2A 03               BPL     LBLE5A3
0989   E5A0 7E E2 66            JMP     ERRFIN    ; in program 
0990   E5A3 7E E2 71    LBLE5A3 JMP     READY     ; not in program
0991   E5A6             
0992   E5A6             ;$E5A6  CONT command
0993   E5A6 26 0F       CONT    BNE     CONTRT
0994   E5A8 C6 20               LDAB    #$20     ;?CN error
0995   E5AA DE A7               LDX     BRKADR
0996   E5AC 26 03               BNE     CONT1
0997   E5AE 7E E2 38            JMP     ERROR    ;write ?CN error
0998   E5B1 DF F4       CONT1   STX     TXTPTR        ;(Non-Canonical Label)
0999   E5B3 DE A3               LDX     ramA3
1000   E5B5 DF E2               STX     CURLIN
1001   E5B7 39          CONTRT  RTS
1002   E5B8             
1003   E5B8                             ; --- CLEAR command ---
1004   E5B8             C_CLEAR
1005   E5B8 27 3A               BEQ     LBLE5F4
1006   E5BA BD EB BD            JSR     LBLEBBD
1007   E5BD 37                  PSHB    
1008   E5BE 36                  PSHA    
1009   E5BF DE A1               LDX     MEMSIZ  ; top of string storage
1010   E5C1 DF CC               STX     FACMO
1011   E5C3 BD 00 F3            JSR    >CHRGOT 
1012   E5C6 27 12               BEQ     LBLE5DA
1013   E5C8 BD EA 2F            JSR     CHKCOM-2  ; get ','
1014   E5CB BD EF 4C            JSR     INTIDX2
1015   E5CE DE CC               LDX     FACMO
1016   E5D0 09                  DEX    
1017   E5D1 DF CC               STX     FACMO
1018   E5D3 FC 42 50            LDD     RAMTOP  ; end of memory pointer
1019   E5D6 93 CC               SUBD    FACMO
1020   E5D8 25 1D               BCS     LBLE5F7 ; ?OM error
1021   E5DA DC CC       LBLE5DA LDD     FACMO
1022   E5DC 37                  PSHB    
1023   E5DD 36                  PSHA    
1024   E5DE 30                  TSX     
1025   E5DF A3 02               SUBD    2,X
1026   E5E1 25 14               BCS     LBLE5F7 ; ?OM error
1027   E5E3 ED 02               STD     2,X
1028   E5E5 83 00 3A            SUBD    #$003A
1029   E5E8 25 0D               BCS     LBLE5F7 ; ?OM error
1030   E5EA 93 95               SUBD    VARTAB 
1031   E5EC 25 09               BCS     LBLE5F7 ; ?OM error
1032   E5EE 38                  PULX    
1033   E5EF DF A1               STX     MEMSIZ; top of string storage
1034   E5F1 38                  PULX    
1035   E5F2 DF 9B               STX     FRETOP ; bottom of system stack
1036   E5F4 7E E3 DE    LBLE5F4 JMP     LBLE3DE ; reset variables
1037   E5F7 7E E2 36    LBLE5F7 JMP     OMERR ; ?OM ERROR
1038   E5FA             
1039   E5FA                             ; --- RUN command ---
1040   E5FA             C_RUN
1041   E5FA 26 03               BNE     LBLE5FF
1042   E5FC 7E E3 D9            JMP     LBLE3D9 ; transfer control to program / reset variables
1043   E5FF BD E3 DE    LBLE5FF JSR     LBLE3DE ; reset data variables
1044   E602 20 0E               BRA     LBLE612
1045   E604             
1046   E604                             ; --- GOSUB command ---
1047   E604             C_GOSUB
1048   E604 C6 03               LDAB    #$03   
1049   E606 BD E2 1A            JSR     GETSTK ; verify 3 words on stack
1050   E609 DE F4               LDX     TXTPTR
1051   E60B 3C                  PSHX    
1052   E60C DE E2               LDX     CURLIN
1053   E60E 3C                  PSHX    
1054   E60F 86 82               LDAA    #$82
1055   E611 36                  PSHA    
1056   E612 BD 00 F3    LBLE612 JSR    >CHRGOT 
1057   E615 8D 03               BSR     C_GOTO
1058   E617 7E E5 19            JMP     LBLE519 ; Continue executing line
1059   E61A             
1060   E61A                             ; --- GOTO command ---
1061   E61A             C_GOTO
1062   E61A BD E6 B2            JSR     LINGET
1063   E61D 8D 3A               BSR     REMN
1064   E61F 08                  INX    
1065   E620 DC A5               LDD     LINNUM
1066   E622 93 E2               SUBD    CURLIN
1067   E624 22 02               BHI     LBLE628
1068   E626 DE 93               LDX     TXTTAB
1069   E628 BD E3 BB    LBLE628 JSR     FNDLNC
1070   E62B 25 15               BCS     ULERR-2 ;?UL error
1071   E62D 09                  DEX
1072   E62E DF F4               STX     TXTPTR
1073   E630 39          LBLE630 RTS
1074   E631             
1075   E631                             ; --- RETURN command ---
1076   E631             C_RETURN
1077   E631 26 FD               BNE     LBLE630 ; will ultimately result in ?SN error
1078   E633 86 FF               LDAA    #$FF
1079   E635 97 B5               STAA    FORPNT
1080   E637 BD E1 D8            JSR     FNDFOR
1081   E63A 35                  TXS     
1082   E63B 81 02               CMPA    #$02
1083   E63D 27 0B               BEQ     LBLE64A
1084   E63F C6 04               LDAB    #$04    ;?RG error
1085   E641 8C C6 0E            CPX     #$C60E
1086   E644             ;$E642  Undefined Line Error Handler (Non-Canonical Label)
1087   E644 7E E2 38    ULERR   JMP     ERROR         ;Write error
1088   E647             
1089   E647             ;$E647
1090   E647 7E EA 3C    SNERRR  JMP     SNERR       ;?SN error
1091   E64A 32          LBLE64A PULA    
1092   E64B 38                  PULX    
1093   E64C DF E2               STX     CURLIN
1094   E64E 38                  PULX    
1095   E64F DF F4               STX     TXTPTR
1096   E651             
1097   E651             
1098   E651             ;       DATA command
1099   E651 8D 03       DATA    BSR     DATAN ; ignore rest of line until ':' or 0 reached.
1100   E653 DF F4               STX     TXTPTR
1101   E655 39          REMRTS  RTS
1102   E656             
1103   E656             
1104   E656             ;$E656  
1105   E656 C6 3A       DATAN   LDAB    #$3A   ; ignore rest of line until ':' or 0 reached.
1106   E658 86                  FCB     $86           ;LDAA #$5F
1107   E659 5F          REMN    CLRB
1108   E65A D7 80               STAB    CHARAC
1109   E65C 5F                  CLRB    
1110   E65D DE F4               LDX     TXTPTR
1111   E65F 17          EXCHQT  TBA     
1112   E660 D6 80               LDAB    CHARAC
1113   E662 97 80               STAA    CHARAC
1114   E664 A6 00       REMER   LDAA    ,X
1115   E666 27 ED               BEQ     REMRTS
1116   E668 11                  CBA     
1117   E669 27 EA               BEQ     REMRTS
1118   E66B 08                  INX    
1119   E66C 81 22               CMPA    #$22   ; '"'
1120   E66E 27 EF               BEQ     EXCHQT
1121   E670 20 F2               BRA     REMER
1122   E672             
1123   E672             
1124   E672             ;$E672  IF command ---
1125   E672 BD E9 0C    IF      JSR     FRMNUM ; Get numeric value
1126   E675 BD 00 F3            JSR    >CHRGOT 
1127   E678 81 81               CMPA    #$81    ; GOTO
1128   E67A 27 05               BEQ     OKGOTO
1129   E67C C6 A3               LDAB    #$A3    ; THEN
1130   E67E BD EA 31            JSR     SYNCHR
1131   E681 96 C9       OKGOTO  LDAA    FAC
1132   E683 26 05               BNE     DOCOND
1133   E685             
1134   E685             
1135   E685             ;$E685  REM command
1136   E685 8D D2       REM     BSR     REMN
1137   E687 DF F4               STX     TXTPTR
1138   E689 39                  RTS
1139   E68A             
1140   E68A BD 00 F3    DOCOND  JSR    >CHRGOT 
1141   E68D 25 8B               BCS     C_GOTO
1142   E68F 7E E5 44            JMP     GONE3
1143   E692             
1144   E692                             ; --- ON command ----
1145   E692 BD EF 0D    C_ON    JSR     LBLEF0D ; Arg->FACLO
1146   E695 36                  PSHA    
1147   E696 81 82               CMPA    #$82    ; GOSUB
1148   E698 27 04               BEQ     LBLE69E
1149   E69A 81 81               CMPA    #$81    ; GOTO
1150   E69C 26 A9       SNERRO  BNE     SNERRR  ; ?SN ERROR
1151   E69E 7A 00 CD    LBLE69E DEC     FACLO
1152   E6A1 26 04               BNE     LBLE6A7
1153   E6A3 32                  PULA    
1154   E6A4 7E E5 46            JMP     GONE2
1155   E6A7 BD 00 EB    LBLE6A7 JSR    >CHRGET 
1156   E6AA 8D 06               BSR     LINGET ; get line number->A5
1157   E6AC 81 2C               CMPA    #$2C    ; ','
1158   E6AE 27 EE               BEQ     LBLE69E
1159   E6B0 31                  INS    
1160   E6B1 39          ONGRTS  RTS            ; bug -- "0 ON 2 GOTO 4,#,4,4#" hangs the MC-10 on RUN.
1161   E6B2             
1162   E6B2             ;$E6B2  Read a Line Number into LINNUM
1163   E6B2 CE 00 00    LINGET  LDX     #$0000        ;initialize line number to zero
1164   E6B5 DF A5               STX     LINNUM        
1165   E6B7 24 F8       MORLIN  BHS     ONGRTS        ;if not a digit, return
1166   E6B9 80 30               SUBA    #$30          ;convert ASCII to digit
1167   E6BB 97 80               STAA    CHARAC        ;  and save it
1168   E6BD DC A5               LDD     LINNUM        ;load line number
1169   E6BF 81 18               CMPA    #$18          ;if > 6399
1170   E6C1 22 D9               BHI     SNERRO        ;  issue ?SN ERROR
1171   E6C3 05                  ASLD                  ;multiply line number by ten
1172   E6C4 05                  ASLD    
1173   E6C5 D3 A5               ADDD    LINNUM
1174   E6C7 05                  ASLD    
1175   E6C8 DB 80               ADDB    CHARAC        ;add digit
1176   E6CA 89 00               ADCA    #$00
1177   E6CC DD A5               STD     LINNUM        ;and save it
1178   E6CE BD 00 EB            JSR    >CHRGET        ;read next character
1179   E6D1 20 E4               BRA     MORLIN        ;and loop
1180   E6D3             
1181   E6D3             ;       LET command
1182   E6D3 BD EB 1B    LET     JSR     PTRGET        ;get pointer to variable
1183   E6D6 DF B5               STX     FORPNT        ;and save it
1184   E6D8 C6 AF               LDAB    #$AF
1185   E6DA BD EA 31            JSR     SYNCHR
1186   E6DD 96 84               LDAA    VALTYP        ; vartype flag
1187   E6DF 36                  PSHA    
1188   E6E0 BD E9 1A            JSR     FRMEVL
1189   E6E3 32                  PULA    
1190   E6E4 46                  RORA    
1191   E6E5 BD E9 10            JSR     LBLE910 ;check for ?TM and get next number
1192   E6E8 27 2F               BEQ     LBLE719
1193   E6EA DE CC       LBLE6EA LDX     FACMO
1194   E6EC DC 9B               LDD     FRETOP ; bottom of system stack
1195   E6EE A3 02               SUBD    2,X
1196   E6F0 24 13               BHS     LBLE705
1197   E6F2 DC 95               LDD     VARTAB 
1198   E6F4 93 CC               SUBD    FACMO
1199   E6F6 22 0D               BHI     LBLE705
1200   E6F8 E6 00               LDAB    ,X
1201   E6FA BD EC FC            JSR     LBLECFC
1202   E6FD DE C7               LDX     ramC7
1203   E6FF BD EE 38            JSR     LBLEE38
1204   E702 CE 00 D0            LDX     #ramD0
1205   E705 DF C7       LBLE705 STX     ramC7
1206   E707 BD EE 70            JSR     FRETMS
1207   E70A DE C7               LDX     ramC7
1208   E70C A6 00               LDAA    ,X
1209   E70E 36                  PSHA    
1210   E70F EC 02               LDD     2,X
1211   E711 DE B5               LDX     FORPNT
1212   E713 ED 02               STD     2,X
1213   E715 32                  PULA    
1214   E716 A7 00               STAA    ,X
1215   E718 39                  RTS     
1216   E719 7E F2 70    LBLE719 JMP     LBLF270
1217   E71C             
1218   E71C             ;E71C   LPRINT command ---
1219   E71C BD E4 04    LPRINT  JSR     LPCHAN
1220   E71F             
1221   E71F                             ; --- PRINT command ---
1222   E71F             C_PRINT
1223   E71F 8D 04               BSR     LBLE725
1224   E721 7F 00 E8            CLR     CHANNEL; turn off printing
1225   E724 39                  RTS     
1226   E725 27 3F       LBLE725 BEQ     LBLE766
1227   E727 81 40               CMPA    #$40      ; '@'
1228   E729 26 0B               BNE     LBLE736
1229   E72B BD FC 29            JSR     LBLFC29
1230   E72E BD 00 F3            JSR    >CHRGOT 
1231   E731 27 33               BEQ     LBLE766
1232   E733 BD EA 2F            JSR     CHKCOM-2 ; get ','
1233   E736 27 3B       LBLE736 BEQ     LBLE773
1234   E738 81 A1       LBLE738 CMPA    #$A1
1235   E73A 27 50               BEQ     LBLE78C
1236   E73C 81 2C               CMPA    #$2C
1237   E73E 27 34               BEQ     LBLE774
1238   E740 81 3B               CMPA    #$3B
1239   E742 27 5E               BEQ     LBLE7A2
1240   E744 BD E9 1A            JSR     FRMEVL
1241   E747 96 84               LDAA    VALTYP ; vartype flag
1242   E749 36                  PSHA    
1243   E74A 26 06               BNE     LBLE752
1244   E74C BD F4 26            JSR     FOUT
1245   E74F BD ED 05            JSR     LBLED05
1246   E752 8D 57       LBLE752 BSR     LBLE7AB
1247   E754 33                  PULB    
1248   E755 5D                  TSTB    
1249   E756 26 09               BNE     LBLE761
1250   E758 BD 00 F3            JSR    >CHRGOT 
1251   E75B 81 2C               CMPA    #$2C
1252   E75D 27 15               BEQ     LBLE774
1253   E75F 8D 58               BSR     LBLE7B9
1254   E761 BD 00 F3    LBLE761 JSR    >CHRGOT 
1255   E764 26 D2               BNE     LBLE738
1256   E766 86 0D       LBLE766 LDAA    #$0D
1257   E768 20 54               BRA     LBLE7BE ;A->SCN
1258   E76A BD FA 7B    LBLE76A JSR     LBLFA7B
1259   E76D 27 F7               BEQ     LBLE766
1260   E76F 96 E6               LDAA    ramE6
1261   E771 26 F3               BNE     LBLE766
1262   E773 39          LBLE773 RTS     
1263   E774 BD FA 7B    LBLE774 JSR     LBLFA7B
1264   E777 27 0A               BEQ     LBLE783
1265   E779 D6 E6               LDAB    ramE6
1266   E77B D1 E5               CMPB    ramE5
1267   E77D 25 06               BCS     LBLE785
1268   E77F 8D E5               BSR     LBLE766
1269   E781 20 1F               BRA     LBLE7A2
1270   E783 D6 E6       LBLE783 LDAB    ramE6
1271   E785 D0 E4       LBLE785 SUBB    ramE4
1272   E787 24 FC               BHS     LBLE785
1273   E789 50                  NEGB    
1274   E78A 20 11               BRA     LBLE79D
1275   E78C BD EF 0A    LBLE78C JSR     LBLEF0A
1276   E78F 81 29               CMPA    #$29
1277   E791 27 03               BEQ     LBLE796
1278   E793 7E EA 3C            JMP     SNERR ;?SN ERROR
1279   E796 BD FA 7B    LBLE796 JSR     LBLFA7B
1280   E799 D0 E6               SUBB    ramE6
1281   E79B 23 05               BLS     LBLE7A2
1282   E79D 8D 1A       LBLE79D BSR     LBLE7B9
1283   E79F 5A                  DECB    
1284   E7A0 26 FB               BNE     LBLE79D
1285   E7A2 BD 00 EB    LBLE7A2 JSR    >CHRGET 
1286   E7A5 7E E7 36            JMP     LBLE736
1287   E7A8             
1288   E7A8             
1289   E7A8                             ; --- Write string to screen ---
1290   E7A8 BD ED 06    STROUT  JSR     STRLIT  ;Calc string length
1291   E7AB BD EE 56    LBLE7AB JSR     FREFAC  ;Get length to B, start address to X
1292   E7AE 5C                  INCB
1293   E7AF 5A          LBLE7AF DECB             ;Dec char count
1294   E7B0 27 C1               BEQ     LBLE773  ;RTS
1295   E7B2 A6 00               LDAA    ,X       ;Get char
1296   E7B4 08                  INX              ;Inc char ptr
1297   E7B5 8D 07               BSR     LBLE7BE  ;A->SCN   Write char
1298   E7B7 20 F6               BRA     LBLE7AF  ;Next char
1299   E7B9             
1300   E7B9             
1301   E7B9 86 20       LBLE7B9 LDAA    #$20
1302   E7BB 8C 86 3F            CPX     #$863F
1303   E7BE                     
1304   E7BE             LBLE7BC EQU LBLE7BE-2
1305   E7BE             
1306   E7BE 7E F9 C6    LBLE7BE JMP     OUTCH  ;A->SCN
1307   E7C1             
1308   E7C1             
1309   E7C1 3F5245444F0D00TBLE7C1 FCB     $3F,$52,$45,$44,$4F,$0D,$00     ;?REDO
1310   E7C8             
1311   E7C8             
1312   E7C8 96 87       LBLE7C8 LDAA    ram87
1313   E7CA 27 07               BEQ     LBLE7D3
1314   E7CC DE AB               LDX     ramAB
1315   E7CE DF E2               STX     CURLIN
1316   E7D0 7E EA 3C            JMP     SNERR  ;?SN ERROR
1317   E7D3 CE E7 C0    LBLE7D3 LDX     #TBLE7C1-1
1318   E7D6 BD E7 A8            JSR     STROUT 
1319   E7D9 DE A9               LDX     OLDTXT
1320   E7DB DF F4               STX     TXTPTR
1321   E7DD 39          LBLE7DD RTS
1322   E7DE             
1323   E7DE             
1324   E7DE                             ; --- INPUT command ---
1325   E7DE             C_INPUT
1326   E7DE C6 16               LDAB    #$16     ;?ID error
1327   E7E0 DE E2               LDX     CURLIN
1328   E7E2 08                  INX    
1329   E7E3 26 03               BNE     LBLE7E8
1330   E7E5 7E E2 38            JMP     ERROR    ;write ?ID error
1331   E7E8 81 22       LBLE7E8 CMPA    #$22     ;check for "Prompt";
1332   E7EA 26 0B               BNE     LBLE7F7
1333   E7EC BD EA 07            JSR     STRTXT  ; scan string until '"' reached.
1334   E7EF C6 3B               LDAB    #$3B
1335   E7F1 BD EA 31            JSR     SYNCHR  ;expect and skip ';'
1336   E7F4 BD E7 AB            JSR     LBLE7AB  ;write string to screen.
1337   E7F7 8D 06       LBLE7F7 BSR     LBLE7FF  ;"? " and get command line
1338   E7F9 C6 2C               LDAB    #$2C
1339   E7FB E7 00               STAB    ,X
1340   E7FD 20 12               BRA     LBLE810+1
1341   E7FF BD E7 BC    LBLE7FF JSR     LBLE7BC ; "?"->SCN
1342   E802 BD E7 B9            JSR     LBLE7B9   ; " "->SCN
1343   E805 BD FA A4            JSR     LBLFAA4   ; get command line
1344   E808 24 D3               BHS     LBLE7DD  
1345   E80A 38                  PULX    
1346   E80B 7E E5 85            JMP     LBLE585  ;break pressed - abort prog
1347   E80E             
1348   E80E                             ; --- READ command ---
1349   E80E             C_READ
1350   E80E DE AD               LDX     DATPTR    ;DATA pointer
1351   E810 86 4F       LBLE810 LDAA    #$4F            ;CLRA [used during INPUT command]
1352   E812 97 87               STAA    ram87
1353   E814 DF AF               STX     ramAF
1354   E816 BD EB 1B    LBLE816 JSR     PTRGET  ; Get Var
1355   E819 DF B5               STX     FORPNT
1356   E81B DE F4               LDX     TXTPTR
1357   E81D DF A5               STX     LINNUM
1358   E81F DE AF               LDX     ramAF
1359   E821 A6 00               LDAA    ,X
1360   E823 26 09               BNE     LBLE82E
1361   E825 96 87               LDAA    ram87
1362   E827 26 4E               BNE     LBLE877
1363   E829 BD E7 BC            JSR     LBLE7BC
1364   E82C 8D D1               BSR     LBLE7FF
1365   E82E DF F4       LBLE82E STX     TXTPTR
1366   E830 BD 00 EB            JSR    >CHRGET 
1367   E833 D6 84               LDAB    VALTYP  ;vartype flag
1368   E835 27 1C               BEQ     LBLE853
1369   E837 DE F4               LDX     TXTPTR
1370   E839 97 80               STAA    CHARAC
1371   E83B 81 22               CMPA    #$22
1372   E83D 27 07               BEQ     LBLE846
1373   E83F 09                  DEX    
1374   E840 86 3A               LDAA    #$3A
1375   E842 97 80               STAA    CHARAC
1376   E844 86 2C               LDAA    #$2C
1377   E846 97 81       LBLE846 STAA    ENDCHR
1378   E848 BD ED 0C            JSR     LBLED0C
1379   E84B BD EF 3E            JSR     ST2TXT
1380   E84E BD E6 EA            JSR     LBLE6EA
1381   E851 20 06               BRA     LBLE859
1382   E853 BD F3 59    LBLE853 JSR     FIN
1383   E856 BD F2 70            JSR     LBLF270
1384   E859 BD 00 F3    LBLE859 JSR    >CHRGOT 
1385   E85C 27 07               BEQ     LBLE865
1386   E85E 81 2C               CMPA    #$2C
1387   E860 27 03               BEQ     LBLE865
1388   E862 7E E7 C8            JMP     LBLE7C8
1389   E865 DE F4       LBLE865 LDX     TXTPTR
1390   E867 DF AF               STX     ramAF
1391   E869 DE A5               LDX     LINNUM
1392   E86B DF F4               STX     TXTPTR
1393   E86D BD 00 F3            JSR    >CHRGOT 
1394   E870 27 25               BEQ     LBLE897
1395   E872 BD EA 2F            JSR     CHKCOM-2 ; get ','
1396   E875 20 9F               BRA     LBLE816
1397   E877 DF F4       LBLE877 STX     TXTPTR
1398   E879 BD E6 56            JSR     DATAN  ; ignore rest of line thru ':'
1399   E87C 08                  INX    
1400   E87D 4D                  TSTA    
1401   E87E 26 0F               BNE     LBLE88F
1402   E880 C6 06               LDAB    #$06
1403   E882 A6 00               LDAA    ,X
1404   E884 AA 01               ORAA    1,X
1405   E886 27 46               BEQ     LBLE8CE
1406   E888 EC 02               LDD     2,X
1407   E88A DD AB               STD     ramAB
1408   E88C C6 04               LDAB    #$04
1409   E88E 3A                  ABX     
1410   E88F A6 00       LBLE88F LDAA    ,X
1411   E891 81 85               CMPA    #$85
1412   E893 26 E2               BNE     LBLE877
1413   E895 20 97               BRA     LBLE82E
1414   E897 DE AF       LBLE897 LDX     ramAF
1415   E899 D6 87               LDAB    ram87
1416   E89B 27 03               BEQ     LBLE8A0
1417   E89D 7E E5 63            JMP     RESFIN
1418   E8A0 A6 00       LBLE8A0 LDAA    ,X
1419   E8A2 27 06               BEQ     LBLE8AA
1420   E8A4 CE E8 AA            LDX     #LBLE8AB-1
1421   E8A7 7E E7 A8            JMP     STROUT 
1422   E8AA 39          LBLE8AA RTS
1423   E8AB             
1424   E8AB             
1425   E8AB 3F45585452412049LBLE8AB FCB     $3F,$45,$58,$54,$52,$41,$20,$49,$47,$4E,$4F,$52,$45,$44,$0D,$00 ;?EXTRA IGNORED
1425   E8B3 474E4F5245440D00
1426   E8BB             
1427   E8BB             
1428   E8BB                             ; --- NEXT command ---
1429   E8BB             C_NEXT
1430   E8BB 26 05               BNE     LBLE8C2
1431   E8BD CE 00 00            LDX     #$0000
1432   E8C0 20 03               BRA     LBLE8C5
1433   E8C2 BD EB 1B    LBLE8C2 JSR     PTRGET ;Get Var
1434   E8C5 DF B5       LBLE8C5 STX     FORPNT
1435   E8C7 BD E1 D8            JSR     FNDFOR
1436   E8CA 27 04               BEQ     LBLE8D0
1437   E8CC C6 00               LDAB    #$00    ;?NF error
1438   E8CE 20 47       LBLE8CE BRA     LBLE917 ;write error
1439   E8D0 35          LBLE8D0 TXS     
1440   E8D1 08                  INX    
1441   E8D2 08                  INX    
1442   E8D3 08                  INX    
1443   E8D4 BD F2 51            JSR     MOVFM ;X->C9-E
1444   E8D7 30                  TSX     
1445   E8D8 A6 08               LDAA    $08,X
1446   E8DA 97 CE               STAA    FACSGN
1447   E8DC DE B5               LDX     FORPNT
1448   E8DE BD EF 7D            JSR     LBLEF7D
1449   E8E1 BD F2 70            JSR     LBLF270
1450   E8E4 30                  TSX     
1451   E8E5 C6 09               LDAB    #$09
1452   E8E7 3A                  ABX     
1453   E8E8 BD F2 D9            JSR     LBLF2D9
1454   E8EB 30                  TSX     
1455   E8EC E0 08               SUBB    $08,X
1456   E8EE 27 0C               BEQ     LBLE8FC
1457   E8F0 EE 0E               LDX     $0E,X
1458   E8F2 DF E2               STX     CURLIN
1459   E8F4 30                  TSX     
1460   E8F5 EE 10               LDX     $10,X
1461   E8F7 DF F4               STX     TXTPTR
1462   E8F9 7E E5 19    LBLE8F9 JMP     LBLE519  ; continue executing line
1463   E8FC             
1464   E8FC             
1465   E8FC             
1466   E8FC C6 12       LBLE8FC LDAB    #$12
1467   E8FE 3A                  ABX     
1468   E8FF 35                  TXS     
1469   E900 BD 00 F3            JSR    >CHRGOT 
1470   E903 81 2C               CMPA    #$2C      ; ','
1471   E905 26 F2               BNE     LBLE8F9   ; continue executing line
1472   E907 BD 00 EB            JSR    >CHRGET 
1473   E90A 8D B6               BSR     LBLE8C2
1474   E90C             ;$E90C  Evaluate a Numeric Expression
1475   E90C 8D 0C       FRMNUM  BSR     FRMEVL
1476   E90E             ;$E90E  ;Require Numeric Expression
1477   E90E 6D          CHKNUM  FCB     $6D           ;TST     $0D,X     
1478   E90F             ;$E90F  ;Require String Expression
1479   E90F 0D          CHKSTR  SEC  ;E-expect numeric? F-expect string?
1480   E910 76 00 84    LBLE910 ROR     VALTYP   ;vartype flag
1481   E913 28 95               BVC     LBLE8AA   ;RTS
1482   E915 C6 18               LDAB    #$18      ;?TM error
1483   E917 7E E2 38    LBLE917 JMP     ERROR  
1484   E91A             
1485   E91A             ;$E91A  Evaluate Expression
1486   E91A DE F4       FRMEVL  LDX     TXTPTR
1487   E91C 09                  DEX    
1488   E91D DF F4               STX     TXTPTR
1489   E91F 4F                  CLRA    
1490   E920 C6 37               LDAB    #$37            ;PSHB
1491   E922 36          LPOPER  PSHA    
1492   E923 C6 01               LDAB    #$01
1493   E925 BD E2 1A            JSR     GETSTK  ; see if 1 word fits on stack
1494   E928 BD E9 E5            JSR     EVAL
1495   E92B 7F 00 B9            CLR     OPMASK
1496   E92E BD 00 F3    TSTOP   JSR    >CHRGOT 
1497   E931 80 AE       LOPREL  SUBA    #$AE    ; '>'  ; + - * / ^ AND OR > = <
1498   E933 25 14               BCS     ENDREL
1499   E935 81 03               CMPA    #$03    ; SGN
1500   E937 24 10               BHS     ENDREL
1501   E939 81 01               CMPA    #$01
1502   E93B 49                  ROLA    
1503   E93C 98 B9               EORA    OPMASK
1504   E93E 91 B9               CMPA    OPMASK
1505   E940 25 59               BCS     SNERR5
1506   E942 97 B9               STAA    OPMASK
1507   E944 BD 00 EB            JSR    >CHRGET 
1508   E947 20 E8               BRA     LOPREL
1509   E949 D6 B9       ENDREL  LDAB    OPMASK
1510   E94B 26 2B               BNE     FINREL
1511   E94D 24 66               BHS     QOP
1512   E94F 8B 07               ADDA    #$07    ; + - * / ^ AND OR > = <
1513   E951 24 62               BHS     QOP
1514   E953 99 84               ADCA    VALTYP ; vartype flag
1515   E955 26 03               BNE     LBLE95A
1516   E957 7E EE 06            JMP     LBLEE06
1517   E95A 89 FF       LBLE95A ADCA    #$FF
1518   E95C 16                  TAB             ; B = A*3
1519   E95D 48                  ASLA    
1520   E95E 1B                  ABA     
1521   E95F 16                  TAB     
1522   E960 CE E0 30            LDX     #OPTAB  
1523   E963 3A                  ABX     
1524   E964 32          LBLE964 PULA    
1525   E965 A1 00               CMPA    ,X
1526   E967 24 53               BHS     QCHNUM
1527   E969 8D A3               BSR     CHKNUM  ;expect numeric
1528   E96B 36          LBLE96B PSHA    
1529   E96C 8D 23               BSR     LBLE991
1530   E96E DE B7               LDX     OPPTR
1531   E970 32                  PULA    
1532   E971 26 18               BNE     LBLE98B
1533   E973 4D                  TSTA    
1534   E974 27 6C               BEQ     QOPRTS
1535   E976 20 4D               BRA     PULSTK
1536   E978 78 00 84    FINREL ASL     ram84
1537   E97B 59                  ROLB    
1538   E97C DE F4               LDX     TXTPTR
1539   E97E 09                  DEX    
1540   E97F DF F4               STX     TXTPTR
1541   E981 CE E9 88            LDX     #TBLE988
1542   E984 D7 B9               STAB    OPMASK
1543   E986 20 DC               BRA     LBLE964
1544   E988 64 EA AE    TBLE988 FCB     $64,$EA,$AE
1545   E98B A1 00       LBLE98B CMPA    ,X
1546   E98D 24 36               BHS     PULSTK
1547   E98F 20 DA               BRA     LBLE96B
1548   E991 EC 01       LBLE991 LDD     1,X
1549   E993 37                  PSHB           ;push binary fp operation onto stack.
1550   E994 36                  PSHA    
1551   E995 8D 07               BSR     LBLE99E  ;push CE onto stack.
1552   E997 D6 B9               LDAB    OPMASK
1553   E999 20 86               BRA     LPOPER-1
1554   E99B             
1555   E99B             ;$E99B  Branch Targer - Issue Syntax Error
1556   E99B 7E EA 3C    SNERR5  JMP     SNERR   ;Issue ?SN ERROR
1557   E99E             
1558   E99E D6 CE       LBLE99E LDAB    FACSGN ;push C9-CE onto stack.
1559   E9A0 A6 00               LDAA    ,X  
1560   E9A2 38          LBLE9A2 PULX    
1561   E9A3 37                  PSHB         
1562   E9A4 D6 CD       LBLE9A4 LDAB    FACLO  ;push C9 onto stack and return.
1563   E9A6 37                  PSHB    
1564   E9A7 D6 CC               LDAB    FACMO
1565   E9A9 37                  PSHB    
1566   E9AA D6 CB               LDAB    FACMOH
1567   E9AC 37                  PSHB    
1568   E9AD D6 CA               LDAB    FACHO
1569   E9AF 37                  PSHB    
1570   E9B0 D6 C9               LDAB    FAC
1571   E9B2 37                  PSHB    
1572   E9B3 6E 00               JMP     ,X
1573   E9B5             
1574   E9B5             ;$E9B5  Not an Operator
1575   E9B5 CE 00 00    QOP     LDX     #$0000
1576   E9B8 32                  PULA                ;Get High Precedence Of Last Op.
1577   E9B9 4D                  TSTA                ;If None
1578   E9BA 27 26               BEQ     QOPRTS      ;  Return
1579   E9BC 81 64       QCHNUM  CMPA    #$64        ;If Relational Operator
1580   E9BE 27 03               BEQ     UNPSTK
1581   E9C0 BD E9 0E            JSR     CHKNUM      ;  Parse Numeric Value
1582   E9C3 DF B7       UNPSTK  STX     OPPTR
1583   E9C5             ;$E9C5
1584   E9C5 33          PULSTK  PULB    
1585   E9C6 81 5A               CMPA    #$5A
1586   E9C8 27 1A               BEQ     UNPRTS  ;RTS
1587   E9CA 81 7D               CMPA    #$7D
1588   E9CC 27 16               BEQ     UNPRTS  ;RTS
1589   E9CE 54                  LSRB    
1590   E9CF D7 88               STAB    DOMASK
1591   E9D1 32                  PULA    
1592   E9D2 33                  PULB    
1593   E9D3 DD D6               STD     ARGEXP
1594   E9D5 38                  PULX    
1595   E9D6 DF D8               STX     ARGMOH
1596   E9D8 33                  PULB    
1597   E9D9 D7 DA               STAB    ARGLO
1598   E9DB 33                  PULB    
1599   E9DC D7 DB               STAB    ARGSGN
1600   E9DE D8 CE               EORB    FACSGN
1601   E9E0 D7 DC               STAB    ARISGN
1602   E9E2             ;$E9E2  Return Floating-Point Accumulator Exponent
1603   E9E2 D6 C9       QOPRTS  LDAB    FACEXP
1604   E9E4             ;$E9E4  Branch Target: Return
1605   E9E4 39          UNPRTS  RTS     
1606   E9E5             
1607   E9E5             ;E9E5   Evaluate ASCII Number as Floating-Point Value
1608   E9E5 BD 42 94    EVAL    JSR     XMATHS        ; maths command extension
1609   E9E8 7F 00 84            CLR     VALTYP        ; vartype flag
1610   E9EB 8D 4C               BSR     JCHGET        ; get next char
1611   E9ED 24 03               BHS     EVAL2         ; go if not numeric
1612   E9EF 7E F3 59    EVAL1   JMP     FIN           ; get FP number
1613   E9F2 BD EB 76    EVAL2   JSR     ISLETC        ; is_alpha()?
1614   E9F5 24 52               BHS     ISVAR         ; go if alpha()
1615   E9F7 81 2E       QDOT    CMPA    #'.'
1616   E9F9 27 F4               BEQ     EVAL1
1617   E9FB 81 A8               CMPA    #$A8
1618   E9FD 27 42               BEQ     LBLEA41
1619   E9FF 81 A7               CMPA    #$A7
1620   EA01 27 E2               BEQ     EVAL
1621   EA03 81 22               CMPA    #'"'
1622   EA05 26 08               BNE     EVAL3
1623   EA07             
1624   EA07             ;$EA07  Scan String 
1625   EA07 DE F4       STRTXT  LDX     TXTPTR
1626   EA09 BD ED 06            JSR     STRLIT
1627   EA0C 7E EF 3E            JMP     ST2TXT
1628   EA0F 81 A4       EVAL3   CMPA    #$A4          ;NOT Token
1629   EA11 26 0D               BNE     EVAL4
1630   EA13 86 5A               LDAA    #$5A
1631   EA15 BD E9 21            JSR     LPOPER-1
1632   EA18 BD EB C7            JSR     LBLEBC7    ;get result into D
1633   EA1B 43                  COMA               ;perform bitwise negation
1634   EA1C 53                  COMB    
1635   EA1D 7E EC E3            JMP     LBLECE3    ;return D
1636   EA20 80 B1       EVAL4   SUBA    #$B1       ; start of function RESLST [SGN()]
1637   EA22 24 31               BHS     ISFUN    ;go if a function
1638   EA24             
1639   EA24             ;$EA24  Evaluate Expression Within Parentheses
1640   EA24 8D 06       PARCHK  BSR     CHKOPN+1     ;otherwise, must be a parenthetical expression
1641   EA26 BD E9 1A            JSR     FRMEVL
1642   EA29             
1643   EA29             ;$EA29  Check for and Skip Closing Parentheses
1644   EA29 C6 29       CHKCLS  LDAB    #')'
1645   EA2B 8C C6 28    CHKOPN  CPX     #$C628
1646   EA2E 8C C6 2C            CPX     #$C62C
1647   EA31                     ;old FCB     $CB        ;CPX #
1648   EA31             ;$EA2C  Check for and Skip Opening Parentheses
1649   EA31               ;old LDAB    #'('
1650   EA31             
1651   EA31                     ;old FCB     $CB        ;CPX #
1652   EA31             ;EA2F   Check for and Skip Comma
1653   EA31             CHKCOM  ;old LDAB    ','
1654   EA31             
1655   EA31             ;$EA31  Validate Character 
1656   EA31 3C          SYNCHR  PSHX                  
1657   EA32 DE F4               LDX     TXTPTR        ;compare current character
1658   EA34 E1 00               CMPB    ,X            ;with B Register
1659   EA36 38                  PULX                  
1660   EA37 26 03               BNE     SNERR       ;?SN error if not equal
1661   EA39 7E 00 EB    JCHGET  JMP     CHRGET        ;get next character and return
1662   EA3C             
1663   EA3C             ;$EA3C  Print Syntax Error Message
1664   EA3C C6 02       SNERR   LDAB    #$02     ;?SN error
1665   EA3E 7E E2 38            JMP     ERROR  
1666   EA41             
1667   EA41 86 7D       LBLEA41 LDAA    #$7D
1668   EA43 BD E9 21            JSR     LPOPER-1
1669   EA46 7E F5 93            JMP     NEGOP
1670   EA49             ;LEA49
1671   EA49 BD EB 1B    ISVAR   JSR     PTRGET   ; :get/init var
1672   EA4C DF CC               STX     FACMO
1673   EA4E 96 84               LDAA    VALTYP   ;vartype flag
1674   EA50 26 92               BNE     UNPRTS
1675   EA52 7E F2 51            JMP     MOVFM  ;X->C9-E
1676   EA55             
1677   EA55             ;$EA55  Dispatch and Evaluate a Function
1678   EA55 16          ISFUN   TAB     
1679   EA56 58                  ASLB    
1680   EA57 8D E0               BSR     JCHGET ;get next char
1681   EA59 37                  PSHB    
1682   EA5A C1 22               CMPB    #$22    ;'"'
1683   EA5C 25 21               BCS     LBLEA7F
1684   EA5E C1 2C               CMPB    #$2C    ;','
1685   EA60 24 1F               BHS     LBLEA81
1686   EA62 8D C8               BSR     CHKOPN+1         ;get '('
1687   EA64 33                  PULB
1688   EA65 C1 28               CMPB    #$28     ;'('
1689   EA67 24 19               BHS     LBLEA82
1690   EA69 37                  PSHB    
1691   EA6A BD E9 1A            JSR     FRMEVL
1692   EA6D 8D C0               BSR     CHKCOM-2  ;get ','
1693   EA6F BD E9 0F            JSR     CHKSTR     ;expect string
1694   EA72 32                  PULA    
1695   EA73 DE CC               LDX     FACMO
1696   EA75 3C                  PSHX    
1697   EA76 36                  PSHA    
1698   EA77 BD EF 0D            JSR     LBLEF0D
1699   EA7A 32                  PULA    
1700   EA7B 37                  PSHB    
1701   EA7C 16                  TAB     
1702   EA7D 20 03               BRA     LBLEA82
1703   EA7F 8D A3       LBLEA7F BSR     PARCHK
1704   EA81 33          LBLEA81 PULB    
1705   EA82 CE E0 00    LBLEA82 LDX     #FUNDSP  
1706   EA85 3A                  ABX     
1707   EA86 EE 00               LDX     ,X
1708   EA88 AD 00               JSR     ,X
1709   EA8A 7E E9 0E            JMP     CHKNUM  ; expect numeric
1710   EA8D 86 4F       FP_OR   LDAA    #$4F    ; perform fp OR.  CLRA -- perform FP_AND.
1711   EA8F 97 82               STAA    COUNT
1712   EA91 BD EB C7            JSR     LBLEBC7 ; get result->D
1713   EA94 DD 80               STD     CHARAC
1714   EA96 BD F2 8B            JSR     LBLF28B ; copy D6->C9.  Clear DD.
1715   EA99 BD EB C7            JSR     LBLEBC7 ; get result->D
1716   EA9C 7D 00 82            TST     COUNT
1717   EA9F 26 06               BNE     LBLEAA7
1718   EAA1 94 80               ANDA    CHARAC   ; perform the AND
1719   EAA3 D4 81               ANDB    ENDCHR
1720   EAA5 20 04               BRA     LBLEAAB
1721   EAA7 9A 80       LBLEAA7 ORAA    CHARAC   ; perform the OR
1722   EAA9 DA 81               ORAB    ENDCHR
1723   EAAB 7E EC E3    LBLEAAB JMP     LBLECE3 ; return D.
1724   EAAE                                                    ; probably < = > ??
1725   EAAE BD E9 10    FP_EAAE JSR     LBLE910 ; check for ?TM and get next number
1726   EAB1 26 10               BNE     LBLEAC3
1727   EAB3 96 DB               LDAA    ARGSGN
1728   EAB5 8A 7F               ORAA    #$7F
1729   EAB7 94 D7               ANDA    ARGHO
1730   EAB9 97 D7               STAA    ARGHO
1731   EABB CE 00 D6            LDX     #ARGEXP
1732   EABE BD F2 D9            JSR     LBLF2D9
1733   EAC1 20 40               BRA     LBLEB03
1734   EAC3 7F 00 84    LBLEAC3 CLR     VALTYP ; vartype flag
1735   EAC6 7A 00 B9            DEC     OPMASK
1736   EAC9 BD EE 56            JSR     FREFAC
1737   EACC D7 D0               STAB    ramD0
1738   EACE DF D2               STX     ramD2
1739   EAD0 DE D9               LDX     ARGMO
1740   EAD2 BD EE 58            JSR     FRETMP
1741   EAD5 96 D0               LDAA    ramD0
1742   EAD7 10                  SBA     
1743   EAD8 27 07               BEQ     LBLEAE1
1744   EADA 86 01               LDAA    #$01
1745   EADC 24 03               BHS     LBLEAE1
1746   EADE D6 D0               LDAB    ramD0
1747   EAE0 40                  NEGA    
1748   EAE1 97 CE       LBLEAE1 STAA    FACSGN
1749   EAE3 07                  TPA     
1750   EAE4 36                  PSHA    
1751   EAE5 9F 91               STS     INDEX
1752   EAE7 0F                  SEI     
1753   EAE8 35                  TXS     
1754   EAE9 DE D2               LDX     ramD2
1755   EAEB 5C                  INCB    
1756   EAEC 09                  DEX    
1757   EAED 5A          LBLEAED DECB    
1758   EAEE 26 04               BNE     LBLEAF4
1759   EAF0 D6 CE               LDAB    FACSGN
1760   EAF2 20 0B               BRA     LBLEAFF
1761   EAF4 32          LBLEAF4 PULA    
1762   EAF5 08                  INX    
1763   EAF6 A1 00               CMPA    ,X
1764   EAF8 27 F3               BEQ     LBLEAED
1765   EAFA C6 FF               LDAB    #$FF
1766   EAFC 24 01               BHS     LBLEAFF
1767   EAFE 50                  NEGB    
1768   EAFF 9E 91       LBLEAFF LDS     INDEX
1769   EB01 32                  PULA    
1770   EB02 06                  TAP     
1771   EB03 CB 01       LBLEB03 ADDB    #$01
1772   EB05 59                  ROLB    
1773   EB06 D4 88               ANDB    DOMASK
1774   EB08 27 02               BEQ     LBLEB0C
1775   EB0A C6 FF               LDAB    #$FF
1776   EB0C 7E F2 BC    LBLEB0C JMP     FLOAT
1777   EB0F BD EA 2F    LBLEB0F JSR     CHKCOM-2  ; get ','
1778   EB12             
1779   EB12             
1780   EB12                             ; --- DIM command ---
1781   EB12             C_DIM
1782   EB12 16                  TAB     
1783   EB13 8D 0A               BSR     PTRGT1
1784   EB15 BD 00 F3            JSR    >CHRGOT 
1785   EB18 26 F5               BNE     LBLEB0F
1786   EB1A 39                  RTS     
1787   EB1B             
1788   EB1B             
1789   EB1B             ;$EB1B  Read Variable Name and Set VARPTR 
1790   EB1B 5F          PTRGET  CLRB    
1791   EB1C BD 00 F3            JSR    >CHRGOT    ;Get current char
1792   EB1F D7 83       PTRGT1  STAB    DIMFLG    ;Save Array Flag
1793   EB21 97 B1               STAA    VARNAM    ;Store First Character of Variable Name
1794   EB23 BD 00 F3            JSR    >CHRGOT    ;Get First Character Again
1795   EB26 8D 4E               BSR     ISLETC    ;Check for Letter
1796   EB28 24 03               BHS     PTRGT3    ;If Not A-Z
1797   EB2A 7E EA 3C            JMP     SNERR   ;  Issue ?SN error
1798   EB2D 5F          PTRGT3  CLRB              ;Preset Second Character to NUL 
1799   EB2E D7 84               STAB    VALTYP    ;Set Type to 0 (Numeric)
1800   EB30 BD 00 EB            JSR    >CHRGET    ;Set Next Character
1801   EB33 25 04               BCS     ISSEC     ;If 0-9
1802   EB35 8D 3F               BSR     ISLETC 
1803   EB37 25 0A               BCS     NOSEC     ;or A-Z
1804   EB39 16          ISSEC   TAB               ;  Set as Second Character
1805   EB3A BD 00 EB    EATEM   JSR    >CHRGET    ;Get Next Character
1806   EB3D 25 FB               BCS     EATEM     ;Skip If Numeric
1807   EB3F 8D 35               BSR     ISLETC
1808   EB41 24 F7               BHS     EATEM     ;Skip if Letter
1809   EB43 81 24       NOSEC   CMPA    #'$'      ;Check for String
1810   EB45 26 08               BNE     STRNAM    ;If '$'
1811   EB47 73 00 84            COM     VALTYP    ;  Set Type to $FF (String)
1812   EB4A CB 80               ADDB    #$80      ;  Set High Bit od Second Character
1813   EB4C BD 00 EB            JSR    >CHRGET    ;  Skip Dollar Sign
1814   EB4F D7 B2       STRNAM  STAB    VARNAM+1  ;Store Second Character of Variable Name
1815   EB51 D6 86               LDAB    SUBFLG    ; 01 if in CSAVE* or CLOAD* 80 if in FOR 0 else?
1816   EB53 5A                  DECB    
1817   EB54 26 03               BNE     LBLEB59
1818   EB56 7E EC 07            JMP     LBLEC07
1819   EB59 9B 86       LBLEB59 ADDA    SUBFLG
1820   EB5B 80 28               SUBA    #$28    ;'('
1821   EB5D 26 03               BNE     LBLEB62
1822   EB5F 7E EB DE            JMP     ISARY
1823   EB62 7F 00 86    LBLEB62 CLR     SUBFLG
1824   EB65 DE 95               LDX     VARTAB    ; start of variable space
1825   EB67 9C 97       LBLEB67 CPX     ARYTAB  ; start of dim variable space
1826   EB69 27 14               BEQ     LBLEB7F ; go if varname not found
1827   EB6B DC B1               LDD     VARNAM
1828   EB6D A3 00               SUBD    ,X
1829   EB6F 27 3F               BEQ     LBLEBB0 ; go if varname found
1830   EB71 C6 07               LDAB    #$07
1831   EB73 3A                  ABX     
1832   EB74 20 F1               BRA     LBLEB67 ; try again
1833   EB76             
1834   EB76             ;$EB76  Test for a Letter
1835   EB76 81 41       ISLETC  CMPA    #$41     ; 'A'
1836   EB78 25 04               BCS     ISLRTS
1837   EB7A 80 5B               SUBA    #$5B     ; 'Z'
1838   EB7C 80 A5               SUBA    #$A5     ;-'Z'
1839   EB7E 39          ISLRTS  RTS     
1840   EB7F             
1841   EB7F 38          LBLEB7F PULX             ;Varname not found.  find caller
1842   EB80 3C                  PSHX    
1843   EB81 8C EA 4C            CPX     #$EA4C   ;were we called from EA49?
1844   EB84 26 04               BNE     LBLEB8A  ;yes, insert variable
1845   EB86 CE EB B7            LDX     #TBLEBB7 ;[X]=0
1846   EB89 39                  RTS     
1847   EB8A DC 99       LBLEB8A LDD     ARREND   ;end of ARYTAB  
1848   EB8C DD BD               STD     HIGHTR    ;
1849   EB8E C3 00 07            ADDD    #$0007   ;length of var
1850   EB91 DD BB               STD     FPTMPM    ;
1851   EB93 DE 97               LDX     ARYTAB   ;start of ARYTAB
1852   EB95 DF C1               STX     TENEXP    ;
1853   EB97 BD E1 FE            JSR     LBLE1FE  ;copy [C1:BD]->[bf:BB]
1854   EB9A DE BB               LDX     FPTMPM    ;
1855   EB9C DF 99               STX     ARREND   ;bump end of ARYTAB
1856   EB9E DE BF               LDX     FPTMPS    ;
1857   EBA0 DF 97               STX     ARYTAB   ;bump start of ARYTAB
1858   EBA2 DE C1               LDX     TENEXP    ;get destination of variable
1859   EBA4 DC B1               LDD     VARNAM    ;get varname
1860   EBA6 ED 00               STD     ,X       ;store varname
1861   EBA8 4F                  CLRA    
1862   EBA9 5F                  CLRB    
1863   EBAA ED 02               STD     2,X      ;initialize variable to zero
1864   EBAC ED 04               STD     4,X
1865   EBAE A7 06               STAA    6,X
1866   EBB0 08          LBLEBB0 INX    
1867   EBB1 08                  INX    
1868   EBB2 DF B3               STX     ramB3    ;?start of array data
1869   EBB4 39                  RTS     
1870   EBB5 90          TBLEBB5 FCB     $90
1871   EBB6 80                  FCB     $80
1872   EBB7 00          TBLEBB7 FCB     $00
1873   EBB8 00                  FCB     $00
1874   EBB9 00                  FCB     $00
1875   EBBA             
1876   EBBA             ;$EBBA  Read and Convert Floating Point Number to Positive Integer
1877   EBBA             ;Returns: X=Parsed Unteger
1878   EBBA BD 00 EB    INTIDX  JSR    >CHRGET 
1879   EBBD BD E9 0C    LBLEBBD JSR     FRMNUM
1880   EBC0 BD E9 0E    LBLEBC0 JSR     CHKNUM     ;expect numeric
1881   EBC3 96 CE               LDAA    FACSGN
1882   EBC5 2B 69               BMI     FCERR  ;?FC error
1883   EBC7 BD E9 0E    LBLEBC7 JSR     CHKNUM     ;expect numeric
1884   EBCA 96 C9               LDAA    FAC
1885   EBCC 81 90               CMPA    #$90
1886   EBCE 25 08               BCS     LBLEBD8
1887   EBD0 CE EB B5            LDX     #TBLEBB5  ; -32768.0
1888   EBD3 BD F2 D9            JSR     LBLF2D9   ; compare [X] with C9-E.
1889   EBD6 26 56               BNE     FCERR-2 ;?FC error
1890   EBD8 BD F3 0B    LBLEBD8 JSR     QINT   ; C9-x -> integer
1891   EBDB DC CC               LDD     FACMO
1892   EBDD 39          LBLEBDD RTS     
1893   EBDE             
1894   EBDE             ;$EBDE  Find Array Element or Create New Array
1895   EBDE DE 83       ISARY   LDX     DIMFLG ; Array detected...
1896   EBE0 3C                  PSHX    
1897   EBE1 5F                  CLRB    
1898   EBE2 37          INDLOP  PSHB    
1899   EBE3 DE B1               LDX     VARNAM
1900   EBE5 3C                  PSHX    
1901   EBE6 8D D2               BSR     INTIDX
1902   EBE8 38                  PULX    
1903   EBE9 DF B1               STX     VARNAM
1904   EBEB 33                  PULB    
1905   EBEC 5C                  INCB    
1906   EBED D7 82               STAB    COUNT
1907   EBEF 32                  PULA    
1908   EBF0 33                  PULB    
1909   EBF1 DE CC               LDX     FACMO
1910   EBF3 3C                  PSHX    
1911   EBF4 37                  PSHB    
1912   EBF5 36                  PSHA    
1913   EBF6 D6 82               LDAB    COUNT
1914   EBF8 BD 00 F3            JSR    >CHRGOT 
1915   EBFB 81 2C               CMPA    #$2C
1916   EBFD 27 E3               BEQ     INDLOP
1917   EBFF BD EA 29            JSR     CHKCLS; get ')'
1918   EC02 38                  PULX    
1919   EC03 DF 83               STX     DIMFLG
1920   EC05 C6 FF               LDAB    #$FF
1921   EC07 37          LBLEC07 PSHB    
1922   EC08 DE 97               LDX     ram97
1923   EC0A 9C 99       LBLEC0A CPX     ram99
1924   EC0C 27 25               BEQ     LBLEC33 ; go if not found
1925   EC0E DC B1               LDD     VARNAM   ; get varname
1926   EC10 A3 00               SUBD    ,X
1927   EC12 27 07               BEQ     LBLEC1B ; go if found
1928   EC14 EC 02               LDD     2,X     ; get length of current var
1929   EC16 BD E2 2D            JSR     LBLE22D ; D+X->D,X
1930   EC19 20 EF               BRA     LBLEC0A
1931   EC1B C6 12       LBLEC1B LDAB    #$12    ;?DD error
1932   EC1D 32                  PULA    
1933   EC1E 4D                  TSTA    
1934   EC1F 27 BC               BEQ     LBLEBDD ; RTS - if found and 0 on stack
1935   EC21 96 83               LDAA    DIMFLG
1936   EC23 26 0B               BNE     ERRGO3 ;write error if in a DIM command on a previously alloc'd var.
1937   EC25 D6 82               LDAB    COUNT
1938   EC27 E1 04               CMPB    4,X
1939   EC29 27 5C               BEQ     LBLEC87
1940   EC2B             ;EC2B   Print Bad Subsript Error Message
1941   EC2B C6 10       BSERR   LDAB    #$10    ;?BS error
1942   EC2D 8C C6 08            CPX     #$C608
1943   EC30             ;$EC2D   Print Runction Call Error Message
1944   EC30             FCERR   ;LDAB  #$08 ;?FC error
1945   EC30 7E E2 38    ERRGO3  JMP     ERROR
1946   EC33             
1947   EC33 32          LBLEC33 PULA    
1948   EC34 4D                  TSTA    
1949   EC35 27 F7               BEQ     FCERR-2  ;?FC error
1950   EC37 CC 00 05            LDD     #$0005
1951   EC3A DD DE               STD     ramDE
1952   EC3C DC B1               LDD     VARNAM
1953   EC3E ED 00               STD     ,X
1954   EC40 D6 82               LDAB    COUNT
1955   EC42 E7 04               STAB    4,X
1956   EC44 BD E2 1A            JSR     GETSTK  ; see if B words fit on stack
1957   EC47 DF BB               STX     FPTMPM
1958   EC49 C6 0B       LBLEC49 LDAB    #$0B
1959   EC4B 4F                  CLRA    
1960   EC4C 7D 00 83            TST     DIMFLG
1961   EC4F 27 05               BEQ     LBLEC56
1962   EC51 32                  PULA    
1963   EC52 33                  PULB    
1964   EC53 C3 00 01            ADDD    #$0001
1965   EC56 ED 05       LBLEC56 STD     5,X
1966   EC58 8D 5F               BSR     LBLECB9
1967   EC5A DD DE               STD     ramDE
1968   EC5C 08                  INX    
1969   EC5D 08                  INX    
1970   EC5E 7A 00 82            DEC     COUNT
1971   EC61 26 E6               BNE     LBLEC49
1972   EC63 BD E2 2D            JSR     LBLE22D ; D+X->D,X
1973   EC66 24 03               BHS     LBLEC6B
1974   EC68 7E E2 36            JMP     OMERR ; ?OM ERROR
1975   EC6B BD E2 1E    LBLEC6B JSR     GETSTD ; see if D bytes fit on stack
1976   EC6E 83 00 35            SUBD    #$0035
1977   EC71 DD 99               STD     ram99
1978   EC73 4F                  CLRA    
1979   EC74 09          LBLEC74 DEX    
1980   EC75 A7 05               STAA    5,X
1981   EC77 9C 89               CPX     TEMPADR
1982   EC79 26 F9               BNE     LBLEC74
1983   EC7B DE BB               LDX     FPTMPM
1984   EC7D 96 99               LDAA    ram99
1985   EC7F 93 BB               SUBD    FPTMPM
1986   EC81 ED 02               STD     2,X
1987   EC83 96 83               LDAA    DIMFLG
1988   EC85 26 31               BNE     LBLECB8
1989   EC87 E6 04       LBLEC87 LDAB    4,X
1990   EC89 D7 82               STAB    COUNT
1991   EC8B 4F                  CLRA    
1992   EC8C 5F                  CLRB    
1993   EC8D DD DE       LBLEC8D STD     ramDE
1994   EC8F 32                  PULA    
1995   EC90 33                  PULB    
1996   EC91 DD CC               STD     FACMO
1997   EC93 37                  PSHB    
1998   EC94 36                  PSHA    
1999   EC95 A3 05               SUBD    5,X
2000   EC97 24 3F               BHS     LBLECD8
2001   EC99 DC DE               LDD     ramDE
2002   EC9B 32                  PULA    
2003   EC9C 33                  PULB    
2004   EC9D 27 04               BEQ     LBLECA3
2005   EC9F 8D 18               BSR     LBLECB9
2006   ECA1 D3 CC               ADDD    FACMO
2007   ECA3 08          LBLECA3 INX    
2008   ECA4 08                  INX    
2009   ECA5 7A 00 82            DEC     COUNT
2010   ECA8 26 E3               BNE     LBLEC8D
2011   ECAA DD 89               STD     TEMPADR
2012   ECAC 05                  ASLD    
2013   ECAD 05                  ASLD    
2014   ECAE D3 89               ADDD    TEMPADR
2015   ECB0 C3 00 05            ADDD    #$0005
2016   ECB3 BD E2 2D            JSR     LBLE22D ;D+X->D,X
2017   ECB6 DF B3               STX     ramB3
2018   ECB8 39          LBLECB8 RTS     
2019   ECB9             
2020   ECB9 86 10       LBLECB9 LDAA    #$10
2021   ECBB 97 BF               STAA    FPTMPS  
2022   ECBD EC 05               LDD     5,X
2023   ECBF DD 91               STD     INDEX
2024   ECC1 4F                  CLRA    
2025   ECC2 5F                  CLRB    
2026   ECC3 05          LBLECC3 ASLD    
2027   ECC4 25 12               BCS     LBLECD8
2028   ECC6 78 00 DF            ASL     ramDF
2029   ECC9 79 00 DE            ROL     ramDE
2030   ECCC 24 04               BHS     LBLECD2
2031   ECCE D3 91               ADDD    INDEX
2032   ECD0 25 06               BCS     LBLECD8
2033   ECD2 7A 00 BF    LBLECD2 DEC     FPTMPS  
2034   ECD5 26 EC               BNE     LBLECC3
2035   ECD7 39                  RTS     
2036   ECD8 7E EC 2B    LBLECD8 JMP     BSERR
2037   ECDB             
2038   ECDB             ;ECDA   MEM function
2039   ECDB 9F 91       MEM     STS     INDEX
2040   ECDD DC 91               LDD     INDEX
2041   ECDF 93 99               SUBD    ram99
2042   ECE1 21                  FCB     $21             ;"BRN CLRA"
2043   ECE2 4F          LBLECE2 CLRA           ; return value of B.  
2044   ECE3 7F 00 84    LBLECE3 CLR     VALTYP; vartype flag = 0 (numeric)
2045   ECE6 DD CA               STD     FACHO
2046   ECE8 C6 90               LDAB    #$90
2047   ECEA 7E F2 C3            JMP     FLOATS
2048   ECED             
2049   ECED                             ; --- STR$ function ---
2050   ECED BD E9 0E    STR     JSR     CHKNUM   ; expect numeric
2051   ECF0 CE 43 34            LDX     #FBUFFR-1
2052   ECF3 BD F4 29            JSR     FOUTC
2053   ECF6 38                  PULX    
2054   ECF7 CE 43 33            LDX     #LOFBUF
2055   ECFA 20 0A               BRA     STRLIT
2056   ECFC             
2057   ECFC DF C7       LBLECFC STX     ramC7
2058   ECFE 8D 5F       LBLECFE BSR     LBLED5F
2059   ED00 DF D2       LBLED00 STX     ramD2
2060   ED02 D7 D0               STAB    ramD0
2061   ED04 39                  RTS
2062   ED05             
2063   ED05 09          LBLED05 DEX    
2064   ED06             ;$ED06
2065   ED06 86 22       STRLIT  LDAA    #'"'
2066   ED08 97 80               STAA    CHARAC  ;String term char #1
2067   ED0A 97 81               STAA    ENDCHR  ;String term char #2 
2068   ED0C 08          LBLED0C INX    
2069   ED0D DF DC               STX     STRNG1
2070   ED0F DF D2               STX     ramD2
2071   ED11 C6 FF               LDAB    #$FF
2072   ED13 5C          LBLED13 INCB    
2073   ED14 A6 00               LDAA    ,X
2074   ED16 27 0E               BEQ     LBLED26  ;Null char term
2075   ED18 08                  INX    
2076   ED19 91 80               CMPA    CHARAC
2077   ED1B 27 04               BEQ     LBLED21
2078   ED1D 91 81               CMPA    ENDCHR
2079   ED1F 26 F2               BNE     LBLED13
2080   ED21 81 22       LBLED21 CMPA    #$22
2081   ED23 27 01               BEQ     LBLED26
2082   ED25 09                  DEX    
2083   ED26 DF DE       LBLED26 STX     ramDE  ;Points to non-null, non-" term char.
2084   ED28 D7 D0               STAB    ramD0  ;stringsize->D0
2085   ED2A 37                  PSHB    
2086   ED2B DC DC               LDD     ARISGN
2087   ED2D 83 43 34            SUBD    #$4334  ;See if in command buffer
2088   ED30 33                  PULB            
2089   ED31 22 07               BHI     LBLED3A ;Jump if in program
2090   ED33 8D C7               BSR     LBLECFC
2091   ED35 DE DC               LDX     ARISGN
2092   ED37 BD EE 3A            JSR     LBLEE3A
2093   ED3A FE 42 3D    LBLED3A LDX     LASTPT ;string buff pointer
2094   ED3D 8C 42 50            CPX     #$4250  ;end of pointer space
2095   ED40 26 05               BNE     LBLED47
2096   ED42 C6 1E               LDAB    #$1E    ;?ST error
2097   ED44 7E E2 38    LBLED44 JMP     ERROR  
2098   ED47 96 D0       LBLED47 LDAA    ramD0   ;stringsize
2099   ED49 A7 00               STAA    ,X
2100   ED4B DC D2               LDD     ramD2
2101   ED4D ED 02               STD     2,X
2102   ED4F 86 FF               LDAA    #$FF
2103   ED51 97 84               STAA    VALTYP ;vartype flag
2104   ED53 FF 42 3F            STX     TEMPST ;temp str buff ptr
2105   ED56 DF CC               STX     FACMO
2106   ED58 C6 05               LDAB    #$05
2107   ED5A 3A                  ABX     
2108   ED5B FF 42 3D            STX     LASTPT ;string buff pointer
2109   ED5E 39                  RTS
2110   ED5F             
2111   ED5F             
2112   ED5F 7F 00 85    LBLED5F CLR     ram85
2113   ED62 37          LBLED62 PSHB    
2114   ED63 4F                  CLRA    
2115   ED64 DD 89               STD     TEMPADR
2116   ED66 DC 9D               LDD     FRESPC
2117   ED68 93 89               SUBD    TEMPADR
2118   ED6A 93 9B               SUBD    ram9B ; bottom of system stack
2119   ED6C 25 0B               BCS     LBLED79
2120   ED6E D3 9B               ADDD    ram9B ; bottom of system stack
2121   ED70 DD 9D               STD     FRESPC
2122   ED72 DE 9D               LDX     FRESPC
2123   ED74 08                  INX    
2124   ED75 DF 9F               STX     ram9F
2125   ED77 33                  PULB    
2126   ED78 39                  RTS     
2127   ED79             
2128   ED79 C6 1A       LBLED79 LDAB    #$1A    ;?OS error
2129   ED7B 73 00 85            COM     ram85
2130   ED7E 27 C4               BEQ     LBLED44 ;write error
2131   ED80 8D 03               BSR     LBLED85
2132   ED82 33                  PULB    
2133   ED83 20 DD               BRA     LBLED62
2134   ED85 DE A1       LBLED85 LDX     ramA1
2135   ED87 DF 9D       LBLED87 STX     FRESPC
2136   ED89 4F                  CLRA    
2137   ED8A 5F                  CLRB    
2138   ED8B DD C5               STD     ramC5
2139   ED8D DE 9B               LDX     ram9B ; bottom of system stack
2140   ED8F DF C1               STX     TENEXP
2141   ED91 CE 42 41            LDX     #STRBUFF
2142   ED94 BC 42 3D    LBLED94 CPX     LASTPT ;string buff pointer
2143   ED97 27 04               BEQ     LBLED9D
2144   ED99 8D 32               BSR     LBLEDCD
2145   ED9B 20 F7               BRA     LBLED94
2146   ED9D DE 95       LBLED9D LDX     VARTAB 
2147   ED9F 9C 97       LBLED9F CPX     ram97
2148   EDA1 27 04               BEQ     LBLEDA7
2149   EDA3 8D 22               BSR     LBLEDC7
2150   EDA5 20 F8               BRA     LBLED9F
2151   EDA7 DF BB       LBLEDA7 STX     FPTMPM
2152   EDA9 DE BB       LBLEDA9 LDX     FPTMPM
2153   EDAB 9C 99       LBLEDAB CPX     ram99
2154   EDAD 27 38               BEQ     LBLEDE7
2155   EDAF EC 02               LDD     2,X
2156   EDB1 D3 BB               ADDD    FPTMPM
2157   EDB3 DD BB               STD     FPTMPM
2158   EDB5 A6 01               LDAA    1,X
2159   EDB7 2A F0               BPL     LBLEDA9
2160   EDB9 E6 04               LDAB    4,X
2161   EDBB 58                  ASLB    
2162   EDBC CB 05               ADDB    #$05
2163   EDBE 3A                  ABX     
2164   EDBF 9C BB       LBLEDBF CPX     FPTMPM
2165   EDC1 27 E8               BEQ     LBLEDAB
2166   EDC3 8D 08               BSR     LBLEDCD
2167   EDC5 20 F8               BRA     LBLEDBF
2168   EDC7 A6 01       LBLEDC7 LDAA    1,X
2169   EDC9 08                  INX    
2170   EDCA 08                  INX    
2171   EDCB 2A 16               BPL     LBLEDE3
2172   EDCD E6 00       LBLEDCD LDAB    ,X
2173   EDCF 27 12               BEQ     LBLEDE3
2174   EDD1 EC 02               LDD     2,X
2175   EDD3 93 9D               SUBD    FRESPC
2176   EDD5 22 0C               BHI     LBLEDE3
2177   EDD7 EC 02               LDD     2,X
2178   EDD9 93 C1               SUBD    TENEXP
2179   EDDB 23 06               BLS     LBLEDE3
2180   EDDD DF C5               STX     ramC5
2181   EDDF EC 02               LDD     2,X
2182   EDE1 DD C1               STD     TENEXP
2183   EDE3 C6 05       LBLEDE3 LDAB    #$05
2184   EDE5 3A                  ABX     
2185   EDE6 39          LBLEDE6 RTS     
2186   EDE7 DE C5       LBLEDE7 LDX     ramC5
2187   EDE9 27 FB               BEQ     LBLEDE6
2188   EDEB 4F                  CLRA    
2189   EDEC E6 00               LDAB    ,X
2190   EDEE 5A                  DECB    
2191   EDEF D3 C1               ADDD    TENEXP
2192   EDF1 DD BD               STD     HIGHTR
2193   EDF3 DE 9D               LDX     FRESPC
2194   EDF5 DF BB               STX     FPTMPM
2195   EDF7 BD E2 00            JSR     LBLE200
2196   EDFA DE C5               LDX     ramC5
2197   EDFC DC BF               LDD     FPTMPS  
2198   EDFE ED 02               STD     2,X
2199   EE00 DE BF               LDX     FPTMPS  
2200   EE02 09                  DEX    
2201   EE03 7E ED 87            JMP     LBLED87
2202   EE06 DE CC       LBLEE06 LDX     FACMO
2203   EE08 3C                  PSHX    
2204   EE09 BD E9 E5            JSR     EVAL
2205   EE0C BD E9 0F            JSR     CHKSTR    ; expect string
2206   EE0F 38                  PULX    
2207   EE10 DF DC               STX     ARISGN
2208   EE12 E6 00               LDAB    ,X
2209   EE14 DE CC               LDX     FACMO
2210   EE16 EB 00               ADDB    ,X
2211   EE18 24 05               BHS     LBLEE1F
2212   EE1A C6 1C               LDAB    #$1C    ;?LS error
2213   EE1C 7E E2 38            JMP     ERROR  
2214   EE1F BD EC FC    LBLEE1F JSR     LBLECFC
2215   EE22 DE DC               LDX     ARISGN
2216   EE24 E6 00               LDAB    ,X
2217   EE26 8D 10               BSR     LBLEE38
2218   EE28 DE C7               LDX     ramC7
2219   EE2A 8D 2C               BSR     FRETMP
2220   EE2C 8D 0C               BSR     LBLEE3A
2221   EE2E DE DC               LDX     ARISGN
2222   EE30 8D 26               BSR     FRETMP
2223   EE32 BD ED 3A            JSR     LBLED3A
2224   EE35 7E E9 2E            JMP     TSTOP
2225   EE38 EE 02       LBLEE38 LDX     2,X
2226   EE3A 07          LBLEE3A TPA     
2227   EE3B 36                  PSHA    
2228   EE3C 9F 91               STS     INDEX
2229   EE3E 0F                  SEI     
2230   EE3F 35                  TXS     
2231   EE40 DE 9F               LDX     ram9F
2232   EE42 5C                  INCB    
2233   EE43 20 04               BRA     LBLEE49
2234   EE45 32          LBLEE45 PULA    
2235   EE46 A7 00               STAA    ,X
2236   EE48 08                  INX    
2237   EE49 5A          LBLEE49 DECB    
2238   EE4A 26 F9               BNE     LBLEE45
2239   EE4C DF 9F               STX     ram9F
2240   EE4E 9E 91               LDS     INDEX
2241   EE50 32                  PULA    
2242   EE51 06                  TAP     
2243   EE52 39                  RTS
2244   EE53             
2245   EE53             ;$EE53  Discard a Temporary String
2246   EE53 BD E9 0F    FRESTR  JSR     CHKSTR    ;expect string
2247   EE56             ;$EE56  
2248   EE56 DE CC       FREFAC LDX     FACMO
2249   EE58             ;$EE58  
2250   EE58 E6 00       FRETMP  LDAB    ,X
2251   EE5A 8D 14               BSR     FRETMS
2252   EE5C 26 0F               BNE     LBLEE6D
2253   EE5E EE 07               LDX     7,X
2254   EE60 09                  DEX    
2255   EE61 9C 9D               CPX     FRESPC     ; next free string store
2256   EE63 26 06               BNE     LBLEE6B
2257   EE65 37                  PSHB    
2258   EE66 D3 9D               ADDD    FRESPC
2259   EE68 DD 9D               STD     FRESPC
2260   EE6A 33                  PULB    
2261   EE6B 08          LBLEE6B INX    
2262   EE6C 39                  RTS
2263   EE6D             
2264   EE6D EE 02       LBLEE6D LDX     2,X
2265   EE6F 39                  RTS
2266   EE70             
2267   EE70             ;$EE70  Remove an Entry from the String Descriptor Stack
2268   EE70 BC 42 3F    FRETMS  CPX     TEMPST        ;tmp str buff ptr
2269   EE73 26 0C               BNE     FRERTS        
2270   EE75 FF 42 3D            STX     LASTPT        ;string buff pointer
2271   EE78 09                  DEX             
2272   EE79 09                  DEX             
2273   EE7A 09                  DEX             
2274   EE7B 09                  DEX             
2275   EE7C 09                  DEX             
2276   EE7D FF 42 3F            STX     TEMPST        ;tmp str buff ptr
2277   EE80 4F                  CLRA    
2278   EE81 39          FRERTS  RTS
2279   EE82             
2280   EE82                             ; --- LEN function ---
2281   EE82             F_LEN
2282   EE82 8D 03               BSR     LBLEE87 ; stringlen->B
2283   EE84 7E EC E2    LBLEE84 JMP     LBLECE2
2284   EE87 8D CA       LBLEE87 BSR     FRESTR
2285   EE89 7F 00 84            CLR     VALTYP ; vartype flag
2286   EE8C 5D                  TSTB    
2287   EE8D 39                  RTS
2288   EE8E             
2289   EE8E             
2290   EE8E                             ; --- CHR$ function ---
2291   EE8E             F_CHR
2292   EE8E BD EF 10            JSR     LBLEF10
2293   EE91 C6 01       LBLEE91 LDAB    #$01
2294   EE93 BD ED 5F            JSR     LBLED5F
2295   EE96 96 CD               LDAA    FACLO
2296   EE98 BD ED 00            JSR     LBLED00
2297   EE9B A7 00               STAA    ,X
2298   EE9D 31          LBLEE9D INS    
2299   EE9E 31                  INS    
2300   EE9F 7E ED 3A    LBLEE9F JMP     LBLED3A
2301   EEA2             
2302   EEA2                             ; --- ASC function ---
2303   EEA2             F_ASC
2304   EEA2 8D 02               BSR     LBLEEA6
2305   EEA4 20 DE               BRA     LBLEE84
2306   EEA6 8D DF       LBLEEA6 BSR     LBLEE87
2307   EEA8 27 5D               BEQ     LBLEF07    ;?FC error
2308   EEAA E6 00               LDAB    ,X
2309   EEAC 39                  RTS
2310   EEAD             
2311   EEAD                             ; --- LEFT$ function ---
2312   EEAD             F_LEFT
2313   EEAD 8D 43               BSR     LBLEEF2
2314   EEAF 4F                  CLRA    
2315   EEB0 E1 00       LBLEEB0 CMPB    ,X
2316   EEB2 23 03               BLS     LBLEEB7
2317   EEB4 E6 00               LDAB    ,X
2318   EEB6 4F                  CLRA    
2319   EEB7 37          LBLEEB7 PSHB    
2320   EEB8 36                  PSHA    
2321   EEB9 BD EC FE            JSR     LBLECFE
2322   EEBC DE C7               LDX     ramC7
2323   EEBE 8D 98               BSR     FRETMP
2324   EEC0 33                  PULB    
2325   EEC1 3A                  ABX     
2326   EEC2 33                  PULB    
2327   EEC3 BD EE 3A            JSR     LBLEE3A
2328   EEC6 20 D7               BRA     LBLEE9F
2329   EEC8             
2330   EEC8                             ; --- RIGHT$ function ---
2331   EEC8             F_RIGHT
2332   EEC8 8D 28               BSR     LBLEEF2
2333   EECA A6 00               LDAA    ,X
2334   EECC 10                  SBA     
2335   EECD 20 E1               BRA     LBLEEB0
2336   EECF             
2337   EECF                             ; --- MID$ function ---
2338   EECF             F_MID
2339   EECF C6 FF               LDAB    #$FF
2340   EED1 D7 CD               STAB    FACLO
2341   EED3 8D 44               BSR     LBLEF19
2342   EED5 81 29               CMPA    #$29    ;')'
2343   EED7 27 03               BEQ     LBLEEDC
2344   EED9 BD EF 47            JSR     LBLEF47
2345   EEDC 8D 14       LBLEEDC BSR     LBLEEF2
2346   EEDE 27 27               BEQ     LBLEF07    ;?FC error
2347   EEE0 5F                  CLRB    
2348   EEE1 4A                  DECA    
2349   EEE2 A1 00               CMPA    ,X
2350   EEE4 24 D1               BHS     LBLEEB7
2351   EEE6 16                  TAB     
2352   EEE7 E0 00               SUBB    ,X
2353   EEE9 50                  NEGB    
2354   EEEA D1 CD               CMPB    FACLO
2355   EEEC 23 C9               BLS     LBLEEB7
2356   EEEE D6 CD               LDAB    FACLO
2357   EEF0 20 C5               BRA     LBLEEB7
2358   EEF2                     
2359   EEF2 BD EA 29    LBLEEF2 JSR     CHKCLS; get ')'
2360   EEF5 30                  TSX     
2361   EEF6 EC 05               LDD     5,X
2362   EEF8 DD C7               STD     ramC7
2363   EEFA EC 00               LDD     ,X
2364   EEFC ED 05               STD     5,X
2365   EEFE 31                  INS    
2366   EEFF 31                  INS    
2367   EF00 31                  INS    
2368   EF01 31                  INS    
2369   EF02 32                  PULA    
2370   EF03 DE C7               LDX     ramC7
2371   EF05 16                  TAB     
2372   EF06 39                  RTS     
2373   EF07             
2374   EF07             
2375   EF07 7E EC 2E    LBLEF07 JMP     FCERR-2  ;?FC error
2376   EF0A BD 00 EB    LBLEF0A JSR    >CHRGET
2377   EF0D             ;get arg -> B
2378   EF0D BD E9 0C    LBLEF0D JSR     FRMNUM
2379   EF10 BD EB C0    LBLEF10 JSR     LBLEBC0
2380   EF13 96 CC               LDAA    FACMO      ; err if result >255
2381   EF15 26 F0               BNE     LBLEF07    ;?FC error    
2382   EF17 D6 CD               LDAB    FACLO
2383   EF19 7E 00 F3    LBLEF19 JMP     CHRGOT 
2384   EF1C             
2385   EF1C                             ; --- VAL function ---
2386   EF1C             F_VAL
2387   EF1C BD EE 87            JSR     LBLEE87
2388   EF1F 26 03               BNE     LBLEF24
2389   EF21 7E EF F4            JMP     LBLEFF4
2390   EF24 BD E2 2C    LBLEF24 JSR     LBLE22C
2391   EF27 A6 00               LDAA    ,X
2392   EF29 36                  PSHA    
2393   EF2A 6F 00               CLR     ,X
2394   EF2C DE F4               LDX     TXTPTR
2395   EF2E DF DE               STX     ramDE
2396   EF30 DE 89               LDX     TEMPADR
2397   EF32 DF F4               STX     TXTPTR
2398   EF34 8D E3               BSR     LBLEF19
2399   EF36 BD F3 59            JSR     FIN  ; get FP number
2400   EF39 32                  PULA    
2401   EF3A DE 8B               LDX     TEMPADR+2
2402   EF3C A7 00               STAA    ,X
2403   EF3E DE DE       ST2TXT LDX     ramDE
2404   EF40 DF F4               STX     TXTPTR
2405   EF42 39                  RTS     
2406   EF43             
2407   EF43 8D 07       LBLEF43 BSR     INTIDX2
2408   EF45 DF A5               STX     LINNUM
2409   EF47 BD EA 2F    LBLEF47 JSR     CHKCOM-2 ;get ','
2410   EF4A 20 C1               BRA     LBLEF0D   ;get arg into B
2411   EF4C             
2412   EF4C             ;$EF4C  Read Positive Integer into X
2413   EF4C BD E9 0C    INTIDX2 JSR     FRMNUM   ;get numeric var.
2414   EF4F             
2415   EF4F             ;$EF4F  Convert FAC to Positive Integer
2416   EF4F 96 CE       LBLEF4F LDAA    FACSGN
2417   EF51 2B B4               BMI     LBLEF07       ;?FC error
2418   EF53 96 C9               LDAA    FAC
2419   EF55 81 90               CMPA    #$90
2420   EF57 22 AE               BHI     LBLEF07       ;?FC error
2421   EF59 BD F3 0B            JSR     QINT          ;C9->integer
2422   EF5C DE CC               LDX     FACMO
2423   EF5E 39                  RTS
2424   EF5F             
2425   EF5F             
2426   EF5F                             ; --- PEEK function ---
2427   EF5F             F_PEEK
2428   EF5F 8D EE               BSR     LBLEF4F
2429   EF61 E6 00               LDAB    ,X
2430   EF63 7E EC E2            JMP     LBLECE2; return B
2431   EF66             
2432   EF66                             ; --- POKE function ---
2433   EF66             C_POKE
2434   EF66 8D DB               BSR     LBLEF43
2435   EF68 DE A5               LDX     LINNUM
2436   EF6A E7 00               STAB    ,X
2437   EF6C 39                  RTS     
2438   EF6D                     
2439   EF6D CE F5 24    LBLEF6D LDX     #TBLF524
2440   EF70 20 0B               BRA     LBLEF7D
2441   EF72 BD F1 60    LBLEF72 JSR     LBLF160
2442   EF75                                        ; perform fp -
2443   EF75 73 00 CE    FP_SUB  COM     FACSGN
2444   EF78 73 00 DC            COM     ARISGN
2445   EF7B 20 03               BRA     FP_ADD
2446   EF7D             
2447   EF7D BD F1 60    LBLEF7D JSR     LBLF160
2448   EF80                                        ; peform fp +
2449   EF80 5D          FP_ADD  TSTB    
2450   EF81 26 03               BNE     LBLEF86
2451   EF83 7E F2 8B            JMP     LBLF28B ; copy D6->C9.  Clear DD.
2452   EF86 CE 00 D6    LBLEF86 LDX     #ARGEXP
2453   EF89 16          LBLEF89 TAB     
2454   EF8A 27 6D               BEQ     LBLEFF9 ; RTS
2455   EF8C D0 C9               SUBB    FAC
2456   EF8E 27 6A               BEQ     LBLEFFA
2457   EF90 2B 0A               BMI     LBLEF9C
2458   EF92 97 C9               STAA    FAC
2459   EF94 96 DB               LDAA    ARGSGN
2460   EF96 97 CE               STAA    FACSGN
2461   EF98 CE 00 C9            LDX     #FAC
2462   EF9B 50                  NEGB    
2463   EF9C C1 F8       LBLEF9C CMPB    #$F8
2464   EF9E 2F 5A               BLE     LBLEFFA
2465   EFA0 4F                  CLRA    
2466   EFA1 64 01               LSR     1,X
2467   EFA3 BD F0 80            JSR     LBLF080
2468   EFA6 D6 DC       LBLEFA6 LDAB    ARISGN
2469   EFA8 2A 0B               BPL     LBLEFB5
2470   EFAA 63 01               COM     1,X
2471   EFAC 63 02               COM     2,X
2472   EFAE 63 03               COM     3,X
2473   EFB0 63 04               COM     4,X
2474   EFB2 43                  COMA    
2475   EFB3 89 00               ADCA    #$00
2476   EFB5 97 DD       LBLEFB5 STAA    FACOV
2477   EFB7 96 CD               LDAA    FACLO
2478   EFB9 99 DA               ADCA    ARGLO
2479   EFBB 97 CD               STAA    FACLO
2480   EFBD 96 CC               LDAA    FACMO
2481   EFBF 99 D9               ADCA    ARGMO
2482   EFC1 97 CC               STAA    FACMO
2483   EFC3 96 CB               LDAA    FACMOH
2484   EFC5 99 D8               ADCA    ARGMOH
2485   EFC7 97 CB               STAA    FACMOH
2486   EFC9 96 CA               LDAA    FACHO
2487   EFCB 99 D7               ADCA    ARGHO
2488   EFCD 97 CA               STAA    FACHO
2489   EFCF 17                  TBA     
2490   EFD0 2A 47               BPL     LBLF019
2491   EFD2             ;$EFD2
2492   EFD2 25 02       FADFLT  BCS     LBLEFD6
2493   EFD4 8D 66               BSR     NEGFAC ; negate C9-E
2494   EFD6 5F          LBLEFD6 CLRB    
2495   EFD7 96 CA       LBLEFD7 LDAA    FACHO   
2496   EFD9 26 34               BNE     LBLF00F
2497   EFDB 96 CB               LDAA    FACMOH   ;shift digits left by one byte
2498   EFDD 97 CA               STAA    FACHO
2499   EFDF 96 CC               LDAA    FACMO
2500   EFE1 97 CB               STAA    FACMOH
2501   EFE3 96 CD               LDAA    FACLO
2502   EFE5 97 CC               STAA    FACMO
2503   EFE7 96 DD               LDAA    FACOV
2504   EFE9 97 CD               STAA    FACLO
2505   EFEB 7F 00 DD            CLR     FACOV
2506   EFEE CB 08               ADDB    #$08
2507   EFF0 C1 28               CMPB    #$28
2508   EFF2 2D E3               BLT     LBLEFD7
2509   EFF4 4F          LBLEFF4 CLRA    
2510   EFF5 97 C9       LBLEFF5 STAA    FAC
2511   EFF7 97 CE       LBLEFF7 STAA    FACSGN
2512   EFF9 39          LBLEFF9 RTS     
2513   EFFA 8D 78       LBLEFFA BSR     LBLF074 ;shift digits right by -B bits
2514   EFFC 0C                  CLC     
2515   EFFD 20 A7               BRA     LBLEFA6
2516   EFFF 5C          LBLEFFF INCB    
2517   F000 78 00 DD            ASL     FACOV
2518   F003 79 00 CD            ROL     FACLO
2519   F006 79 00 CC            ROL     FACMO
2520   F009 79 00 CB            ROL     FACMOH
2521   F00C 79 00 CA            ROL     FACHO
2522   F00F 2A EE       LBLF00F BPL     LBLEFFF
2523   F011 96 C9               LDAA    FAC
2524   F013 10                  SBA     
2525   F014 97 C9               STAA    FAC
2526   F016 23 DC               BLS     LBLEFF4
2527   F018 8C 25 09            CPX     #$2509 ;old FCB     $CB        ;CPX #
2528   F01B             LBLF019 EQU $-2;BCS     LBLF024
2529   F01B 78 00 DD            ASL     FACOV
2530   F01E 86 00               LDAA    #$00
2531   F020 97 DD               STAA    FACOV
2532   F022 20 11               BRA     LBLF035
2533   F024 7C 00 C9    LBLF024 INC     FAC   ;mul by 2
2534   F027 27 2F               BEQ     OVERR ;?OV ERROR
2535   F029 76 00 CA            ROR     FACHO   ;div digits by 2
2536   F02C 76 00 CB            ROR     FACMOH
2537   F02F 76 00 CC            ROR     FACMO
2538   F032 76 00 CD            ROR     FACLO
2539   F035 24 04       LBLF035 BHS     LBLF03B ; leave if we don't need to round up
2540   F037 8D 12               BSR     INCFAC  ; Increment FACMO,FACHO
2541   F039 27 E9               BEQ     LBLF024 ; adjust exponenent if we broke the bank
2542   F03B 39          LBLF03B RTS     
2543   F03C             
2544   F03C             ;$F03C  Negate FAC
2545   F03C 73 00 CE    NEGFAC  COM     FACSGN
2546   F03F             ;$F03F  Negate FAC Mantissa Only
2547   F03F 73 00 CA    NEGFCH  COM     FACHO
2548   F042 73 00 CB            COM     FACMOH
2549   F045 73 00 CC            COM     FACMO
2550   F048 73 00 CD            COM     FACLO
2551   F04B             ;$F04B  Increment FACMO,FACHO
2552   F04B DE CC       INCFAC  LDX     FACMO
2553   F04D 08                  INX    
2554   F04E DF CC               STX     FACMO
2555   F050 26 05               BNE     INCFRT
2556   F052 DE CA               LDX     FACHO
2557   F054 08                  INX    
2558   F055 DF CA               STX     FACHO
2559   F057 39          INCFRT  RTS
2560   F058                  
2561   F058             ;$F058  Overflow Error
2562   F058 C6 0A       OVERR   LDAB    #$0A       ;?OV error
2563   F05A 7E E2 38            JMP     ERROR
2564   F05D                     
2565   F05D             
2566   F05D CE 00 8C    LBLF05D LDX     #RES
2567   F060 A6 04       LBLF060 LDAA    4,X        ;shift digits right one byte.
2568   F062 97 DD               STAA    FACOV
2569   F064 A6 03               LDAA    3,X
2570   F066 A7 04               STAA    4,X
2571   F068 A6 02               LDAA    2,X
2572   F06A A7 03               STAA    3,X
2573   F06C A6 01               LDAA    1,X
2574   F06E A7 02               STAA    2,X
2575   F070 96 D5               LDAA    ramD5
2576   F072 A7 01               STAA    1,X
2577   F074 CB 08       LBLF074 ADDB    #$08       ;if B<-8, shift digits right one byte.
2578   F076 2F E8               BLE     LBLF060
2579   F078 96 DD               LDAA    FACOV
2580   F07A C0 08               SUBB    #$08
2581   F07C 27 0C               BEQ     LBLF08A
2582   F07E 67 01       LBLF07E ASR     1,X        ;if B<0 shift digits right one bit
2583   F080 66 02       LBLF080 ROR     2,X
2584   F082 66 03               ROR     3,X
2585   F084 66 04               ROR     4,X
2586   F086 46                  RORA    
2587   F087 5C                  INCB    
2588   F088 26 F4               BNE     LBLF07E
2589   F08A 39          LBLF08A RTS
2590   F08B             
2591   F08B             
2592   F08B 8100000000  TBLF08B FCB     $81,$00,$00,$00,$00  ; 1.0
2593   F090 03          TBLF090 FCB     $03
2594   F091 7F5E56CB79          FCB     $7F,$5E,$56,$CB,$79  ;0.43425594
2595   F096 80139B0B64          FCB     $80,$13,$9B,$0B,$64  ;0.57658454
2596   F09B 8076389316          FCB     $80,$76,$38,$93,$16  ;0.96180076
2597   F0A0 8238AA3B20          FCB     $82,$38,$AA,$3B,$20  ;2.88539007
2598   F0A5 803504F334  TBLF0A5 FCB     $80,$35,$04,$F3,$34  ;SQR(0.5)
2599   F0AA 813504F334  TBLF0AA FCB     $81,$35,$04,$F3,$34  ;SQR(2.0)
2600   F0AF 8080000000  TBLF0AF FCB     $80,$80,$00,$00,$00  ;-0.5
2601   F0B4 80317217F8  TBLF0B4 FCB     $80,$31,$72,$17,$F8  ;LOG(2.0)
2602   F0B9             
2603   F0B9             
2604   F0B9                  
2605   F0B9             F_LOG           ; --- LOG function ---
2606   F0B9 BD F2 AD            JSR     SIGN ;Test C9-E
2607   F0BC 2E 03               BGT     LBLF0C1
2608   F0BE 7E EC 2E            JMP     FCERR-2  ;?FC error
2609   F0C1 CE F0 A5    LBLF0C1 LDX     #TBLF0A5
2610   F0C4 96 C9               LDAA    FAC
2611   F0C6 80 80               SUBA    #$80
2612   F0C8 36                  PSHA    
2613   F0C9 86 80               LDAA    #$80
2614   F0CB 97 C9               STAA    FAC
2615   F0CD BD EF 7D            JSR     LBLEF7D
2616   F0D0 CE F0 AA            LDX     #TBLF0AA
2617   F0D3 BD F1 C6            JSR     FDIV
2618   F0D6 CE F0 8B            LDX     #TBLF08B  ; 1.0
2619   F0D9 BD EF 72            JSR     LBLEF72
2620   F0DC CE F0 90            LDX     #TBLF090
2621   F0DF BD F5 F8            JSR     LBLF5F8
2622   F0E2 CE F0 AF            LDX     #TBLF0AF
2623   F0E5 BD EF 7D            JSR     LBLEF7D
2624   F0E8 33                  PULB    
2625   F0E9 BD F3 E9            JSR     LBLF3E9
2626   F0EC CE F0 B4            LDX     #TBLF0B4
2627   F0EF 8D 6F       LBLF0EF BSR     LBLF160
2628   F0F1             
2629   F0F1                             ; perform fp *
2630   F0F1 27 6C       FP_MUL  BEQ     LBLF15F
2631   F0F3 BD F1 79            JSR     LBLF179
2632   F0F6 86 00       LBLF0F6 LDAA    #$00
2633   F0F8 97 8D               STAA    RESHO
2634   F0FA 97 8E               STAA    RESMOH
2635   F0FC 97 8F               STAA    RESMO
2636   F0FE 97 90               STAA    RESLO
2637   F100 D6 CD               LDAB    FACLO
2638   F102 8D 26               BSR     LBLF12A
2639   F104 D6 DD               LDAB    FACOV
2640   F106 F7 42 55            STAB    ram4255
2641   F109 D6 CC               LDAB    FACMO
2642   F10B 8D 1D               BSR     LBLF12A
2643   F10D D6 DD               LDAB    FACOV
2644   F10F F7 42 54            STAB    ram4254
2645   F112 D6 CB               LDAB    FACMOH
2646   F114 8D 14               BSR     LBLF12A
2647   F116 D6 DD               LDAB    FACOV
2648   F118 F7 42 53            STAB    ram4253
2649   F11B D6 CA               LDAB    FACHO
2650   F11D 8D 10               BSR     LBLF12F
2651   F11F D6 DD               LDAB    FACOV
2652   F121 F7 42 52            STAB    ram4252
2653   F124 BD F2 48            JSR     MOVFR
2654   F127 7E EF D6            JMP     LBLEFD6
2655   F12A 26 03       LBLF12A BNE     LBLF12F
2656   F12C 7E F0 5D            JMP     LBLF05D
2657   F12F 0D          LBLF12F SEC     
2658   F130 96 8D       LBLF130 LDAA    RESHO
2659   F132 56                  RORB    
2660   F133 27 2A               BEQ     LBLF15F
2661   F135 24 16               BHS     LBLF14D
2662   F137 96 90               LDAA    RESLO
2663   F139 9B DA               ADDA    ARGLO
2664   F13B 97 90               STAA    RESLO
2665   F13D 96 8F               LDAA    RESMO
2666   F13F 99 D9               ADCA    ARGMO
2667   F141 97 8F               STAA    RESMO
2668   F143 96 8E               LDAA    RESMOH
2669   F145 99 D8               ADCA    ARGMOH
2670   F147 97 8E               STAA    RESMOH
2671   F149 96 8D               LDAA    RESHO
2672   F14B 99 D7               ADCA    ARGHO
2673   F14D 46          LBLF14D RORA    
2674   F14E 97 8D               STAA    RESHO
2675   F150 76 00 8E            ROR     RESMOH
2676   F153 76 00 8F            ROR     RESMO
2677   F156 76 00 90            ROR     RESLO
2678   F159 76 00 DD            ROR     FACOV
2679   F15C 0C                  CLC     
2680   F15D 20 D1               BRA     LBLF130
2681   F15F 39          LBLF15F RTS     
2682   F160             
2683   F160 EC 01       LBLF160 LDD     1,X
2684   F162 97 DB               STAA    ARGSGN
2685   F164 8A 80               ORAA    #$80
2686   F166 DD D7               STD     ARGHO
2687   F168 D6 DB               LDAB    ARGSGN
2688   F16A D8 CE               EORB    FACSGN
2689   F16C D7 DC               STAB    ARISGN
2690   F16E EC 03               LDD     3,X
2691   F170 DD D9               STD     ARGMO
2692   F172 A6 00               LDAA    ,X
2693   F174 97 D6               STAA    ARGEXP
2694   F176 D6 C9               LDAB    FAC
2695   F178 39                  RTS     
2696   F179 4D          LBLF179 TSTA    
2697   F17A 27 19               BEQ     LBLF195
2698   F17C 9B C9               ADDA    FAC
2699   F17E 46                  RORA    
2700   F17F 49                  ROLA    
2701   F180 28 13               BVC     LBLF195
2702   F182 8B 80               ADDA    #$80
2703   F184 97 C9               STAA    FAC
2704   F186 26 03               BNE     LBLF18B
2705   F188 7E EF F7            JMP     LBLEFF7
2706   F18B 96 DC       LBLF18B LDAA    ARISGN
2707   F18D 97 CE               STAA    FACSGN
2708   F18F 39                  RTS     
2709   F190 96 CE       LBLF190 LDAA    FACSGN
2710   F192 43                  COMA    
2711   F193 20 02               BRA     LBLF197
2712   F195 32          LBLF195 PULA    
2713   F196 32                  PULA    
2714   F197 2B 03       LBLF197 BMI     GOOVER
2715   F199 7E EF F4            JMP     LBLEFF4
2716   F19C 7E F0 58    GOOVER  JMP     OVERR     ; Overflow Error
2717   F19F             
2718   F19F BD F2 9F    LBLF19F JSR     MOVAF  ; copy fp C9->D6
2719   F1A2 27 0F               BEQ     LBLF1B3  ; RTS
2720   F1A4 8B 02               ADDA    #$02
2721   F1A6 25 F4               BCS     GOOVER  ; ?OV ERROR
2722   F1A8 7F 00 DC            CLR     ARISGN
2723   F1AB BD EF 89            JSR     LBLEF89
2724   F1AE 7C 00 C9            INC     FAC
2725   F1B1 27 E9               BEQ     GOOVER  ; ?OV ERROR
2726   F1B3 39          LBLF1B3 RTS
2727   F1B4             
2728   F1B4             ;$F1B4  
2729   F1B4 8420000000  TENZC FCB     $84,$20,$00,$00,$00  ; 10.0
2730   F1B9             
2731   F1B9             ;$F1B9  Divide FAC by 10
2732   F1B9 BD F2 9F    DIV10   JSR     MOVAF  ;copy fp C9->D6
2733   F1BC CE F1 B4            LDX     #TENZC ;10.0
2734   F1BF 5F                  CLRB
2735   F1C0                     
2736   F1C0             M8D98   EQU     $8D98
2737   F1C0             FDIV    EQU     LBLF1C0+6
2738   F1C0             
2739   F1C0 D7 DC       LBLF1C0 STAB    ARISGN
2740   F1C2 BD F2 51            JSR     MOVFM ;X->C9-E
2741   F1C5 8C 8D 98            CPX     #M8D98;Skip BSR
2742   F1C8                     
2743   F1C8 27 79               BEQ     DV0ERR  ; ?/0 error
2744   F1CA 70 00 C9            NEG     FAC
2745   F1CD             
2746   F1CD 8D AA               BSR     LBLF179 ;here $F1C5
2747   F1CF                     
2748   F1CF 7C 00 C9            INC     FACEXP
2749   F1D2                     
2750   F1D2 27 C8       FDIVT   BEQ     GOOVER
2751   F1D4 CE 00 8D            LDX     #RESHO
2752   F1D7 C6 04               LDAB    #$04
2753   F1D9 D7 82               STAB    COUNT
2754   F1DB C6 01               LDAB    #$01
2755   F1DD 96 CA       LBLF1DD LDAA    FACHO
2756   F1DF 91 D7               CMPA    ARGHO
2757   F1E1 26 13               BNE     SAVQUO
2758   F1E3 96 CB               LDAA    FACMOH
2759   F1E5 91 D8               CMPA    ARGMOH
2760   F1E7 26 0D               BNE     SAVQUO
2761   F1E9 96 CC               LDAA    FACMO
2762   F1EB 91 D9               CMPA    ARGMO
2763   F1ED 26 07               BNE     SAVQUO
2764   F1EF 96 CD               LDAA    FACLO
2765   F1F1 91 DA               CMPA    ARGLO
2766   F1F3 26 01               BNE     SAVQUO
2767   F1F5 0D                  SEC     
2768   F1F6 07          SAVQUO  TPA     
2769   F1F7 59                  ROLB    
2770   F1F8 24 0C               BHS     QSHFT
2771   F1FA E7 00               STAB    ,X
2772   F1FC 08                  INX    
2773   F1FD 7A 00 82            DEC     COUNT
2774   F200 2B 37               BMI     DIVNRM
2775   F202 27 31               BEQ     LD100
2776   F204 C6 01               LDAB    #$01
2777   F206 06          QSHFT   TAP     
2778   F207 25 12               BCS     DIVSUB
2779   F209 78 00 DA    SHFARG  ASL     ARGLO
2780   F20C 79 00 D9            ROL     ARGMO
2781   F20F 79 00 D8            ROL     ARGMOH
2782   F212 79 00 D7            ROL     ARGHO
2783   F215 25 DF               BCS     SAVQUO
2784   F217 2B C4               BMI     LBLF1DD
2785   F219 20 DB               BRA     SAVQUO
2786   F21B 96 DA       DIVSUB  LDAA    ARGLO
2787   F21D 90 CD               SUBA    FACLO
2788   F21F 97 DA               STAA    ARGLO
2789   F221 96 D9               LDAA    ARGMO
2790   F223 92 CC               SBCA    FACMO
2791   F225 97 D9               STAA    ARGMO
2792   F227 96 D8               LDAA    ARGMOH
2793   F229 92 CB               SBCA    FACMOH
2794   F22B 97 D8               STAA    ARGMOH
2795   F22D 96 D7               LDAA    ARGHO
2796   F22F 92 CA               SBCA    FACHO
2797   F231 97 D7               STAA    ARGHO
2798   F233 20 D4               BRA     SHFARG
2799   F235 C6 40       LD100   LDAB    #$40
2800   F237 20 CD               BRA     QSHFT
2801   F239 56          DIVNRM  RORB    
2802   F23A 56                  RORB    
2803   F23B 56                  RORB    
2804   F23C D7 DD               STAB    FACOV
2805   F23E 8D 08               BSR     MOVFR
2806   F240 7E EF D6            JMP     LBLEFD6
2807   F243             
2808   F243             ;$F243  Divide by 0 Error
2809   F243 C6 14       DV0ERR  LDAB    #$14     ;?/0 error
2810   F245 7E E2 38            JMP     ERROR  
2811   F248             
2812   F248             ;$F248  Move RES to FAC
2813   F248 DE 8D       MOVFR   LDX     RESHO
2814   F24A DF CA               STX     FACHO
2815   F24C DE 8F               LDX     RESMO
2816   F24E DF CC               STX     FACMO
2817   F250 39                  RTS     
2818   F251             
2819   F251             ;$F251  Move Floating Point Number from Memory to FAC
2820   F251 36          MOVFM   PSHA
2821   F252 EC 01               LDD     1,X
2822   F254 97 CE               STAA    FACSGN
2823   F256 8A 80               ORAA    #$80
2824   F258 DD CA               STD     FACHO
2825   F25A 7F 00 DD            CLR     FACOV
2826   F25D E6 00               LDAB    ,X
2827   F25F EE 03               LDX     3,X
2828   F261 DF CC               STX     FACMO
2829   F263 D7 C9               STAB    FAC
2830   F265 32                  PULA    
2831   F266 39                  RTS     
2832   F267             
2833   F267 CE 00 BF    LBLF267 LDX     #FPTMPS  
2834   F26A 20 06               BRA     STFPACC  ;FPA->X
2835   F26C CE 00 BA    LBLF26C LDX     #FPTMP  
2836   F26F             
2837   F26F 8C DE B5            CPX     #$DEB5; old FCB     $CB        ;CPX #
2838   F272             LBLF270 EQU $-2 ;LDX     FORPNT
2839   F272 96 C9       STFPACC LDAA    FAC  ; Load floating-point ACOI storage-> X.
2840   F274 A7 00               STAA    ,X
2841   F276 96 CE               LDAA    FACSGN
2842   F278 8A 7F               ORAA    #$7F
2843   F27A 94 CA               ANDA    FACHO
2844   F27C A7 01               STAA    1,X
2845   F27E 96 CB               LDAA    FACMOH
2846   F280 A7 02               STAA    2,X
2847   F282 96 CC               LDAA    FACMO
2848   F284 A7 03               STAA    3,X
2849   F286 96 CD               LDAA    FACLO
2850   F288 A7 04               STAA    4,X
2851   F28A 39                  RTS     
2852   F28B                             ; copy D6->C9.  Clear DD.
2853   F28B 96 DB       LBLF28B LDAA    ARGSGN
2854   F28D 97 CE       LBLF28D STAA    FACSGN
2855   F28F DE D6               LDX     ARGEXP
2856   F291 DF C9               STX     FAC
2857   F293 7F 00 DD            CLR     FACOV
2858   F296 DE D8               LDX     ARGMOH
2859   F298 DF CB               STX     FACMOH
2860   F29A DE D9               LDX     ARGMO
2861   F29C DF CC               STX     FACMO
2862   F29E 39                  RTS     
2863   F29F             
2864   F29F             ;$F29F  Move FAC into ARG
2865   F29F DC C9       MOVAF   LDD     FAC
2866   F2A1 DD D6               STD     ARGEXP
2867   F2A3 DE CB               LDX     FACMOH
2868   F2A5 DF D8               STX     ARGMOH
2869   F2A7 DE CD               LDX     FACLO
2870   F2A9 DF DA               STX     ARGLO
2871   F2AB 4D                  TSTA    
2872   F2AC 39                  RTS     
2873   F2AD             
2874   F2AD             ;$F2AD  Return Sign of Floating-Point Accumulator
2875   F2AD D6 C9       SIGN    LDAB    FACEXP  ;If Exponent is 0
2876   F2AF 27 08               BEQ     SIGNRT  ;  Return 0 in B
2877   F2B1 D6 CE       FCSIGN  LDAB    FACSGN  ;Else
2878   F2B3 59          FCOMPS  ROLB            ;If Sign is Negative  
2879   F2B4 C6 FF               LDAB    #$FF    ;  Return -1 in B
2880   F2B6 25 01               BCS     SIGNRT  ;Else
2881   F2B8 50                  NEGB            ;  Return 1 in B.
2882   F2B9 39          SIGNRT RTS
2883   F2BA             
2884   F2BA             ;$F2BA  SGN Function
2885   F2BA 8D F1       SGN     BSR     SIGN  ; Get Sign of FAC in B
2886   F2BC             
2887   F2BC             ;$F2BC  Convert Signed Value in B to Floating-Point 
2888   F2BC D7 CA       FLOAT   STAB    FACHO
2889   F2BE 7F 00 CB            CLR     FACMOH
2890   F2C1 C6 88               LDAB    #$88
2891   F2C3             
2892   F2C3             ;$F2C3  Convert Signed Integer in FAC to Floating-Point
2893   F2C3 96 CA       FLOATS  LDAA    FACHO
2894   F2C5 80 80               SUBA    #$80
2895   F2C7             ;$F2C7
2896   F2C7 D7 C9       FLOATB  STAB    FACEXP
2897   F2C9 86 00               LDAA    #$00
2898   F2CB 16                  TAB     
2899   F2CC DD CC               STD     FACMO
2900   F2CE 97 DD               STAA    FACOV
2901   F2D0 97 CE               STAA    FACSGN
2902   F2D2 7E EF D2            JMP     FADFLT
2903   F2D5             
2904   F2D5             
2905   F2D5             ;$F2D6  ABS Function
2906   F2D5 7F 00 CE    ABS     CLR     FACSGN  ; clear sign bit
2907   F2D8 39                  RTS
2908   F2D9             
2909   F2D9                             ; Compare C9-E with X, returning in B
2910   F2D9                             ; =1 if C>X, =-1 if C<X =0 if equal.
2911   F2D9 E6 00       LBLF2D9 LDAB    ,X
2912   F2DB 27 D0               BEQ     SIGN
2913   F2DD E6 01               LDAB    1,X
2914   F2DF D8 CE               EORB    FACSGN
2915   F2E1 2B CE               BMI     FCSIGN ; go if args differ in sign
2916   F2E3 D6 C9       LBLF2E3 LDAB    FAC
2917   F2E5 E1 00               CMPB    ,X
2918   F2E7 26 1D               BNE     LBLF306
2919   F2E9 E6 01               LDAB    1,X
2920   F2EB CA 7F               ORAB    #$7F
2921   F2ED D4 CA               ANDB    FACHO
2922   F2EF E1 01               CMPB    1,X
2923   F2F1 26 13               BNE     LBLF306
2924   F2F3 D6 CB               LDAB    FACMOH
2925   F2F5 E1 02               CMPB    2,X
2926   F2F7 26 0D               BNE     LBLF306
2927   F2F9 D6 CC               LDAB    FACMO
2928   F2FB E1 03               CMPB    3,X
2929   F2FD 26 07               BNE     LBLF306
2930   F2FF D6 CD               LDAB    FACLO
2931   F301 E0 04               SUBB    4,X
2932   F303 26 01               BNE     LBLF306
2933   F305 39                  RTS             ; 0->B if equal
2934   F306 56          LBLF306 RORB    
2935   F307 D8 CE               EORB    FACSGN
2936   F309 20 A8               BRA     FCOMPS
2937   F30B             
2938   F30B             ;$F30B  Convert FAC to 24-Bit Integer
2939   F30B D6 C9       QINT    LDAB    FACEXP  
2940   F30D 27 41               BEQ     CLRFAC
2941   F30F C0 A0               SUBB    #$A0
2942   F311 96 CE               LDAA    FACSGN ;test sign byte
2943   F313 2A 06               BPL     QISHFT
2944   F315 73 00 D5            COM     ramD5
2945   F318 BD F0 3F            JSR     NEGFCH ;negate CA-CD
2946   F31B CE 00 C9    QISHFT  LDX     #FAC
2947   F31E C1 F8               CMPB    #$F8
2948   F320 2E 07               BGT     LBLF329
2949   F322 BD F0 74            JSR     LBLF074 ;shift digits right by -B bits
2950   F325 7F 00 D5            CLR     ramD5
2951   F328 39                  RTS     
2952   F329 7F 00 D5    LBLF329 CLR     ramD5
2953   F32C 96 CE               LDAA    FACSGN
2954   F32E 49                  ROLA    
2955   F32F 76 00 CA            ROR     FACHO
2956   F332 7E F0 80            JMP     LBLF080 ;divide CA-CD by 2^($100-B).
2957   F335             
2958   F335             ;$F335  INT Function
2959   F335 D6 C9       INT     LDAB    FAC
2960   F337 C1 A0               CMPB    #$A0
2961   F339 24 1D               BHS     INTRTS
2962   F33B 8D CE               BSR     QINT ; C9-x -> integer
2963   F33D D7 DD               STAB    FACOV
2964   F33F 96 CE               LDAA    FACSGN
2965   F341 D7 CE               STAB    FACSGN
2966   F343 80 80               SUBA    #$80
2967   F345 86 A0               LDAA    #$A0
2968   F347 97 C9               STAA    FAC
2969   F349 96 CD               LDAA    FACLO
2970   F34B 97 80               STAA    CHARAC
2971   F34D 7E EF D2            JMP     FADFLT
2972   F350             
2973   F350             ;$F350  Clear FAC Mantissa (Set All Bytes to B)
2974   F350 D7 CA       CLRFAC  STAB    FACHO
2975   F352 D7 CB               STAB    FACMOH
2976   F354 D7 CC               STAB    FACMO
2977   F356 D7 CD               STAB    FACLO
2978   F358 39          INTRTS  RTS     
2979   F359             
2980   F359             ;$F359  Floating Point Input Routine
2981   F359 BD 42 9D    FIN     JSR     XFIN ;fp-acc number transfer extension
2982   F35C CE 00 00            LDX     #$0000  
2983   F35F DF CE               STX     FACSGN    ;Clear Floating-Point Accumulator
2984   F361 DF C9               STX     FAC
2985   F363 DF CB               STX     FACMOH
2986   F365 DF CC               STX     FACMO
2987   F367 DF C1               STX     TENEXP     ;clear C1
2988   F369 DF BF               STX     FPTMPS  
2989   F36B 25 6B               BCS     FINDIG      ;Branch if Digit
2990   F36D 81 2D               CMPA    #'-'      ;  If Unary Minus
2991   F36F 26 05               BNE     QPLUS
2992   F371 73 00 CF            COM     SGNFLG    ;    Set Sign to -1
2993   F374 20 04               BRA     FINC
2994   F376 81 2B       QPLUS   CMPA    #'+'
2995   F378 26 05               BNE     FIN1
2996   F37A BD 00 EB    FINC    JSR    >CHRGET 
2997   F37D 25 59               BCS     FINDIG
2998   F37F 81 2E       FIN1    CMPA    #'.'
2999   F381 27 2D               BEQ     FINDP
3000   F383 81 45               CMPA    #$45   ; 'E'
3001   F385 26 2E               BNE     FINE
3002   F387 BD 00 EB            JSR    >CHRGET 
3003   F38A 25 69               BCS     LBLF3F5
3004   F38C 81 A8               CMPA    #$A8   ; '-'
3005   F38E 27 0E               BEQ     LBLF39E
3006   F390 81 2D               CMPA    #$2D   ; '-'
3007   F392 27 0A               BEQ     LBLF39E
3008   F394 81 A7               CMPA    #$A7   ; '+'
3009   F396 27 09               BEQ     LBLF3A1
3010   F398 81 2B               CMPA    #$2B   ; '+'
3011   F39A 27 05               BEQ     LBLF3A1
3012   F39C 20 08               BRA     LBLF3A6
3013   F39E 73 00 C2    LBLF39E COM     ramC2
3014   F3A1 BD 00 EB    LBLF3A1 JSR    >CHRGET 
3015   F3A4 25 4F               BCS     LBLF3F5
3016   F3A6 7D 00 C2    LBLF3A6 TST     ramC2
3017   F3A9 27 0A               BEQ     FINE
3018   F3AB 70 00 C1            NEG     TENEXP
3019   F3AE 20 05               BRA     FINE
3020   F3B0 73 00 C0    FINDP   COM     DPTFLG
3021   F3B3 26 C5               BNE     FINC
3022   F3B5 96 C1       FINE    LDAA    TENEXP
3023   F3B7 90 BF               SUBA    FPTMPS  
3024   F3B9 97 C1               STAA    TENEXP
3025   F3BB 27 14               BEQ     FINQNG
3026   F3BD 2A 0A               BPL     FINMUL
3027   F3BF BD F1 B9    FINDIV  JSR     DIV10
3028   F3C2 7C 00 C1            INC     TENEXP
3029   F3C5 26 F8               BNE     FINDIV
3030   F3C7 20 08               BRA     FINQNG
3031   F3C9 BD F1 9F    FINMUL  JSR     LBLF19F
3032   F3CC 7A 00 C1            DEC     TENEXP
3033   F3CF 26 F8               BNE     FINMUL
3034   F3D1 96 CF       FINQNG  LDAA    SGNFLG
3035   F3D3 2A 83               BPL     INTRTS
3036   F3D5 7E F5 93            JMP     NEGOP
3037   F3D8             
3038   F3D8             ;$F3D8
3039   F3D8 D6 BF       FINDIG  LDAB    FPTMPS  
3040   F3DA D0 C0               SUBB    DPTFLG
3041   F3DC D7 BF               STAB    FPTMPS  
3042   F3DE 36                  PSHA    
3043   F3DF BD F1 9F            JSR     LBLF19F
3044   F3E2 33                  PULB    
3045   F3E3 C0 30               SUBB    #$30
3046   F3E5 8D 02               BSR     LBLF3E9
3047   F3E7 20 91               BRA     FINC
3048   F3E9 BD F2 6C    LBLF3E9 JSR     LBLF26C ;C9->BA
3049   F3EC BD F2 BC            JSR     FLOAT
3050   F3EF CE 00 BA            LDX     #FPTMP  
3051   F3F2 7E EF 7D            JMP     LBLEF7D
3052   F3F5             
3053   F3F5                             ;TENEXP = 10*TENEXP+(A-$30).  
3054   F3F5 D6 C1       LBLF3F5 LDAB    TENEXP
3055   F3F7 58                  ASLB    
3056   F3F8 58                  ASLB    
3057   F3F9 DB C1               ADDB    TENEXP
3058   F3FB 58                  ASLB    
3059   F3FC 80 30               SUBA    #$30
3060   F3FE 1B                  ABA     
3061   F3FF 97 C1               STAA    TENEXP
3062   F401 20 9E               BRA     LBLF3A1
3063   F403             
3064   F403             
3065   F403 9B3EBC1FFD  TBLF403 FCB     $9B,$3E,$BC,$1F,$FD  ;  99999999.90625
3066   F408 9E6E6B27FD  TBLF408 FCB     $9E,$6E,$6B,$27,$FD  ; 999999999.25000
3067   F40D 9E6E6B2800  TBLF40D FCB     $9E,$6E,$6B,$28,$00  ;1000000000.00000
3068   F412             
3069   F412             
3070   F412 CE E1 B6    LBLF412 LDX     #INTXT   -1; ' IN '
3071   F415 8D 0C               BSR     STROU2
3072   F417 DC E2               LDD     CURLIN     ; line number
3073   F419             
3074   F419             ;$F419 Output a Number in ASCII Decimal Digits
3075   F419 DD CA       LINPRT  STD     FACHO
3076   F41B C6 90               LDAB    #$90
3077   F41D 0D                  SEC     
3078   F41E BD F2 C7            JSR     FLOATB
3079   F421 8D 03               BSR     FOUT
3080   F423 7E E7 A8    STROU2  JMP     STROUT 
3081   F426             
3082   F426             ;$F426  Convert FAC1 to ASCII String
3083   F426 CE 43 35    FOUT    LDX     #FBUFFR
3084   F429             ;$F429
3085   F429 86 20       FOUTC   LDAA    #' '
3086   F42B D6 CE               LDAB    FACSGN
3087   F42D 2A 02               BPL     LBLF431
3088   F42F 86 2D               LDAA    #$2D
3089   F431 A7 00       LBLF431 STAA    ,X
3090   F433 97 CE               STAA    FACSGN
3091   F435 DF DE               STX     ramDE
3092   F437 08                  INX    
3093   F438 86 30               LDAA    #$30
3094   F43A D6 C9               LDAB    FAC
3095   F43C 26 03               BNE     LBLF441
3096   F43E 7E F5 1C            JMP     LBLF51C
3097   F441 4F          LBLF441 CLRA    
3098   F442 C1 80               CMPB    #$80
3099   F444 22 08               BHI     LBLF44E
3100   F446 CE F4 0D            LDX     #TBLF40D
3101   F449 BD F0 EF            JSR     LBLF0EF
3102   F44C 86 F7               LDAA    #$F7
3103   F44E 97 BF       LBLF44E STAA    FPTMPS  
3104   F450 CE F4 08    LBLF450 LDX     #TBLF408
3105   F453 BD F2 E3            JSR     LBLF2E3
3106   F456 2E 10               BGT     LBLF468
3107   F458 CE F4 03    LBLF458 LDX     #TBLF403
3108   F45B BD F2 E3            JSR     LBLF2E3
3109   F45E 2E 10               BGT     LBLF470
3110   F460 BD F1 9F            JSR     LBLF19F
3111   F463 7A 00 BF            DEC     FPTMPS  
3112   F466 20 F0               BRA     LBLF458
3113   F468 BD F1 B9    LBLF468 JSR     DIV10
3114   F46B 7C 00 BF            INC     FPTMPS  
3115   F46E 20 E0               BRA     LBLF450
3116   F470 BD EF 6D    LBLF470 JSR     LBLEF6D
3117   F473 BD F3 0B            JSR     QINT ;C9-x -> integer 
3118   F476 C6 01               LDAB    #$01
3119   F478 96 BF               LDAA    FPTMPS  
3120   F47A 8B 0A               ADDA    #$0A
3121   F47C 2B 08               BMI     LBLF486
3122   F47E 81 0B               CMPA    #$0B
3123   F480 24 04               BHS     LBLF486
3124   F482 4A                  DECA    
3125   F483 16                  TAB     
3126   F484 86 02               LDAA    #$02
3127   F486 4A          LBLF486 DECA    
3128   F487 4A                  DECA    
3129   F488 97 C1               STAA    TENEXP
3130   F48A D7 BF               STAB    FPTMPS  
3131   F48C 2E 11               BGT     LBLF49F
3132   F48E DE DE               LDX     ramDE
3133   F490 86 2E               LDAA    #$2E
3134   F492 08                  INX    
3135   F493 A7 00               STAA    ,X
3136   F495 5D                  TSTB    
3137   F496 27 05               BEQ     LBLF49D
3138   F498 86 30               LDAA    #$30
3139   F49A 08                  INX    
3140   F49B A7 00               STAA    ,X
3141   F49D DF DE       LBLF49D STX     ramDE
3142   F49F CE F5 29    LBLF49F LDX     #TBLF529
3143   F4A2 C6 80               LDAB    #$80
3144   F4A4 96 CD       LBLF4A4 LDAA    FACLO
3145   F4A6 AB 03               ADDA    3,X
3146   F4A8 97 CD               STAA    FACLO
3147   F4AA 96 CC               LDAA    FACMO
3148   F4AC A9 02               ADCA    2,X
3149   F4AE 97 CC               STAA    FACMO
3150   F4B0 96 CB               LDAA    FACMOH
3151   F4B2 A9 01               ADCA    1,X
3152   F4B4 97 CB               STAA    FACMOH
3153   F4B6 96 CA               LDAA    FACHO
3154   F4B8 A9 00               ADCA    ,X
3155   F4BA 97 CA               STAA    FACHO
3156   F4BC 5C                  INCB    
3157   F4BD 56                  RORB    
3158   F4BE 59                  ROLB    
3159   F4BF 28 E3               BVC     LBLF4A4
3160   F4C1 24 03               BHS     LBLF4C6
3161   F4C3 C0 0B               SUBB    #$0B
3162   F4C5 50                  NEGB    
3163   F4C6 CB 2F       LBLF4C6 ADDB    #$2F
3164   F4C8 08                  INX    
3165   F4C9 08                  INX    
3166   F4CA 08                  INX    
3167   F4CB 08                  INX    
3168   F4CC DF B3               STX     ramB3
3169   F4CE DE DE               LDX     ramDE
3170   F4D0 08                  INX    
3171   F4D1 17                  TBA     
3172   F4D2 84 7F               ANDA    #$7F
3173   F4D4 A7 00               STAA    ,X
3174   F4D6 7A 00 BF            DEC     FPTMPS  
3175   F4D9 26 05               BNE     LBLF4E0
3176   F4DB 86 2E               LDAA    #$2E
3177   F4DD 08                  INX    
3178   F4DE A7 00               STAA    ,X
3179   F4E0 DF DE       LBLF4E0 STX     ramDE
3180   F4E2 DE B3               LDX     ramB3
3181   F4E4 53                  COMB    
3182   F4E5 C4 80               ANDB    #$80
3183   F4E7 8C F5 4D            CPX     #$F54D
3184   F4EA 26 B8               BNE     LBLF4A4
3185   F4EC DE DE               LDX     ramDE
3186   F4EE A6 00       LBLF4EE LDAA    ,X
3187   F4F0 09                  DEX    
3188   F4F1 81 30               CMPA    #$30   ; '0'
3189   F4F3 27 F9               BEQ     LBLF4EE
3190   F4F5 81 2E               CMPA    #$2E   ; '.'
3191   F4F7 27 01               BEQ     LBLF4FA
3192   F4F9 08                  INX    
3193   F4FA 86 2B       LBLF4FA LDAA    #$2B   ; '+'
3194   F4FC D6 C1               LDAB    TENEXP
3195   F4FE 27 1E               BEQ     LBLF51E
3196   F500 2A 03               BPL     LBLF505
3197   F502 86 2D               LDAA    #$2D   ; '-'
3198   F504 50                  NEGB    
3199   F505 A7 02       LBLF505 STAA    2,X
3200   F507 86 45               LDAA    #$45
3201   F509 A7 01               STAA    1,X
3202   F50B 86 2F               LDAA    #$2F
3203   F50D 4C          LBLF50D INCA    
3204   F50E C0 0A               SUBB    #$0A
3205   F510 24 FB               BHS     LBLF50D
3206   F512 CB 3A               ADDB    #$3A
3207   F514 A7 03               STAA    3,X
3208   F516 E7 04               STAB    4,X
3209   F518 6F 05               CLR     5,X
3210   F51A 20 04               BRA     LBLF520
3211   F51C A7 00       LBLF51C STAA    ,X
3212   F51E 6F 01       LBLF51E CLR     1,X
3213   F520 CE 43 35    LBLF520 LDX     #FBUFFR
3214   F523 39          LBLF523    RTS
3215   F524             
3216   F524             
3217   F524 8000000000  TBLF524 FCB     $80,$00,$00,$00,$00     ; 0.5
3218   F529 FA 0A 1F 00 TBLF529 FCB     $FA,$0A,$1F,$00 ;-100,000,000
3219   F52D 00 98 96 80         FCB     $00,$98,$96,$80 ;  10,000,000
3220   F531 FF F0 BD C0         FCB     $FF,$F0,$BD,$C0 ;  -1,000,000
3221   F535 00 01 86 A0         FCB     $00,$01,$86,$A0 ;     100,000
3222   F539 FF FF D8 F0         FCB     $FF,$FF,$D8,$F0 ;     -10,000
3223   F53D 00 00 03 E8         FCB     $00,$00,$03,$E8 ;       1,000
3224   F541 FF FF FF 9C         FCB     $FF,$FF,$FF,$9C ;        -100
3225   F545 00 00 00 0A         FCB     $00,$00,$00,$0A ;          10
3226   F549 FF FF FF FF         FCB     $FF,$FF,$FF,$FF ;          -1
3227   F54D             
3228   F54D             
3229   F54D                             ; --- SQR function ---
3230   F54D             F_SQR
3231   F54D BD F2 9F            JSR     MOVAF  ;copy fp C9->D6
3232   F550 CE F5 24            LDX     #TBLF524 ;0.5
3233   F553 BD F2 51            JSR     MOVFM  ;X->C9-E
3234   F556             
3235   F556                             ; perform fp ^
3236   F556 27 71       FP_POW  BEQ     EXP ; = LBLF5C9
3237   F558             
3238   F558 4D                  TSTA
3239   F559 26 0A               BNE     LBLF565
3240   F55B 96 CE               LDAA    FACSGN
3241   F55D 2A 03               BPL     LBLF562
3242   F55F 7E F2 43            JMP     DV0ERR  ; ?/0 error
3243   F562 7E EF F5    LBLF562 JMP     LBLEFF5
3244   F565 CE 00 C4    LBLF565 LDX     #TBL00C4
3245   F568 BD F2 72            JSR     STFPACC  ;FPA->X
3246   F56B 5F                  CLRB
3247   F56C 96 DB               LDAA    ARGSGN
3248   F56E 2A 10               BPL     LBLF580
3249   F570 BD F3 35            JSR     INT  ; LBLF335
3250   F573 CE 00 C4            LDX     #TBL00C4
3251   F576 96 DB               LDAA    ARGSGN
3252   F578 BD F2 E3            JSR     LBLF2E3
3253   F57B 26 03               BNE     LBLF580
3254   F57D 43                  COMA
3255   F57E D6 80               LDAB    CHARAC    ; TBL0080
3256   F580 BD F2 8D    LBLF580 JSR     LBLF28D
3257   F583 37                  PSHB
3258   F584 BD F0 B9            JSR     F_LOG     ; LBLF0B9
3259   F587 CE 00 C4            LDX     #TBL00C4
3260   F58A BD F0 EF            JSR     LBLF0EF
3261   F58D 8D 3A               BSR     EXP ; = LBLF5C9
3262   F58F 32                  PULA
3263   F590 46                  RORA
3264   F591 24 90               BCC     LBLF523
3265   F593             
3266   F593             
3267   F593 96 C9       NEGOP   LDAA    FACEXP
3268   F595 27 03               BEQ     NEGRTS
3269   F597 73 00 CE            COM     FACSGN
3270   F59A 39          NEGRTS  RTS
3271   F59B             
3272   F59B             
3273   F59B             
3274   F59B             ;$F59B  CF = Correction Factor for EXP Function (Non-Canonical Label)
3275   F59B 8138AA3B29  EXPCOR  FCB     $81,$38,$AA,$3B,$29 ;1.44269504 
3276   F5A0             
3277   F5A0             ;$F5A0  Tchebyshev Modified Taylor Series Coefficients for EXP(X)
3278   F5A0 07          EXPCON  FCB     $07                 ;eight coefficients  
3279   F5A1 7134583E56          FCB     $71,$34,$58,$3E,$56 ;0.00002150 1/(7! * CF^7)
3280   F5A6 74167EB31B          FCB     $74,$16,$7E,$B3,$1B ;0.00014352 1/(6! * CF^6)
3281   F5AB 772FEEE385          FCB     $77,$2F,$EE,$E3,$85 ;0.00134226 1/(5! * CF^5)
3282   F5B0 7A1D841C2A          FCB     $7A,$1D,$84,$1C,$2A ;0.00961402 1/(4! * CF^4)
3283   F5B5 7C6359580A          FCB     $7C,$63,$59,$58,$0A ;0.05550513 1/(3! * CF^3)
3284   F5BA 7E75FDE7C6          FCB     $7E,$75,$FD,$E7,$C6 ;0.24022638 1/(2! * CF^2)
3285   F5BF 8031721810          FCB     $80,$31,$72,$18,$10 ;0.69314719 1/(1! * CF^1)
3286   F5C4 8100000000          FCB     $81,$00,$00,$00,$00 ; 1.0
3287   F5C9             
3288   F5C9             
3289   F5C9             ;$F5C9  ;EXP Function
3290   F5C9 CE F5 9B    EXP     LDX     #EXPCOR    ;Get correction factor
3291   F5CC 8D 36               BSR     LBLF604        ;Multiply FPA0 by X
3292   F5CE BD F2 6C            JSR     LBLF26C        ;pack fpa0 and store in fpa3
3293   F5D1 96 C9               LDAA    FAC        ;get exponent of fpa0 and compare to max value
3294   F5D3 81 88               CMPA    #$88        ; (128)
3295   F5D5 25 03               BCS     LBLF5DA        ;br if fpa0 < 128
3296   F5D7 7E F1 90    LBLF5D7 JMP     LBLF190        ;set fpa0 = 0 or ?OV ERROR
3297   F5DA BD F3 35    LBLF5DA JSR     INT        ;convert fpa0 to integer
3298   F5DD 96 80               LDAA    CHARAC        ;get least significant byte of integer
3299   F5DF 8B 81               ADDA    #$81        ; =127?
3300   F5E1 27 F4               BEQ     LBLF5D7        ;  ?OV ERROR
3301   F5E3 4A                  DECA            ;  adds bias of 80 (since 81 used above)
3302   F5E4 36                  PSHA            ;save exponent on stack
3303   F5E5 CE 00 BA            LDX     #FPTMP      ;point (x) to FPa3
3304   F5E8 BD EF 72            JSR     LBLEF72        ;subtract fpa0 from (x)
3305   F5EB CE F5 A0            LDX     #EXPCON    ;point x to coeffs
3306   F5EE 8D 17               BSR     LBLF607        ;eval polynomial for frac part
3307   F5F0 7F 00 DC            CLR     ARISGN       ;force mantissa to be positive
3308   F5F3 32                  PULA    
3309   F5F4 BD F1 79            JSR     LBLF179        ;calc exp of new fpa0 by adding exps of integer and frac'l parts.
3310   F5F7 39                  RTS     
3311   F5F8 DF DE       LBLF5F8 STX     ramDE
3312   F5FA BD F2 6C            JSR     LBLF26C
3313   F5FD 8D 05               BSR     LBLF604
3314   F5FF 8D 08               BSR     LBLF609
3315   F601 CE 00 BA            LDX     #FPTMP  
3316   F604 7E F0 EF    LBLF604 JMP     LBLF0EF
3317   F607 DF DE       LBLF607 STX     ramDE
3318   F609 BD F2 67    LBLF609 JSR     LBLF267
3319   F60C DE DE               LDX     ramDE
3320   F60E E6 00               LDAB    ,X
3321   F610 D7 CF               STAB    SGNFLG
3322   F612 08                  INX    
3323   F613 DF DE               STX     ramDE
3324   F615 8D ED       LBLF615 BSR     LBLF604
3325   F617 DE DE               LDX     ramDE
3326   F619 C6 05               LDAB    #$05
3327   F61B 3A                  ABX     
3328   F61C DF DE               STX     ramDE
3329   F61E BD EF 7D            JSR     LBLEF7D
3330   F621 CE 00 BF            LDX     #FPTMPS  
3331   F624 7A 00 CF            DEC     SGNFLG
3332   F627 26 EC               BNE     LBLF615
3333   F629 39                  RTS
3334   F62A             
3335   F62A                             ; --- RND function ---
3336   F62A             F_RND
3337   F62A BD F2 AD            JSR     SIGN  ; Test C9-E
3338   F62D 2B 21               BMI     LBLF650
3339   F62F 27 15               BEQ     LBLF646
3340   F631 8D 10               BSR     LBLF643
3341   F633 BD F2 6C            JSR     LBLF26C
3342   F636 8D 0E               BSR     LBLF646
3343   F638 CE 00 BA            LDX     #FPTMP  
3344   F63B 8D C7               BSR     LBLF604
3345   F63D CE F0 8B            LDX     #TBLF08B  ; 1.0
3346   F640 BD EF 7D            JSR     LBLEF7D
3347   F643 7E F3 35    LBLF643 JMP     INT
3348   F646 FE 42 18    LBLF646 LDX     RNDX
3349   F649 DF CA               STX     FACHO
3350   F64B FE 42 1A            LDX     RNDX+2
3351   F64E DF CC               STX     FACMO
3352   F650 FE F6 82    LBLF650 LDX     CONF682
3353   F653 DF D7               STX     ARGHO
3354   F655 FE F6 84            LDX     CONF684
3355   F658 DF D9               STX     ARGMO
3356   F65A BD F0 F6            JSR     LBLF0F6
3357   F65D FC 42 54            LDD     ram4254
3358   F660 C3 65 8B            ADDD    #$658B
3359   F663 FD 42 1A            STD     RNDX+2
3360   F666 DD CC               STD     FACMO
3361   F668 FC 42 52            LDD     ram4252
3362   F66B C9 B0               ADCB    #$B0
3363   F66D 89 05               ADCA    #$05
3364   F66F FD 42 18            STD     RNDX
3365   F672 DD CA               STD     FACHO
3366   F674 7F 00 CE            CLR     FACSGN
3367   F677 86 80               LDAA    #$80
3368   F679 97 C9               STAA    FAC
3369   F67B 96 8F               LDAA    RESMO
3370   F67D 97 DD               STAA    FACOV
3371   F67F 7E EF D6            JMP     LBLEFD6
3372   F682 40 E6       CONF682 FDB     $40E6
3373   F684 4D AB       CONF684 FDB     $4DAB
3374   F686             
3375   F686                             ; --- COS function ---
3376   F686             F_COS
3377   F686 CE F6 F6            LDX     #TBLF6F6  ; Pi/2
3378   F689 BD EF 7D            JSR     LBLEF7D
3379   F68C             
3380   F68C                             ; --- SIN function ---
3381   F68C             F_SIN
3382   F68C BD F2 9F            JSR     MOVAF     ; copy FPA0 to FPA1
3383   F68F CE F6 FB            LDX     #TBLF6FB    ; point X to 2*Pi
3384   F692 D6 DB               LDAB    ARGSGN      ; get mantissa sign of fpa1
3385   F694 BD F1 C0            JSR     LBLF1C0     ; divide fpa0 by X
3386   F697 BD F2 9F            JSR     MOVAF     ; copy FPA0 to FPA1
3387   F69A BD F3 35            JSR     INT     ; convert FPA0 to integer
3388   F69D 7F 00 DC            CLR     ARISGN      ; set result sign to positive
3389   F6A0 96 D6               LDAA    ARGEXP       ; get exponent of fpa1
3390   F6A2 D6 C9               LDAB    FAC       ; get exponent of fpa0
3391   F6A4 BD EF 75            JSR     FP_SUB      ; subtract fpa0 from fpa1
3392   F6A7 CE F7 00            LDX     #TBLF700    ; point X to 0.25
3393   F6AA BD EF 72            JSR     LBLEF72     ; subtract fpa0 from 0.25 (pi/2)
3394   F6AD 96 CE               LDAA    FACSGN      ; get mantissa sign of fpa0
3395   F6AF 36                  PSHA                ;    save on stack
3396   F6B0 2A 0A               BPL     LBLF6BC     ; branch if mantissa positive
3397   F6B2 BD EF 6D            JSR     LBLEF6D     ; add 0.5 (pi) to fpa0
3398   F6B5 96 CE               LDAA    FACSGN      ; get sign of fpa0
3399   F6B7 2B 06               BMI     LBLF6BF     ; branch if negative
3400   F6B9 73 00 88            COM     TANSGN       ; com if 3pi/2 > arg > pi/2  [quadrant flag]
3401   F6BC BD F5 93    LBLF6BC JSR     NEGOP     ; toggle mantissa sign of fpa0
3402   F6BF CE F7 00    LBLF6BF LDX     #TBLF700    ; point X to 0.25
3403   F6C2 BD EF 7D            JSR     LBLEF7D     ; add it to fpa0
3404   F6C5 32                  PULA                ; get the old sign
3405   F6C6 4D                  TSTA                ; 
3406   F6C7 2A 03               BPL     LBLF6CC     ; branch if old sign was positve
3407   F6C9 BD F5 93            JSR     NEGOP     ; toggle mantissa sign
3408   F6CC CE F7 05    LBLF6CC LDX     #TBLF705    ; point x to table of coeff's
3409   F6CF 7E F5 F8            JMP     LBLF5F8     ; calculate polynomial value
3410   F6D2             
3411   F6D2                             ; --- TAN function ---
3412   F6D2             F_TAN
3413   F6D2 BD F2 6C            JSR     LBLF26C
3414   F6D5 7F 00 88            CLR     TANSGN
3415   F6D8 8D B2               BSR     F_SIN
3416   F6DA CE 00 C4            LDX     #TBL00C4
3417   F6DD BD F2 72            JSR     STFPACC  ;FPA->X
3418   F6E0 CE 00 BA            LDX     #FPTMP  
3419   F6E3 BD F2 51            JSR     MOVFM  ;X->C9-E
3420   F6E6 7F 00 CE            CLR     FACSGN
3421   F6E9 96 88               LDAA    TANSGN
3422   F6EB 8D 06               BSR     LBLF6F3
3423   F6ED CE 00 C4            LDX     #TBL00C4
3424   F6F0 7E F1 C6            JMP     FDIV
3425   F6F3 36          LBLF6F3 PSHA    
3426   F6F4 20 C6               BRA     LBLF6BC
3427   F6F6             
3428   F6F6             
3429   F6F6 81490FDAA2  TBLF6F6 FCB     $81,$49,$0F,$DA,$A2 ;  1.57079632  Pi/2
3430   F6FB 83490FDAA2  TBLF6FB FCB     $83,$49,$0F,$DA,$A2 ;  6.28318531  2*Pi
3431   F700 7F00000000  TBLF700 FCB     $7F,$00,$00,$00,$00 ;  0.25         1/4
3432   F705 05          TBLF705 FCB     $05
3433   F706 84E61A2D1B          FCB     $84,$E6,$1A,$2D,$1B ;-14.38139067 -(2*Pi)^11/11! should be -15.094642578 ($84,$F1,$83,$A7,$EF)
3434   F70B 862807FBF8          FCB     $86,$28,$07,$FB,$F8 ; 42.00779712  (2*Pi)^9 / 9! should be  42.058693944 ($86,$28,$3C,$1A,$44)
3435   F710 8799688901          FCB     $87,$99,$68,$89,$01 ;-76.70417026 -(2*Pi)^7 / 7! should be -76.705859753 ($87,$99,$69,$66,$73)
3436   F715 872335DFE1          FCB     $87,$23,$35,$DF,$E1 ; 81.60522369  (2*Pi)^5 / 5! should be  81.605249276 ($87,$23,$35,$E3,$3C)
3437   F71A 86A55DE728          FCB     $86,$A5,$5D,$E7,$28 ;-41.34170210 -(2*Pi)^3 / 3! should be -41.341702240 ($86,$A5,$5D,$E7,$31)
3438   F71F 83490FDAA2          FCB     $83,$49,$0F,$DA,$A2 ;  6.28318531  (2*Pi)^1 / 1! should be   6.283185307 ($86,$49,$0F,$DA,$A2)
3439   F724             
3440   F724 A154468F13          FCB     $A1,$54,$46,$8F,$13 ; 7122787878.0 unused?
3441   F729 8F524389CD          FCB     $8F,$52,$43,$89,$CD ; 26913.76914  unused?
3442   F72E             
3443   F72E             
3444   F72E                             ; --- Reset Vector ---
3445   F72E                             ;Reset I/O
3446   F72E 86 FF       LBLF72E LDAA    #$FF
3447   F730 97 00               STAA    DDR1 
3448   F732 86 01               LDAA    #$01
3449   F734 97 01               STAA    DDR2 
3450   F736 86 01               LDAA    #$01
3451   F738 97 03               STAA    PORT2
3452   F73A             
3453   F73A 96 EA               LDAA    ramEA       ;Check for warm boot flag
3454   F73C 81 55               CMPA    #$55
3455   F73E 26 0A               BNE     LBLF74A     ;Not warm boot
3456   F740 FE 42 21            LDX     ram4221
3457   F743 A6 00               LDAA    ,X
3458   F745 4A                  DECA    
3459   F746 26 02               BNE     LBLF74A
3460   F748 6E 00               JMP     ,X          ;Warm boot
3461   F74A             
3462   F74A                                         ;Cold boot
3463   F74A CE 00 80    LBLF74A LDX     #$0080      ;Clear 6803 RAM
3464   F74D 6F 00       LBLF74D CLR     ,X
3465   F74F 08                  INX    
3466   F750 8C 01 00            CPX     #$0100
3467   F753 26 F8               BNE     LBLF74D
3468   F755             
3469   F755 CE 41 FD            LDX     #TBL41FD    ;Size and clear external RAM
3470   F758 08          LBLF758 INX    
3471   F759 A6 02               LDAA    2,X         ;Get a byte
3472   F75B 63 02               COM     2,X         ;Complement
3473   F75D E6 02               LDAB    2,X         ;Get the complement
3474   F75F 6F 02               CLR     2,X         ;Clear
3475   F761 43                  COMA    
3476   F762 11                  CBA                 ;Complement successful?
3477   F763 27 F3               BEQ     LBLF758     ;Next...
3478   F765             
3479   F765 FF 42 50            STX     RAMTOP      ;Save top of RAM
3480   F768 DF A1               STX     ramA1
3481   F76A DF 9D               STX     FRESPC
3482   F76C DC 9D               LDD     FRESPC
3483   F76E 83 00 64            SUBD    #100        ;Reserve 100 bytes for string space
3484   F771 DD 9B               STD     FRETOP     ;bottom of system stack
3485   F773 9E 9B               LDS     ram9B 
3486   F775             
3487   F775 CE F7 CF            LDX     #TBLF7CF    ;Init 6803 RAM
3488   F778 CC 00 EB            LDD     #$00EB
3489   F77B 8D 30               BSR     CPYTBL
3490   F77D             
3491   F77D CE F7 DE            LDX     #TBLF7DE    ;Init external RAM
3492   F780 CC 42 00            LDD     #$4200
3493   F783 8D 28               BSR     CPYTBL
3494   F785             
3495   F785 86 39               LDAA    #$39        ;==RTS
3496   F787 CE 42 85            LDX     #X_INCHAR    ;4285 to 42AE set to RTS
3497   F78A A7 00       LBLF78A STAA    ,X
3498   F78C 08                  INX    
3499   F78D 8C 42 AF            CPX     #$42AF
3500   F790 26 F8               BNE     LBLF78A
3501   F792             
3502   F792 73 42 AF            COM     ram42AF         ;???
3503   F795             
3504   F795 CE 43 46            LDX     #TBL4346    ;init start of prog mem.
3505   F798 DF 93               STX     TXTTAB
3506   F79A             
3507   F79A BD E3 CF            JSR     LBLE3CF     ;NEW command
3508   F79D BD FB D4            JSR     CLRSCRN+1   ;Clear screen
3509   F7A0             
3510   F7A0 CE F8 0F            LDX     #INITMSG-1  ;Copyright message
3511   F7A3 BD E7 A8            JSR     STROUT 
3512   F7A6             
3513   F7A6 86 55               LDAA    #$55        ;Flag warm boot
3514   F7A8 97 EA               STAA    ramEA
3515   F7AA             
3516   F7AA 7E E2 71    LBLF7AA JMP     READY 
3517   F7AD             
3518   F7AD             ;#F7AD          ;Copy block of memory from [X+1] to [D], length at [X]
3519   F7AD DD BF       CPYTBL  STD     FPTMPS       ;Save destination
3520   F7AF E6 00               LDAB    ,X          ;Get length
3521   F7B1             
3522   F7B1             ;$F7B2
3523   F7B1 08          CPYMEN  INX                 ;Inc start
3524   F7B2             
3525   F7B2             ;$F7B2  Copy block of memory from [X] to [$00BF], length in B
3526   F7B2 A6 00       CPYMEM  LDAA    ,X          ;Get byte
3527   F7B4 DF C1               STX     TENEXP       ;Save source
3528   F7B6 DE BF               LDX     FPTMPS       ;Get dest
3529   F7B8 A7 00               STAA    ,X          ;Put byte
3530   F7BA 08                  INX                 ;Inc dest
3531   F7BB DF BF               STX     FPTMPS       ;Save dest
3532   F7BD DE C1               LDX     TENEXP       ;Get source
3533   F7BF 5A                  DECB                ;Dec count
3534   F7C0 26 EF               BNE     CPYMEN     ;More...
3535   F7C2 39                  RTS
3536   F7C3             
3537   F7C3             ;DEFAULT RESET WARM-BOOT (F7C3)
3538   F7C3 01                  NOP     
3539   F7C4 7F 00 E8            CLR     CHANNEL     ;turn off printing
3540   F7C7 BD E3 EE            JSR     LBLE3EE
3541   F7CA BD FB D4            JSR     CLRSCRN+1   ;Clear screen
3542   F7CD 20 DB               BRA     LBLF7AA
3543   F7CF             
3544   F7CF                                             ;Copied to $00EB                
3545   F7CF 0E          TBLF7CF FCB     14          ;14 bytes to copy
3546   F7D0 7C 00 F5            INC     TXTPTR+1
3547   F7D3 26 03               BNE     LBLF7D8
3548   F7D5 7C 00 F4            INC     TXTPTR
3549   F7D8 B6 00 00    LBLF7D8 LDAA    >DDR1 
3550   F7DB 7E E1 C8            JMP     QNUM
3551   F7DE             
3552   F7DE                             ;Copied to $4200
3553   F7DE 31          TBLF7DE FCB     49          ;49 bytes to copy
3554   F7DF 3B                  RTI     
3555   F7E0 00                  FCB     $00
3556   F7E1 00                  FCB     $00
3557   F7E2 3B                  RTI     
3558   F7E3 00                  FCB     $00
3559   F7E4 00                  FCB     $00
3560   F7E5 3B                  RTI     
3561   F7E6 00                  FCB     $00
3562   F7E7 00                  FCB     $00
3563   F7E8 3B                  RTI     
3564   F7E9 00                  FCB     $00
3565   F7EA 00                  FCB     $00
3566   F7EB 3B                  RTI     
3567   F7EC 00                  FCB     $00
3568   F7ED 00                  FCB     $00
3569   F7EE 3B                  RTI     
3570   F7EF 00                  FCB     $00
3571   F7F0 00                  FCB     $00
3572   F7F1 3B                  RTI     
3573   F7F2 00                  FCB     $00
3574   F7F3 00                  FCB     $00
3575   F7F4 7E EC 2E            JMP     FCERR-2  ;?FC error
3576   F7F7 4FC75259FF045EEC        FCB     $4F,$C7,$52,$59,$FF,$04,$5E,$EC,$2E,$F7,$C3,$00,$76,$00,$01,$10
3576   F7FF 2EF7C30076000110
3577   F807 70840001151A0B00        FCB     $70,$84,$00,$01,$15,$1A,$0B,$00,$80
3577   F80F 80          
3578   F810                     
3579   F810             
3580   F810 4D4943524F434F4CINITMSG FCB     $4D,$49,$43,$52,$4F,$43,$4F,$4C,$4F,$52,$20,$42,$41,$53,$49,$43 ;MICROCOLOR TXTTAB
3580   F818 4F52204241534943
3581   F820 20312E300D          FCB     $20,$31,$2E,$30,$0D                                             ; 1.0
3582   F825 434F505952494748        FCB     $43,$4F,$50,$59,$52,$49,$47,$48,$54,$20,$31,$39,$38,$32,$20     ;COPYRIGHT 1982
3582   F82D 54203139383220
3583   F834 4D4943524F534F46MCROSFT FCB     $4D,$49,$43,$52,$4F,$53,$4F,$46,$54,$0D,$00                     ;MICROSOFT
3583   F83C 540D00      
3584   F83F             
3585   F83F             
3586   F83F                             ; --- Flash cursor ---
3587   F83F 7A 42 2B    FLASH   DEC     FLSHCNT     ;cursor flash delay counter
3588   F842 26 1A               BNE     FDELAY
3589   F844 B6 42 82            LDAA    CRSRCLR     ;cursor color
3590   F847 88 0F               EORA    #$0F
3591   F849 B7 42 82            STAA    CRSRCLR
3592   F84C 8A 80               ORAA    #$80
3593   F84E FE 42 80            LDX     CRSRADR
3594   F851 A7 00               STAA    ,X
3595   F853 C6 16               LDAB    #$16
3596   F855 84 0F               ANDA    #$0F
3597   F857 27 02               BEQ     LBLF85B
3598   F859 C6 58               LDAB    #$58        ;flash color longer than black.
3599   F85B F7 42 2B    LBLF85B STAB    FLSHCNT
3600   F85E             
3601   F85E             ;$F85E  Delay ? Cycles for Cursor Flash
3602   F85E CE 03 FA    FDELAY  LDX     #$03FA
3603   F861             
3604   F861             ;$F861  Delay X*? Cycles
3605   F861 09          DELAY   DEX    
3606   F862 26 FD               BNE     DELAY
3607   F864 39                  RTS
3608   F865             
3609   F865             
3610   F865                             ; --- Idle loop ---
3611   F865 BD 42 85    LBLF865 JSR     X_INCHAR     ;input char command extension
3612   F868 3C                  PSHX    
3613   F869 37                  PSHB
3614   F86A 8D D3       LBLF86A BSR     FLASH       ;Flash cursor
3615   F86C 8D 15               BSR     SCANKBD     ;Scan keyboard
3616   F86E 27 FA               BEQ     LBLF86A     ;Repeat if no key pressed
3617   F870 C6 60               LDAB    #$60
3618   F872 FE 42 80            LDX     CRSRADR     ;cursor address
3619   F875 E7 00               STAB    ,X
3620   F877 20 52               BRA     LBLF8CB
3621   F879             
3622   F879             
3623   F879 4F          LBLF879 CLRA    
3624   F87A 8D 54               BSR     LBLF8D0
3625   F87C 26 05               BNE     SCANKBD
3626   F87E 8D 64               BSR     LBLF8E4
3627   F880 4C                  INCA    
3628   F881 27 4A               BEQ     LBLF8CD
3629   F883             
3630   F883                             ; --- Scan keyboard ---
3631   F883 BD 42 A9    SCANKBD JSR     LBL42A9                 ; Keyscan command extension
3632   F886 3C                  PSHX    
3633   F887 37                  PSHB    
3634   F888 86 FB               LDAA    #$FB      ; Port code for BREAK key.
3635   F88A 8D 44               BSR     LBLF8D0
3636   F88C 16                  TAB     
3637   F88D 27 03               BEQ     LBLF892
3638   F88F F8 42 3B            EORB    BRKFLAG   ; keyboard BREAK flag.
3639   F892 B7 42 3B    LBLF892 STAA    BRKFLAG
3640   F895 5D                  TSTB    
3641   F896 27 06               BEQ     LBLF89E
3642   F898 8D 42               BSR     KDELAY   ; delay
3643   F89A 8D 36               BSR     LBLF8D2   ; still a break?
3644   F89C 26 2A               BNE     LBLF8C8   ; return BREAK code 03
3645   F89E CE 42 30    LBLF89E LDX     #SCANBUF
3646   F8A1 5F                  CLRB    
3647   F8A2 5A                  DECB    
3648   F8A3 F7 42 39            STAB    KEYSTRB
3649   F8A6 59          LBLF8A6 ROLB    
3650   F8A7 24 1D               BHS     LBLF8C6
3651   F8A9 7C 42 39            INC     KEYSTRB
3652   F8AC 8D 34               BSR     LBLF8E2
3653   F8AE 37                  PSHB    
3654   F8AF 16                  TAB     
3655   F8B0 08                  INX    
3656   F8B1 A8 00               EORA    ,X
3657   F8B3 A4 00               ANDA    ,X
3658   F8B5 E7 00               STAB    ,X
3659   F8B7 33                  PULB    
3660   F8B8 4D                  TSTA    
3661   F8B9 0D                  SEC     
3662   F8BA 27 EA               BEQ     LBLF8A6
3663   F8BC 36                  PSHA    
3664   F8BD 8D 1D               BSR     KDELAY
3665   F8BF 8D 23               BSR     LBLF8E4
3666   F8C1 A1 00               CMPA    ,X
3667   F8C3 32                  PULA    
3668   F8C4 26 24               BNE     LBLF8EA
3669   F8C6 4F          LBLF8C6 CLRA    
3670   F8C7 8C 86 03            CPX     #$8603
3671   F8CA                     ;old FCB     $CB        ;CPX #
3672   F8CA             LBLF8C8 EQU $-2 ;LDAA    #$03
3673   F8CA 4D          LBLF8CA TSTA
3674   F8CB 33          LBLF8CB PULB                    ;Restore clobbered registers    
3675   F8CC 38                  PULX    
3676   F8CD 39          LBLF8CD RTS                     ; End Scan Keyboard subroutine
3677   F8CE             
3678   F8CE 86 7F       LBLF8CE LDAA    #$7F        ; Port code for SHIFT key
3679   F8D0 97 02       LBLF8D0 STAA    PORT1       ; Keyboard port i/o sequence
3680   F8D2 96 03       LBLF8D2 LDAA    PORT2       ; A=0x00=found
3681   F8D4 43                  COMA                ; A=0xff=not found
3682   F8D5 84 02               ANDA    #$02
3683   F8D7 27 02               BEQ     LBLF8DB
3684   F8D9 86 FF               LDAA    #$FF
3685   F8DB 39          LBLF8DB RTS     
3686   F8DC             
3687   F8DC             ;$F8DC  Delay for Keybounce
3688   F8DC FE 42 1D    KDELAY  LDX     KCOUNT        ;Get Keyboard Debounce Delay
3689   F8DF 7E F8 61            JMP     DELAY         ;Delay and Return
3690   F8E2             
3691   F8E2 D7 02       LBLF8E2 STAB    PORT1
3692   F8E4 B6 BF FF    LBLF8E4 LDAA    ioBFFF
3693   F8E7 8A C0               ORAA    #$C0
3694   F8E9 39                  RTS     
3695   F8EA C6 F8       LBLF8EA LDAB    #$F8
3696   F8EC CB 08       LBLF8EC ADDB    #$08
3697   F8EE 44                  LSRA    
3698   F8EF 24 FB               BHS     LBLF8EC
3699   F8F1 FB 42 39            ADDB    KEYSTRB  ; keyboard strobe store
3700   F8F4 86 FE               LDAA    #$FE     ; Port code for CONTROL key
3701   F8F6 8D D8               BSR     LBLF8D0
3702   F8F8 B7 42 3A            STAA    CTLFLAG  ; keyboard control key flag
3703   F8FB BD 42 AC            JSR     LBL42AC  ; keyboard control extension
3704   F8FE 27 11               BEQ     LBLF911
3705   F900 CE F9 7C            LDX     #TBLF97C
3706   F903 C1 20               CMPB    #$20
3707   F905 26 27               BNE     LBLF92E
3708   F907 B6 42 82            LDAA    CRSRCLR
3709   F90A 8B 10               ADDA    #$10
3710   F90C B7 42 82            STAA    CRSRCLR
3711   F90F 20 B5               BRA     LBLF8C6
3712   F911 17          LBLF911 TBA     
3713   F912 27 05               BEQ     LBLF919-2
3714   F914 C1 1A               CMPB    #$1A
3715   F916 23 1B               BLS     LBLF933
3716   F918             
3717   F918 8C C6 1D            CPX     #$C61D
3718   F91B             LBLF919 ;LDAB    #$1D
3719   F91B CE F9 39            LDX     #TBLF956-$1D
3720   F91E 8D AE               BSR     LBLF8CE
3721   F920 27 0C               BEQ     LBLF92E
3722   F922 CE F9 4C            LDX     #TBLF969-$1D
3723   F925 C1 20               CMPB    #$20
3724   F927 26 05               BNE     LBLF92E
3725   F929 73 42 1C            COM     ram421C
3726   F92C 20 98               BRA     LBLF8C6
3727   F92E 3A          LBLF92E ABX     
3728   F92F A6 00               LDAA    ,X
3729   F931 20 97               BRA     LBLF8CA
3730   F933 8D 99       LBLF933 BSR     LBLF8CE
3731   F935 B8 42 1C            EORA    ram421C
3732   F938 26 07               BNE     LBLF941
3733   F93A B6 42 1C            LDAA    ram421C
3734   F93D 26 07               BNE     LBLF946
3735   F93F CA 20               ORAB    #$20
3736   F941 17          LBLF941 TBA     
3737   F942 8A 40               ORAA    #$40
3738   F944 20 84       LBLF944 BRA     LBLF8CA
3739   F946 CE F9 AB    LBLF946 LDX     #TBLF9AB
3740   F949 3A                  ABX     
3741   F94A A6 00               LDAA    ,X
3742   F94C 2A F6               BPL     LBLF944
3743   F94E F6 42 82            LDAB    CRSRCLR
3744   F951 C4 70               ANDB    #$70
3745   F953 1B                  ABA
3746   F954 20 EE               BRA     LBLF944
3747   F956             
3748   F956 40 0D 20    TBLF956 FCB     $40,$0D,$20                         ;@- 
3749   F959 3031323334353637        FCB     $30,$31,$32,$33,$34,$35,$36,$37     ;01234567
3750   F961 38393A3B2C2D2E2F        FCB     $38,$39,$3A,$3B,$2C,$2D,$2E,$2F     ;89:;,-./
3751   F969             
3752   F969 13 0D 20    TBLF969 FCB     $13,$0D,$20                         ;-- 
3753   F96C 0021222324252627        FCB     $00,$21,$22,$23,$24,$25,$26,$27     ;-!"#$%&'
3754   F974 28292A2B3C3D3E3F        FCB     $28,$29,$2A,$2B,$3C,$3D,$3E,$3F     ;()*+<=>?
3755   F97C             
3756   F97C                                                                ;RESLST
3757   F97C 8808B3B2829B9084TBLF97C FCB     $88,$08,$B3,$B2,$82,$9B,$90,$84     ;--------
3758   F984 A38A819EBCBAB9A5        FCB     $A3,$8A,$81,$9E,$BC,$BA,$B9,$A5     ;--------
3759   F98C C7159C098C80B55E        FCB     $C7,$15,$9C,$09,$8C,$80,$B5,$5E     ;-------^
3760   F994 B18F0A0000000D20        FCB     $B1,$8F,$0A,$00,$00,$00,$0D,$20     ;------- 
3761   F99C 008E939897969495        FCB     $00,$8E,$93,$98,$97,$96,$94,$95     ;--------
3762   F9A4 9D868992BB91B7        FCB     $9D,$86,$89,$92,$BB,$91,$B7         ;-------
3763   F9AB             
3764   F9AB                                                                ;Graphic chars
3765   F9AB B6898082878D8685TBLF9AB FCB     $B6,$89,$80,$82,$87,$8D,$86,$85     ;--------
3766   F9B3 48494A4B4C4D4E4F        FCB     $48,$49,$4A,$4B,$4C,$4D,$4E,$4F     ;HIJKLMNO
3767   F9BB 508F8C888B55818E        FCB     $50,$8F,$8C,$88,$8B,$55,$81,$8E     ;P----U--
3768   F9C3 83 8A 84            FCB     $83,$8A,$84                         ;---
3769   F9C6             
3770   F9C6             ;$F9CE  Write Character to Output Device
3771   F9C6 BD 42 88    OUTCH   JSR     LBL4288
3772   F9C9 3C                  PSHX    
3773   F9CA 37                  PSHB    
3774   F9CB 36                  PSHA    
3775   F9CC D6 E8               LDAB    CHANNEL     ;Ouput device #
3776   F9CE 27 4B               BEQ     OUTSCR     ;Video...
3777   F9D0             
3778   F9D0             
3779   F9D0                                         ;Assume printer
3780   F9D0 16                  TAB     
3781   F9D1 07                  TPA     
3782   F9D2 36                  PSHA    
3783   F9D3 0F                  SEI     
3784   F9D4 17                  TBA     
3785   F9D5 D6 03       LBLF9D5 LDAB    PORT2       ;Wait for handshake
3786   F9D7 C4 04               ANDB    #$04
3787   F9D9 26 FA               BNE     LBLF9D5
3788   F9DB 8D 2D               BSR     LBLFA0A     ;Idle bit
3789   F9DD 5F                  CLRB    
3790   F9DE 8D 2C               BSR     LBLFA0C     ;Start bit
3791   F9E0 C6 08               LDAB    #$08
3792   F9E2 37          LBLF9E2 PSHB    
3793   F9E3 5F                  CLRB    
3794   F9E4 44                  LSRA    
3795   F9E5 59                  ROLB    
3796   F9E6 8D 24               BSR     LBLFA0C     ;Bit out
3797   F9E8 33                  PULB    
3798   F9E9 5A                  DECB    
3799   F9EA 26 F6               BNE     LBLF9E2     ;Next bit
3800   F9EC 8D 1C               BSR     LBLFA0A     ;Stop bit
3801   F9EE 32                  PULA    
3802   F9EF 06                  TAP     
3803   F9F0 32                  PULA    
3804   F9F1 81 0D               CMPA    #$0D
3805   F9F3 27 0B               BEQ     LBLFA00
3806   F9F5 7C 42 2A            INC     ram422A
3807   F9F8 F6 42 2A            LDAB    ram422A
3808   F9FB F1 42 29            CMPB    PLINLEN
3809   F9FE 25 07               BCS     LBLFA07
3810   FA00 7F 42 2A    LBLFA00 CLR     ram422A
3811   FA03 8D 10               BSR     LBLFA15
3812   FA05 8D 0E               BSR     LBLFA15
3813   FA07 33          LBLFA07 PULB    
3814   FA08 38                  PULX    
3815   FA09 39                  RTS
3816   FA0A             
3817   FA0A C6 01       LBLFA0A LDAB    #$01
3818   FA0C D7 03       LBLFA0C STAB    PORT2       ;Printer bit output
3819   FA0E 8D 00               BSR     LBLFA10
3820   FA10 FE 42 23    LBLFA10 LDX     PBDELAY
3821   FA13 20 03               BRA     LBLFA18
3822   FA15 FE 42 25    LBLFA15 LDX     CRDELAY
3823   FA18 7E F8 61    LBLFA18 JMP     DELAY
3824   FA1B             
3825   FA1B             ;FA1B   Write Character to Screen
3826   FA1B FE 42 80    OUTSCR  LDX     CRSRADR
3827   FA1E 81 08               CMPA    #$08   ; backspace
3828   FA20 26 0C               BNE     NOTBS
3829   FA22 8C 40 00            CPX     #$4000
3830   FA25 27 50               BEQ     LBLFA77
3831   FA27 86 60               LDAA    #$60
3832   FA29 09                  DEX    
3833   FA2A A7 00               STAA    ,X
3834   FA2C 20 2E               BRA     LBLFA5C
3835   FA2E 81 0D       NOTBS   CMPA    #$0D   ; carriage return
3836   FA30 26 14               BNE     NOTCR
3837   FA32 FE 42 80            LDX     CRSRADR
3838   FA35 86 60       LBLFA35 LDAA    #$60
3839   FA37 A7 00               STAA    ,X
3840   FA39 08                  INX    
3841   FA3A FF 42 80            STX     CRSRADR
3842   FA3D F6 42 81            LDAB    CRSRADR+1
3843   FA40 C5 1F               BITB    #$1F
3844   FA42 26 F1               BNE     LBLFA35
3845   FA44 20 16               BRA     LBLFA5C
3846   FA46 81 20       NOTCR   CMPA    #$20
3847   FA48 25 2D               BCS     LBLFA77
3848   FA4A 4D                  TSTA    
3849   FA4B 2B 0C               BMI     LBLFA59
3850   FA4D 81 40               CMPA    #$40
3851   FA4F 25 06               BCS     LBLFA57
3852   FA51 81 60               CMPA    #$60
3853   FA53 25 04               BCS     LBLFA59
3854   FA55 84 DF               ANDA    #$DF
3855   FA57 88 40       LBLFA57 EORA    #$40
3856   FA59 A7 00       LBLFA59 STAA    ,X
3857   FA5B 08                  INX    
3858   FA5C FF 42 80    LBLFA5C STX     CRSRADR
3859   FA5F 8C 42 00            CPX     #$4200
3860   FA62 26 13               BNE     LBLFA77
3861   FA64 CE 40 00            LDX     #$4000  ; scroll up
3862   FA67 EC 20       LBLFA67 LDD     $20,X
3863   FA69 ED 00               STD     ,X
3864   FA6B 08                  INX    
3865   FA6C 08                  INX    
3866   FA6D 8C 41 E0            CPX     #$41E0
3867   FA70 26 F5               BNE     LBLFA67
3868   FA72 C6 60               LDAB    #$60
3869   FA74 BD FB D9            JSR     LBLFBD9
3870   FA77 32          LBLFA77 PULA    
3871   FA78 33                  PULB    
3872   FA79 38                  PULX    
3873   FA7A 39                  RTS     
3874   FA7B BD 42 8B    LBLFA7B JSR     LBL428B   ;I/O pointer setup command extenstion
3875   FA7E 3C                  PSHX    
3876   FA7F 37                  PSHB    
3877   FA80 36                  PSHA    
3878   FA81 96 E8               LDAA    CHANNEL ;Get device output 0=screen, -1 printer
3879   FA83 27 08               BEQ     LBLFA8D ;go if on screen
3880   FA85 FE 42 27            LDX     TABSIZE ;tab field width 16/last tab zone 112
3881   FA88 FC 42 29            LDD     PLINLEN ;printer line length max
3882   FA8B 20 0A               BRA     LBLFA97
3883   FA8D F6 42 81    LBLFA8D LDAB    CRSRADR+1 ;cursor address lsb
3884   FA90 C4 1F               ANDB    #$1F
3885   FA92 CE 10 10            LDX     #$1010
3886   FA95 86 20               LDAA    #$20
3887   FA97 DF E4       LBLFA97 STX     ramE4 ;i/o tab and last tab field
3888   FA99 D7 E6               STAB    ramE6 ;max line length msb
3889   FA9B 97 E7               STAA    ramE7 ;max line length lsb
3890   FA9D 32                  PULA    
3891   FA9E 33                  PULB    
3892   FA9F 38                  PULX    
3893   FAA0 39                  RTS
3894   FAA1             
3895   FAA1             
3896   FAA1 BD FB D4    LBLFAA1 JSR     CLRSCRN+1   ;Clear screen
3897   FAA4 BD 42 91    LBLFAA4 JSR     X_CMDLN     ;build command line extension
3898   FAA7 7F 42 7F    LBLFAA7 CLR     LASTKEY     ;last keyboard input char
3899   FAAA CE 42 B2            LDX     #BUF     ;command line buffer
3900   FAAD C6 01               LDAB    #$01
3901   FAAF BD F8 65    LBLFAAF JSR     LBLF865     ;Cursor loop return with KEY->A
3902   FAB2 7D 00 E9            TST     ramE9       ;Punt if set. (by cmd extension?)
3903   FAB5 26 4D               BNE     LBLFB04     
3904   FAB7 7D 00 E8            TST     CHANNEL     ;check output flag
3905   FABA 26 44               BNE     LBLFB00     ;go if printer
3906   FABC 4D                  TSTA      
3907   FABD 2A 1E               BPL     LBLFADD 
3908   FABF 7D 42 3A            TST     CTLFLAG     ;control key flag
3909   FAC2 27 19               BEQ     LBLFADD 
3910   FAC4 BD E4 B2            JSR     TOKADR      ;address of token->X (save X->TEMPADR)
3911   FAC7 A6 00       LBLFAC7 LDAA    ,X
3912   FAC9 08                  INX    
3913   FACA 3C                  PSHX    
3914   FACB 36                  PSHA    
3915   FACC 84 7F               ANDA    #$7F
3916   FACE DE 89               LDX     TEMPADR
3917   FAD0 8D 48               BSR     LBLFB1A
3918   FAD2 DF 89               STX     TEMPADR
3919   FAD4 32                  PULA    
3920   FAD5 38                  PULX    
3921   FAD6 4D                  TSTA    
3922   FAD7 2A EE               BPL     LBLFAC7
3923   FAD9 DE 89               LDX     TEMPADR
3924   FADB 20 D2               BRA     LBLFAAF
3925   FADD 81 0C       LBLFADD CMPA    #$0C      ;unimplemented clearscreen key?
3926   FADF 27 C0               BEQ     LBLFAA1
3927   FAE1 81 08               CMPA    #$08      ;backspace
3928   FAE3 26 08               BNE     LBLFAED
3929   FAE5 5A                  DECB    
3930   FAE6 27 BF               BEQ     LBLFAA7   ;don't go before stop
3931   FAE8 09                  DEX    
3932   FAE9 8D 37               BSR     LBLFB22   ;A->SCN
3933   FAEB 20 C2               BRA     LBLFAAF
3934   FAED 81 15       LBLFAED CMPA    #$15      ;L. DEL
3935   FAEF 26 0A               BNE     LBLFAFB
3936   FAF1 5A          LBLFAF1 DECB              ;keep backspacing until stop
3937   FAF2 27 B3               BEQ     LBLFAA7
3938   FAF4 86 08               LDAA    #$08
3939   FAF6 BD F9 C6            JSR     OUTCH   ;A->SCN
3940   FAF9 20 F6               BRA     LBLFAF1
3941   FAFB 81 03       LBLFAFB CMPA    #$03      ;break
3942   FAFD 0D                  SEC     
3943   FAFE 27 05               BEQ     LBLFB05
3944   FB00 81 0D       LBLFB00 CMPA    #$0D      ;ENTER key
3945   FB02 26 0E               BNE     LBLFB12
3946   FB04 4F          LBLFB04 CLRA              ;clear carry flag
3947   FB05 07          LBLFB05 TPA     
3948   FB06 36                  PSHA    
3949   FB07 BD E7 66            JSR     LBLE766   ;#0D->SCN
3950   FB0A 6F 00               CLR     ,X        ;terminate scratch
3951   FB0C CE 42 B1            LDX     #TBL42B1  ;command line buff-1
3952   FB0F 32                  PULA              ;carry set if BREAK'd.
3953   FB10 06                  TAP     
3954   FB11 39          LBLFB11 RTS     
3955   FB12 81 20       LBLFB12 CMPA    #$20
3956   FB14 25 99               BCS     LBLFAAF   ;ignore any non-printing char's
3957   FB16 8D 02               BSR     LBLFB1A
3958   FB18 20 95               BRA     LBLFAAF
3959   FB1A C1 80       LBLFB1A CMPB    #$80      ;don't go more than 128 chars.
3960   FB1C 24 F3               BHS     LBLFB11
3961   FB1E A7 00               STAA    ,X        ;store char into command line buffer
3962   FB20 08                  INX    
3963   FB21 5C                  INCB    
3964   FB22 7E F9 C6    LBLFB22 JMP     OUTCH ;A->SCN
3965   FB25             
3966   FB25             
3967   FB25                             ; --- SET command ---
3968   FB25             C_SET
3969   FB25 8D 43               BSR     LBLFB6A   ; get (x,y arg into memloc into X
3970   FB27 3C                  PSHX    
3971   FB28 BD EF 47            JSR     LBLEF47   ; get ,c    (B holds color code )
3972   FB2B 38                  PULX    
3973   FB2C C1 08               CMPB    #$08      
3974   FB2E 22 37               BHI     LBLFB67   ; ?FC error if color > 8
3975   FB30 5A                  DECB    
3976   FB31 2B 05               BMI     LBLFB38   
3977   FB33 86 10               LDAA    #$10      ; LSLB LSLB LSLB LSLB
3978   FB35 3D                  MUL     
3979   FB36 20 08               BRA     LBLFB40  
3980   FB38 E6 00       LBLFB38 LDAB    ,X        ; Get color from screen
3981   FB3A 2A 03               BPL     LBLFB3F   ; Set to zero if text encountered
3982   FB3C C4 70               ANDB    #$70
3983   FB3E 21                  FCB     $21             ;"BRN CLRB"
3984   FB3F 5F          LBLFB3F CLRB
3985   FB40 D7 82       LBLFB40 STAB    COUNT     ; save color
3986   FB42 8D 70               BSR     LBLFBB4   ; get trailing ')'
3987   FB44 A6 00               LDAA    ,X
3988   FB46 2B 01               BMI     LBLFB49   ; make sure its graphics
3989   FB48 4F                  CLRA              ; clear if a text char
3990   FB49 84 0F       LBLFB49 ANDA    #$0F      ; ignore color bits
3991   FB4B BA 42 3C            ORAA    ram423C   ; holds desired bit
3992   FB4E 9A 82               ORAA    COUNT     ; get color
3993   FB50 8A 80       LBLFB50 ORAA    #$80      ; make a graphics char
3994   FB52 A7 00               STAA    ,X        ; write value to screen
3995   FB54 39                  RTS
3996   FB55             
3997   FB55                             ; --- RESET command ---
3998   FB55             C_RESET
3999   FB55 8D 13               BSR     LBLFB6A   ; get (x,y arg into memloc into X
4000   FB57 8D 5B               BSR     LBLFBB4   ; get trailing ')'
4001   FB59 4F                  CLRA    
4002   FB5A E6 00               LDAB    ,X
4003   FB5C 2A F2               BPL     LBLFB50   ; clear if it's a text char
4004   FB5E 73 42 3C            COM     ram423C
4005   FB61 F4 42 3C            ANDB    ram423C
4006   FB64 E7 00               STAB    ,X
4007   FB66 39                  RTS     
4008   FB67             
4009   FB67             
4010   FB67 7E EC 2E    LBLFB67 JMP     FCERR-2  ; ?FC error
4011   FB6A             
4012   FB6A BD EA 2C    LBLFB6A JSR     CHKOPN+1  ; get '('
4013   FB6D BD EF 0D    LBLFB6D JSR     LBLEF0D    ; get x position
4014   FB70 C1 3F               CMPB    #$3F
4015   FB72 22 F3               BHI     LBLFB67    ; ?FC error if > 63
4016   FB74 37                  PSHB               ; push x on stack
4017   FB75 BD EF 47            JSR     LBLEF47    ; get y position
4018   FB78 C1 1F               CMPB    #$1F
4019   FB7A 22 EB               BHI     LBLFB67    ; ?FC error if > 31
4020   FB7C 37                  PSHB               ; push y on stack
4021   FB7D 54                  LSRB               ; y=y/2
4022   FB7E 86 20               LDAA    #$20
4023   FB80 3D                  MUL     
4024   FB81 C3 40 00            ADDD    #$4000     ; get address of left side of screen from y
4025   FB84 37                  PSHB               ; push onto stack
4026   FB85 36                  PSHA               
4027   FB86 30                  TSX     
4028   FB87 E6 03               LDAB    3,X        ; take x/2 and add to left side of screen
4029   FB89 54                  LSRB               
4030   FB8A 38                  PULX               
4031   FB8B 3A                  ABX     
4032   FB8C 32                  PULA               ; now construct mask for char block and store in 423C
4033   FB8D 33                  PULB    
4034   FB8E 84 01               ANDA    #$01
4035   FB90 56                  RORB    
4036   FB91 49                  ROLA               ; A holds 2's complement of bit pos
4037   FB92 C6 10               LDAB    #$10       ; start B with bit 4
4038   FB94 54          LBLFB94 LSRB               ; shift right until A is zero
4039   FB95 4A                  DECA    
4040   FB96 2A FC               BPL     LBLFB94    
4041   FB98 F7 42 3C            STAB    ram423C    ; done, store into 423C
4042   FB9B 39                  RTS
4043   FB9C             
4044   FB9C                             ; --- POINT command ---
4045   FB9C             F_POINT
4046   FB9C 8D CF               BSR     LBLFB6D    ; get '(x,y' into X and mask into 423C
4047   FB9E C6 FF               LDAB    #$FF
4048   FBA0 A6 00               LDAA    ,X
4049   FBA2 2A 0E               BPL     LBLFBB2    ; need to return -1 if text char
4050   FBA4 B4 42 3C            ANDA    ram423C    
4051   FBA7 27 08               BEQ     LBLFBB1    ; not set, return 0
4052   FBA9 E6 00               LDAB    ,X   
4053   FBAB 54                  LSRB    
4054   FBAC 54                  LSRB    
4055   FBAD 54                  LSRB    
4056   FBAE 54                  LSRB    
4057   FBAF C4 07               ANDB    #$07
4058   FBB1 5C          LBLFBB1 INCB    
4059   FBB2 8D 03       LBLFBB2 BSR     LBLFBB7   ; return B (sign extended)
4060   FBB4 7E EA 29    LBLFBB4 JMP     CHKCLS   ; get ')'
4061   FBB7 4F          LBLFBB7 CLRA              ; return B (sign extended)
4062   FBB8 5D                  TSTB    
4063   FBB9 2A 01               BPL     LBLFBBC
4064   FBBB 43                  COMA    
4065   FBBC 7E EC E3    LBLFBBC JMP     LBLECE3 ; return D
4066   FBBF             
4067   FBBF                             ; --- CLS command ---
4068   FBBF             C_CLS
4069   FBBF 27 13               BEQ     CLRSCRN+1       ;No args - default clear
4070   FBC1 BD EF 0D            JSR     LBLEF0D         ;Get integer arg into B between 0-255.
4071   FBC4 C1 08               CMPB    #$08
4072   FBC6 22 1D               BHI     CLRMSFT         ;If > 8 - Clear screen and print Microsoft message
4073   FBC8 5D                  TSTB    
4074   FBC9 27 06               BEQ     LBLFBD1         ;CLS 0...
4075   FBCB 5A                  DECB    
4076   FBCC 86 10               LDAA    #$10
4077   FBCE 3D                  MUL     
4078   FBCF CA 0F               ORAB    #$0F
4079   FBD1 CA 80       LBLFBD1 ORAB    #$80            ;0=$80, 1=$8F, 2=$9F, 3=$AF, 4=$BF, 5=$CF, 6=$DF, 7=$EF, 8=$FF
4080   FBD3             
4081   FBD3 8C C6 60    CLRSCRN CPX     #$C660          
4082   FBD6                    ;==LDAB  #$60 - Default clear char
4083   FBD6             
4084   FBD6 CE 40 00            LDX     #SCREEN         ;Start of video memory
4085   FBD9 FF 42 80    LBLFBD9 STX     CRSRADR
4086   FBDC E7 00       CLRLOOP STAB    ,X              ;Set mem
4087   FBDE 08                  INX                     ;Next
4088   FBDF 8C 42 00            CPX     #$4200          ;Done?
4089   FBE2 26 F8               BNE     CLRLOOP         ;More...
4090   FBE4 39                  RTS
4091   FBE5             
4092   FBE5 8D ED       CLRMSFT BSR     CLRSCRN+1       ;Clear screen
4093   FBE7 CE F8 33            LDX     #MCROSFT-1      ;Microsoft message
4094   FBEA 7E E7 A8            JMP     STROUT          ;Write string
4095   FBED             
4096   FBED             
4097   FBED                             ; --- INKEY$ function ---
4098   FBED             F_INKEY
4099   FBED B6 42 7F            LDAA    LASTKEY ;last keyboard input char
4100   FBF0 26 03               BNE     LBLFBF5
4101   FBF2 BD F8 83            JSR     SCANKBD
4102   FBF5 7F 42 7F    LBLFBF5 CLR     LASTKEY
4103   FBF8 97 CD               STAA    FACLO
4104   FBFA 27 03               BEQ     LBLFBFF
4105   FBFC 7E EE 91            JMP     LBLEE91
4106   FBFF 97 D0       LBLFBFF STAA    ramD0
4107   FC01 7E EE 9D            JMP     LBLEE9D
4108   FC04             
4109   FC04             
4110   FC04             ;$FC04  EXEC Command
4111   FC04             
4112   FC04 27 06       EXEC    BEQ     LBLFC0C  ;If Not End of Statement
4113   FC06 BD EF 4C            JSR     INTIDX2  ; Get address to X
4114   FC09 FF 42 1F            STX     EXEADR
4115   FC0C FE 42 1F    LBLFC0C LDX     EXEADR
4116   FC0F 6E 00               JMP     ,X
4117   FC11             
4118   FC11             
4119   FC11                             ; --- VARPTR function ---
4120   FC11             F_VARPTR
4121   FC11 DE 99               LDX     ram99
4122   FC13 3C                  PSHX    
4123   FC14 BD EB 1B            JSR     PTRGET
4124   FC17 BD EA 29            JSR     CHKCLS ; get ')'
4125   FC1A DF 89               STX     TEMPADR
4126   FC1C 38                  PULX    
4127   FC1D DC 89               LDD     TEMPADR
4128   FC1F 9C 99               CPX     ram99
4129   FC21 27 03               BEQ     LBLFC26
4130   FC23 7E EC 2E            JMP     FCERR-2  ; ?FC error
4131   FC26 7E EC E3    LBLFC26 JMP     LBLECE3 ; return D
4132   FC29             
4133   FC29                             ; --- PRINT @expression  ---
4134   FC29 BD EB BA    LBLFC29 JSR     INTIDX
4135   FC2C 83 01 FF            SUBD    #$01FF
4136   FC2F 23 03               BLS     LBLFC34
4137   FC31 7E EC 2E            JMP     FCERR-2  ; ?FC error
4138   FC34 C3 41 FF    LBLFC34 ADDD    #$41FF
4139   FC37 FD 42 80            STD     CRSRADR
4140   FC3A 39                  RTS
4141   FC3B             
4142   FC3B             ;$FC3B  CSAVE command
4143   FC3B DE 93       CSAVE:  LDX     TXTTAB        ;Set Start Address for SAVE
4144   FC3D FF 42 6F            STX     SAL           ;to Beginning of Program
4145   FC40 DE 95               LDX     VARTAB        ;Set End Address for SAVE
4146   FC42 FF 42 71            STX     EAL ; end     ;to End of Program
4147   FC45 5F                  CLRB                  ;Set File Type to BAS
4148   FC46 81 A9               CMPA    #$A9          ;If CSAVE*
4149   FC48 26 05               BNE     CSAVE1       
4150   FC4A BD FD DB            JSR     CSAVEV        ;Set SAL and EAL to Array Start amd End
4151   FC4D C6 04               LDAB    #$04          ;and File Type to VAR
4152   FC4F F7 42 67    CSAVE1  STAB    FTYPE         ;Store File Type 
4153   FC52 FC 42 71            LDD     EAL           ;Calculate File Length
4154   FC55 B3 42 6F            SUBD    SAL           ;and
4155   FC58 FD 42 6C            STD     LAL           ;Store as LOAD Address
4156   FC5B 8D 2E               BSR     HWRITE
4157   FC5D FE 42 6F            LDX     SAL           ;Get Save Start Address
4158   FC60             
4159   FC60             ;FC60   ;Write File Data to Tape
4160   FC60 FF 42 78    CSAVED  STX     CBUFAD        ;Set Cassette Buffer Address
4161   FC63 86 FF               LDAA    #$FF          ;Set Cassette Block Length
4162   FC65 B7 42 76            STAA    BLKLEN        ;to 255
4163   FC68 FC 42 71            LDD     EAL           ;Calculate File Length
4164   FC6B B3 42 78            SUBD    CBUFAD
4165   FC6E 23 0E               BLS     LBLFC7E
4166   FC70 4D                  TSTA    
4167   FC71 26 07               BNE     LBLFC7A
4168   FC73 C1 FF               CMPB    #$FF
4169   FC75 27 03               BEQ     LBLFC7A
4170   FC77 F7 42 76            STAB    BLKLEN        ;cass block length
4171   FC7A 8D 44       LBLFC7A BSR     BLKOUT        ;write cassette block
4172   FC7C 20 E2               BRA     CSAVED     
4173   FC7E 70 42 75    LBLFC7E NEG     BLKTYP        ; cass block type flag
4174   FC81 7F 42 76            CLR     BLKLEN        ;cass block length
4175   FC84 8D 3A               BSR     BLKOUT        ;write cassette block
4176   FC86 86 01       LBLFC86 LDAA    #$01
4177   FC88 97 03               STAA    PORT2
4178   FC8A 39                  RTS
4179   FC8B             
4180   FC8B             ;FC8B   Parse File Name and Write Header to Cassette
4181   FC8B BD FD 29    HWRITE  JSR     CHKFN
4182   FC8E CE 42 5F            LDX     #CASBUF       ;tape filename block
4183   FC91 FF 42 78            STX     CBUFAD          ;cass buffer address
4184   FC94 DF BF               STX     FPTMPS  
4185   FC96 6F 09               CLR     $09,X         ;Set DTYPE t0 0
4186   FC98 6F 0A               CLR     $0A,X         ;Set GAPFLG to 0
4187   FC9A             
4188   FC9A             ;       Copy File Name to Cassette Buffer and Write to Cassette
4189   FC9A CE 42 57    HDROUT  LDX     #$4257 ;old #FNAME        ;skip/load filename
4190   FC9D C6 08               LDAB    #$08
4191   FC9F BD F7 B2            JSR     CPYMEM        ;Copy B bytes from [X] to [$BF]
4192   FCA2 7F 42 75            CLR     BLKTYP        ;Set Cassette Block Type to Header
4193   FCA5 86 0F               LDAA    #$0F
4194   FCA7 B7 42 76            STAA    BLKLEN        ;cass block length
4195   FCAA 8D 0B               BSR     WRLDR        ;write cassette leader
4196   FCAC 8D 12               BSR     BLKOUT        ;write cassette block
4197   FCAE 7C 42 75            INC     BLKTYP        ;cass block type flag
4198   FCB1 CE 00 00            LDX     #$0000
4199   FCB4 BD F8 61            JSR     DELAY
4200   FCB7             
4201   FCB7             
4202   FCB7             ;$FCB7  Write Cassette Leader - (LDRCNT) SYNC Characters
4203   FCB7 FE 42 2F    WRLDR   LDX     LDRCNT   ; numer of $55's in leader
4204   FCBA             
4205   FCBA             ;$FCBA  Write X SYNC Characters to Cassette
4206   FCBA 8D 45       WRSYN   BSR     SYNOUT
4207   FCBC 09                  DEX    
4208   FCBD 26 FB               BNE     WRSYN
4209   FCBF 39                  RTS
4210   FCC0             
4211   FCC0             ;$FCC0  Write cassette block
4212   FCC0 01          BLKOUT  NOP                   ;
4213   FCC1 0F                  SEI     
4214   FCC2 F6 42 76            LDAB    BLKLEN        ;cass block length
4215   FCC5 F7 42 7B            STAB    LOADSTS       ;cass load status flag
4216   FCC8 B6 42 76            LDAA    BLKLEN        ;cass block length
4217   FCCB 27 09               BEQ     BLKOU2
4218   FCCD FE 42 78            LDX     CBUFAD        ;cass buffer address
4219   FCD0 AB 00       BLKOU1  ADDA    ,X
4220   FCD2 08                  INX    
4221   FCD3 5A                  DECB    
4222   FCD4 26 FA               BNE     BLKOU1
4223   FCD6 BB 42 75    BLKOU2  ADDA    BLKTYP        ;cass block type flag
4224   FCD9 B7 42 7A            STAA    CCKSUM        ;cass sumcheck
4225   FCDC FE 42 78            LDX     CBUFAD        ;cass buffer address
4226   FCDF 8D 20               BSR     SYNOUT
4227   FCE1 86 3C               LDAA    #$3C
4228   FCE3 8D 1E               BSR     CASOUT
4229   FCE5 B6 42 75            LDAA    BLKTYP
4230   FCE8 8D 19               BSR     CASOUT
4231   FCEA B6 42 76            LDAA    BLKLEN        ;cass block length
4232   FCED 8D 14               BSR     CASOUT
4233   FCEF 4D                  TSTA    
4234   FCF0 27 0A               BEQ     BLKOU4
4235   FCF2 A6 00       BLKOU3  LDAA    ,X
4236   FCF4 08                  INX    
4237   FCF5 8D 0C               BSR     CASOUT
4238   FCF7 7A 42 7B            DEC     LOADSTS       ;cass load status flag
4239   FCFA 26 F6               BNE     BLKOU3      
4240   FCFC B6 42 7A    BLKOU4  LDAA    CCKSUM        ;cass sumcheck
4241   FCFF 8D 02               BSR     CASOUT
4242   FD01             
4243   FD01             ;$FD01  Write Sync Character to Tape
4244   FD01 86 55       SYNOUT  LDAA    #$55
4245   FD03             
4246   FD03             ;$FD03  Write Character to Cassette
4247   FD03 3C          CASOUT  PSHX                  ;Save Pointer to Byte
4248   FD04 36                  PSHA                  ;Save Character on Stack
4249   FD05 36                  PSHA                  ;Push onto Stack to be Rotated
4250   FD06 C6 08               LDAB    #$08          ;Writing 8 Bite
4251   FD08             
4252   FD08             ;$FD08  Write Bits to Cassette 
4253   FD08 30          BTSOUT  TSX                   ;Set Index to Byte on Stack
4254   FD09 64 00               LSR     ,X            ;Rotate High Bit Out
4255   FD0B CE 00 20            LDX     #$0020        ;Set Pulse Length for Zero
4256   FD0E 25 03               BCS     PLSOUT        ;If Bit was 1
4257   FD10 CE 00 40            LDX     #$0040        ;Set Pulse Length for One
4258   FD13                     
4259   FD13             ;$FD13  Write Pulse to Cassette
4260   FD13 3C          PLSOUT  PSHX                  ;Save Pulse Length
4261   FD14 86 01               LDAA    #$01          ;Set Output High
4262   FD16 97 03               STAA    PORT2
4263   FD18 09          PLSOU1  DEX                   ;Count Down the Pulse Length
4264   FD19 26 FD               BNE     PLSOU1
4265   FD1B 4F                  CLRA    
4266   FD1C 97 03               STAA    PORT2         ;Set Output Low
4267   FD1E 38                  PULX                  ;Restore Pulse Length
4268   FD1F 09          PLSOU2  DEX                   ;and Count it Down
4269   FD20 26 FD               BNE     PLSOU2
4270   FD22 5A                  DECB                  ;
4271   FD23 26 E3               BNE     BTSOUT        ;Write Next Bit
4272   FD25 32                  PULA    
4273   FD26 32                  PULA    
4274   FD27 38                  PULX    
4275   FD28 39          PLSRTS  RTS
4276   FD29             
4277   FD29             ;$FD29  Require Filename
4278   FD29 8D 08       CHKFN   BSR     GETFN         
4279   FD2B BD 00 F3            JSR    >CHRGOT 
4280   FD2E 27 F8               BEQ     PLSRTS
4281   FD30 7E EA 3C            JMP     SNERR         ;?SN ERROR
4282   FD33             
4283   FD33             ;FD33   Get File Name
4284   FD33 CE 42 56    GETFN   LDX     #FNLEN        
4285   FD36 6F 00               CLR     ,X            ;Set Filename Length to 0
4286   FD38 86 20               LDAA    #$20          ;Fill Filename with Spaces
4287   FD3A 08          PADFN   INX    
4288   FD3B A7 00               STAA    ,X
4289   FD3D 8C 42 5F            CPX     #$425F        ;tape filename block
4290   FD40 26 F8               BNE     PADFN
4291   FD42 BD 00 F3            JSR    >CHRGOT        ; load input char
4292   FD45 27 E1               BEQ     PLSRTS        ; return if no filename
4293   FD47 BD E9 1A            JSR     FRMEVL        ;Evaluate Expression
4294   FD4A BD EE 53            JSR     FRESTR        ;Check if it's String
4295   FD4D F7 42 56            STAB    FNLEN         ;Set Filename Length to String Length
4296   FD50 27 D6               BEQ     PLSRTS        ;If it's 0, Return
4297   FD52 37                  PSHB                  ;Save Filename Length
4298   FD53 CC 42 57            LDD     #$4257        ;skip/load filename
4299   FD56 DD BF               STD     FPTMPS  
4300   FD58 33                  PULB    
4301   FD59 7E F7 B2            JMP     CPYMEM       ;Copy block of memory from [X] to [$00BF], length in B
4302   FD5C             
4303   FD5C                     ;CLOAD command
4304   FD5C 81 A9       CLOAD   CMPA    #$A9          ;If Token is CLOAD*
4305   FD5E 26 03               BNE     CLOAD1        
4306   FD60 7E FD B1            JMP     CLOADV        ;Execute CLOADV Routine
4307   FD63 81 4D       CLOAD1  CMPA    #$4D          ;If Token is CLOADM 
4308   FD65 26 03               BNE     CLOAD2        ;Execute CLOADM Routine
4309   FD67 7E FE 06            JMP     CLOADM        
4310   FD6A 4F          CLOAD2  CLRA                  ;File Type Program
4311   FD6B 8D 22               BSR     LBLFD8F
4312   FD6D BD E3 CF            JSR     LBLE3CF       ; NEW command status flag
4313   FD70 73 42 6E            COM     ram426E       ; unset new command flag
4314   FD73 FC 42 6C            LDD     LAL           ; LOAD address
4315   FD76 D3 93               ADDD    TXTTAB
4316   FD78 BD E2 1E            JSR     GETSTD        ; see if D bytes fit on stack
4317   FD7B DE 93               LDX     TXTTAB      
4318   FD7D FF 42 78    LBLFD7D STX     CBUFAD        ; cass buffer address
4319   FD80 8D 4E               BSR     LBLFDD0
4320   FD82 2A F9               BPL     LBLFD7D
4321   FD84 DF 95               STX     VARTAB 
4322   FD86 CE E1 BB            LDX     #REDDY   -1 ; "OK"
4323   FD89 BD E7 A8            JSR     STROUT     ; Write string
4324   FD8C 7E E2 EB            JMP     LBLE2EB    ; adjust next line pointers, and return to command mode
4325   FD8F             
4326   FD8F 36          LBLFD8F PSHA                  ;Save File Type 00=program 02=machine code 04=array data
4327   FD90 8D 10               BSR     LBLFDA2
4328   FD92 32                  PULA                  ;Restore File Type
4329   FD93 7D 42 74            TST     ram4274
4330   FD96 26 37               BNE     CLORTS
4331   FD98 B1 42 67            CMPA    FTYPE         ;If File Type Doesn't Match
4332   FD9B 27 32               BEQ     CLORTS
4333   FD9D C6 24       FMERR:  LDAB    #$24          ;  Issue ?FM error
4334   FD9F 7E E2 38            JMP     ERROR
4335   FDA2             
4336   FDA2 8D 8F       LBLFDA2 BSR     GETFN         ;Parse File Name
4337   FDA4 BD FE 37            JSR     CREAD
4338   FDA7 26 03               BNE     LBLFDAC  ;?IO error
4339   FDA9 7E FF 4E            JMP     LBLFF4E  ;Read cassette leader
4340   FDAC             
4341   FDAC C6 22       LBLFDAC LDAB    #$22     ;?IO error
4342   FDAE 7E E2 38            JMP     ERROR  
4343   FDB1             ;CLOAD*
4344   FDB1 8D 28       CLOADV BSR     CSAVEV
4345   FDB3 86 04               LDAA    #$04     ;array data
4346   FDB5 8D D8               BSR     LBLFD8F
4347   FDB7 FC 42 71            LDD     EAL  ;end
4348   FDBA B3 42 6F            SUBD    SAL  ;start
4349   FDBD B3 42 6C            SUBD    LAL  ; LOAD address
4350   FDC0 24 03               BHS     LBLFDC5
4351   FDC2 7E E2 36            JMP     OMERR ;?OM error
4352   FDC5             
4353   FDC5             
4354   FDC5 FE 42 6F    LBLFDC5 LDX     SAL
4355   FDC8 FF 42 78    LBLFDC8 STX     CBUFAD  ;cass buffer address
4356   FDCB 8D 03               BSR     LBLFDD0
4357   FDCD 2A F9               BPL     LBLFDC8
4358   FDCF 39          CLORTS RTS
4359   FDD0             
4360   FDD0             
4361   FDD0 BD FE B6    LBLFDD0 JSR     BLKIN-2       ;disable blocklength limit, enable writing, read block->X
4362   FDD3 26 D7       LBLFDD3 BNE     LBLFDAC       ; ?IO error
4363   FDD5 B6 42 75            LDAA    BLKTYP        ; Cass block type flag
4364   FDD8 27 D2               BEQ     LBLFDAC       ; ?IO error
4365   FDDA 39                  RTS
4366   FDDB             
4367   FDDB             ;FDDB   Set up for CSAVE* (Non-Canonical Label)
4368   FDDB BD 00 EB    CSAVEV  JSR    >CHRGET        ;Skip CSAVE* Tokn
4369   FDDE C6 01               LDAB    #$01
4370   FDE0 D7 86               STAB    SUBFLG        ;Set Array Flag
4371   FDE2 BD EB 1B            JSR     PTRGET        ;Get Pointer to Variable 
4372   FDE5 7F 00 86            CLR     SUBFLG        ;Clear Array Flag
4373   FDE8 BD E9 0E            JSR     CHKNUM        ;Parse Numeric Expression
4374   FDEB EC 02               LDD     2,X           ;
4375   FDED BD E2 2D            JSR     LBLE22D       ;D+X->D,X
4376   FDF0 FF 42 71            STX     EAL           ;Store as End Address
4377   FDF3 DE 89               LDX     TEMPADR
4378   FDF5 E6 04               LDAB    4,X
4379   FDF7 58                  ASLB    
4380   FDF8 CB 05               ADDB    #$05
4381   FDFA 3A                  ABX     
4382   FDFB FF 42 6F            STX     SAL           ;Store as Save Addeess
4383   FDFE BD 00 F3            JSR    >CHRGOT 
4384   FE01 27 CC               BEQ     CLORTS       ;Return
4385   FE03 7E EA 2F            JMP     CHKCOM-2        ;Require Comma and Return
4386   FE06             
4387   FE06             ;$FE06  Load Machine Languag Program from Cassette
4388   FE06 BD 00 EB    CLOADM  JSR     >CHRGET     ; Get next input char
4389   FE09 86 02               LDAA    #$02       ; machine code
4390   FE0B 8D 82               BSR     LBLFD8F
4391   FE0D CE 00 00            LDX     #$0000
4392   FE10 BD 00 F3            JSR     >CHRGOT
4393   FE13 27 06               BEQ     LBLFE1B
4394   FE15 BD EA 2F            JSR     CHKCOM-2 ; get ','
4395   FE18 BD EF 4C            JSR     INTIDX2   ; get address offset to X
4396   FE1B DF 89       LBLFE1B STX     TEMPADR
4397   FE1D FC 42 6A            LDD     XOFS   ;EXEC address offset
4398   FE20 D3 89               ADDD    TEMPADR
4399   FE22 FD 42 1F            STD     EXEADR   ;default EXEC address
4400   FE25 FC 42 6C            LDD     LAL   ;LOAD address
4401   FE28 D3 89               ADDD    TEMPADR
4402   FE2A 37                  PSHB    
4403   FE2B 36                  PSHA    
4404   FE2C 38                  PULX    
4405   FE2D 20 99               BRA     LBLFDC8
4406   FE2F             
4407   FE2F                             ; --- SKIPF command ---
4408   FE2F             C_SKIPF
4409   FE2F BD FD A2            JSR     LBLFDA2
4410   FE32 8D 56               BSR     LBLFE8A
4411   FE34 26 9D               BNE     LBLFDD3
4412   FE36 39                  RTS     
4413   FE37             
4414   FE37             ;$FE37  Read File from Cassette
4415   FE37 96 E2       CREAD   LDAA    CURLIN
4416   FE39 4C                  INCA    
4417   FE3A 26 0A               BNE     LBLFE46
4418   FE3C BD FB D4            JSR     CLRSCRN+1    ;Clear screen
4419   FE3F 86 53               LDAA    #$53         ;write 'S' to screen
4420   FE41 8D 3E               BSR     LBLFE81
4421   FE43 BD E7 B9            JSR     LBLE7B9
4422   FE46 8D 62       LBLFE46 BSR     LBLFEAA
4423   FE48 BA 42 75            ORAA    BLKTYP  ; Cass block type flag
4424   FE4B 26 33               BNE     LBLFE80
4425   FE4D 5F                  CLRB    
4426   FE4E 37                  PSHB    
4427   FE4F CE 42 5F    LBLFE4F LDX     #CASBUF  ;tape filename block
4428   FE52 3A                  ABX     
4429   FE53 A6 00               LDAA    ,X
4430   FE55 DE E2               LDX     CURLIN
4431   FE57 08                  INX    
4432   FE58 26 02               BNE     LBLFE5C
4433   FE5A 8D 25               BSR     LBLFE81
4434   FE5C CE 42 57    LBLFE5C LDX     #$4257 ; #FNAME  ; $425F ?? ;skip/load filename
4435   FE5F 3A                  ABX
4436   FE60 A0 00               SUBA    ,X
4437   FE62 30                  TSX     
4438   FE63 AA 00               ORAA    ,X
4439   FE65 A7 00               STAA    ,X
4440   FE67 5C                  INCB    
4441   FE68 C1 08               CMPB    #$08
4442   FE6A 26 E3               BNE     LBLFE4F
4443   FE6C 32                  PULA    
4444   FE6D 4D                  TSTA    
4445   FE6E 27 0B               BEQ     LBLFE7B
4446   FE70 7D 42 56            TST     FNLEN
4447   FE73 27 06               BEQ     LBLFE7B
4448   FE75 8D 10               BSR     LBLFE87
4449   FE77 26 07               BNE     LBLFE80
4450   FE79 20 BC               BRA     CREAD
4451   FE7B 86 46       LBLFE7B LDAA    #$46
4452   FE7D 8D 22               BSR     LBLFEA1
4453   FE7F 4F                  CLRA    
4454   FE80 39          LBLFE80 RTS
4455   FE81             
4456   FE81             
4457   FE81 7F 00 E8    LBLFE81 CLR     CHANNEL ;turn off printer
4458   FE84 7E F9 C6            JMP     OUTCH ;A->SCN
4459   FE87             
4460   FE87 BD FF 4E    LBLFE87 JSR     LBLFF4E ;Read cassette leader
4461   FE8A 86 FF       LBLFE8A LDAA    #$FF    ;disable blocklength limit
4462   FE8C 16                  TAB             ;disable writing (B=$FF)
4463   FE8D 8D 2A               BSR     BLKRD
4464   FE8F 26 07               BNE     LBLFE98
4465   FE91 B6 42 75            LDAA    BLKTYP ;cass block type flag
4466   FE94 40                  NEGA    
4467   FE95 2B F3               BMI     LBLFE8A
4468   FE97 4A                  DECA    
4469   FE98 B7 42 7B    LBLFE98 STAA    LOADSTS ;cass load status flag
4470   FE9B 39                  RTS
4471   FE9C             
4472   FE9C             
4473   FE9C B6 40 00    LBLFE9C LDAA    SCREEN 
4474   FE9F 88 40               EORA    #$40
4475   FEA1 D6 E2       LBLFEA1 LDAB    CURLIN
4476   FEA3 5C                  INCB    
4477   FEA4 26 03               BNE     LBLFEA9
4478   FEA6 B7 40 00            STAA    SCREEN 
4479   FEA9 39          LBLFEA9 RTS
4480   FEAA             
4481   FEAA             
4482   FEAA BD FF 4E    LBLFEAA JSR     LBLFF4E       ;Read cassette leader
4483   FEAD CE 42 5F            LDX     #CASBUF       ;tape filename block
4484   FEB0 FF 42 78            STX     CBUFAD        ;cass buffer address
4485   FEB3 86 0F               LDAA    #$0F          ;15 byte block length limit
4486   FEB5 8C 86 FF            CPX     #$86FF ;old FCB     $CB           ;CPX #
4487   FEB8             
4488   FEB8             ;$FEB6  Load Block from Cassette
4489   FEB8             BLKIN   ;LDAA    #$FF          ;(disable blocklength limit)
4490   FEB8 5F                  CLRB                  ;Enable Write to Memory (Load Block)
4491   FEB9             
4492   FEB9             ;$FEB9  Read Block from Cassette
4493   FEB9 36          BLKRD   PSHA                  ;Read cassette block
4494   FEBA F7 42 73            STAB    SKPFLG        ;
4495   FEBD 01                  NOP     
4496   FEBE 0F                  SEI     
4497   FEBF 8D DB               BSR     LBLFE9C
4498   FEC1 FE 42 78            LDX     CBUFAD          ;cass buffer address
4499   FEC4 4F                  CLRA    
4500   FEC5 8D 5B       LBLFEC5 BSR     BITIN       ;Read cassette bit
4501   FEC7 46                  RORA    
4502   FEC8 81 3C               CMPA    #$3C          ;00111100
4503   FECA 26 F9               BNE     LBLFEC5
4504   FECC 8D 46               BSR     CASIN       ;Read cassette char
4505   FECE B7 42 75            STAA    BLKTYP        ;cass block type flag
4506   FED1 8D 41               BSR     CASIN       ;Read cassette char
4507   FED3 B7 42 76            STAA    BLKLEN        ;cass block length
4508   FED6 33                  PULB    
4509   FED7 11                  CBA     
4510   FED8 22 31               BHI     LBLFF0B
4511   FEDA BB 42 75            ADDA    BLKTYP        ;cass block type flag
4512   FEDD B7 42 7A            STAA    CCKSUM        ;cass sumcheck
4513   FEE0 B6 42 76            LDAA    BLKLEN        ;cass block length
4514   FEE3 B7 42 7B            STAA    LOADSTS       ;cass load status flag
4515   FEE6 27 19               BEQ     LBLFF01     
4516   FEE8 8D 2A       LBLFEE8 BSR     CASIN       ;Read cassette char
4517   FEEA 7D 42 73            TST     SKPFLG
4518   FEED 26 07               BNE     LBLFEF6  ;don't write if set
4519   FEEF A7 00               STAA    ,X
4520   FEF1 A1 00               CMPA    ,X
4521   FEF3 26 19               BNE     LBLFF0E
4522   FEF5 08                  INX    
4523   FEF6 BB 42 7A    LBLFEF6 ADDA    CCKSUM        ;cass sumcheck
4524   FEF9 B7 42 7A            STAA    CCKSUM        ;cass sumcheck
4525   FEFC 7A 42 7B            DEC     LOADSTS       ;cass load status flag
4526   FEFF 26 E7               BNE     LBLFEE8   
4527   FF01 8D 11       LBLFF01 BSR     CASIN       ;Read cassette char
4528   FF03 B0 42 7A            SUBA    CCKSUM        ;cass sumcheck
4529   FF06 27 08               BEQ     LBLFF10   
4530   FF08 86 01               LDAA    #$01          ;     #$01 - bad sumcheck
4531   FF0A             
4532   FF0A 8C 86 03                    CPX     #$8603; old FCB     $CB           ;CPX #
4533   FF0D             LBLFF0B EQU $-2 ;LDAA    #$03          ;unexpected block length
4534   FF0D             
4535   FF0D 8C 86 02                    CPX     #$8602 ;old FCB     $CB           ;CPX #
4536   FF10             LBLFF0E EQU $-2 ;LDAA    #$02          ;store failed
4537   FF10 B7 42 7B    LBLFF10 STAA    LOADSTS       ;cass load status flag
4538   FF13 39                  RTS
4539   FF14             
4540   FF14             
4541   FF14             ;$FF14
4542   FF14 86 08       CASIN   LDAA    #$08          ;Read cassette char->A
4543   FF16 B7 42 7C    BTSIN   STAA    BITCNTR       ;cass byte load bit counter
4544   FF19 8D 07       BTCIN   BSR     BITIN         ;read cassette bit
4545   FF1B 46                  RORA    
4546   FF1C 7A 42 7C            DEC     BITCNTR       ;cass byte load bit counter
4547   FF1F 26 F8               BNE     BTCIN
4548   FF21 39                  RTS
4549   FF22             
4550   FF22             
4551   FF22             ;$FF22
4552   FF22 8D 08       BITIN   BSR     LBLFF2C       ;Read cassette bit->C
4553   FF24 F6 42 7D            LDAB    DURCNTR       ;tone duration counter
4554   FF27 5A                  DECB        
4555   FF28 F1 42 2C            CMPB    ram422C       ;cassette 1200/2400Hz partition
4556   FF2B 39                  RTS
4557   FF2C             
4558   FF2C             
4559   FF2C 7F 42 7D    LBLFF2C CLR     DURCNTR       ;tone duration counter
4560   FF2F 7D 42 7E            TST     ram427E       ;cass polarity flag
4561   FF32 26 11               BNE     LBLFF45       ;get 1->0 transition
4562   FF34                   
4563   FF34                                           ;get 0->1 transition
4564   FF34 8D 07       LBLFF34 BSR     LBLFF3D       ;Inc duration until 0
4565   FF36 26 FC               BNE     LBLFF34     
4566   FF38 8D 03       LBLFF38 BSR     LBLFF3D       ;Inc duration until 1
4567   FF3A 27 FC               BEQ     LBLFF38
4568   FF3C 39                  RTS
4569   FF3D             
4570   FF3D             
4571   FF3D 7C 42 7D    LBLFF3D INC     DURCNTR  ;tone duration counter
4572   FF40 D6 03               LDAB    PORT2
4573   FF42 C4 10               ANDB    #$10
4574   FF44 39                  RTS
4575   FF45             
4576   FF45                                    ;get 1->0 transition
4577   FF45 8D F6       LBLFF45 BSR     LBLFF3D  ;Inc duration until 1
4578   FF47 27 FC               BEQ     LBLFF45
4579   FF49 8D F2       LBLFF49 BSR     LBLFF3D  ;Inc duration until 0
4580   FF4B 26 FC               BNE     LBLFF49
4581   FF4D 39                  RTS
4582   FF4E             
4583   FF4E             
4584   FF4E 01          LBLFF4E NOP     ;Read cassette leader
4585   FF4F 0F                  SEI     
4586   FF50 7F 42 7C            CLR     BITCNTR  ;cass byte load bit counter
4587   FF53 8D DF       LBLFF53 BSR     LBLFF34  ;get 0->1 xsition
4588   FF55 8D 2D       LBLFF55 BSR     LBLFF84  ;clear counter, count until 0, compare counter against limit
4589   FF57 22 12               BHI     LBLFF6B
4590   FF59 8D 22       LBLFF59 BSR     LBLFF7D  ;clear counter, count until 1, compare counter against limit
4591   FF5B 25 12               BCS     LBLFF6F
4592   FF5D 7A 42 7C            DEC     BITCNTR  ;cass byte load bit counter
4593   FF60 B6 42 7C            LDAA    BITCNTR  ;cass byte load bit counter
4594   FF63 81 A0               CMPA    #$A0
4595   FF65 26 EC       LBLFF65 BNE     LBLFF53
4596   FF67 B7 42 7E            STAA    ram427E  ;cass polarity flag
4597   FF6A 39                  RTS
4598   FF6B             
4599   FF6B             
4600   FF6B 8D 10       LBLFF6B BSR     LBLFF7D  ;clear counter, count until 1, compare counter against limit
4601   FF6D 22 E6               BHI     LBLFF55
4602   FF6F 8D 13       LBLFF6F BSR     LBLFF84  ;clear counter, count until 0, compare counter against limit
4603   FF71 25 E6               BCS     LBLFF59
4604   FF73 7C 42 7C            INC     BITCNTR  ;cass byte load bit counter
4605   FF76 B6 42 7C            LDAA    BITCNTR  ;cass byte load bit counter
4606   FF79 80 60               SUBA    #$60
4607   FF7B 20 E8               BRA     LBLFF65
4608   FF7D             
4609   FF7D 7F 42 7D    LBLFF7D CLR     DURCNTR  ;tone duration counter
4610   FF80 8D B6               BSR     LBLFF38  ;incr duration until 1
4611   FF82 20 05               BRA     LBLFF89
4612   FF84 7F 42 7D    LBLFF84 CLR     DURCNTR  ;tone duration counter
4613   FF87 8D C0               BSR     LBLFF49  ;incr duration until 0
4614   FF89 F6 42 7D    LBLFF89 LDAB    DURCNTR  ;tone duration counter
4615   FF8C F1 42 2D            CMPB    ram422D  ;upper limit of 1200 Hz
4616   FF8F 22 04               BHI     LBLFF95
4617   FF91 F1 42 2E            CMPB    ram422E  ;lower limit of 2400 Hz
4618   FF94 39                  RTS
4619   FF95             
4620   FF95             
4621   FF95 7F 42 7C    LBLFF95 CLR     BITCNTR  ;cass byte load bit counter
4622   FF98 39                  RTS
4623   FF99             
4624   FF99             
4625   FF99 BD EA 2F    LBLFF99 JSR     CHKCOM-2 ; get ','
4626   FF9C BD EF 0D    LBLFF9C JSR     LBLEF0D   ; get num->B
4627   FF9F 5D                  TSTB    
4628   FFA0 26 2F               BNE     LBLFFD1
4629   FFA2 7E EC 2E            JMP     FCERR-2  ;?FC error if B=0
4630   FFA5             
4631   FFA5                             ; --- SOUND command ---
4632   FFA5             C_SOUND
4633   FFA5 8D F5               BSR     LBLFF9C   ;get num->B
4634   FFA7 37                  PSHB    
4635   FFA8 8D EF               BSR     LBLFF99      ;get ,num->B
4636   FFAA 32                  PULA    
4637   FFAB 36          LBLFFAB PSHA          ;A=PITCH, B=DURATION
4638   FFAC 37                  PSHB    
4639   FFAD 4F                  CLRA    
4640   FFAE DE 09       LBLFFAE LDX     COUNTER  ;4; read counter
4641   FFB0 D6 08               LDAB    TIMER   ;3; read timer control and status reg [req'd to clear OCF flag] (ICF OCF TOF EICI EOCI ETOI IEDG OLVL)
4642   FFB2 DF 0B               STX     COMPARE   ;4; store counter to output compare register
4643   FFB4 88 80       LBLFFB4 EORA    #$80    ;2; toggle speaker coil output
4644   FFB6 B7 BF FF            STAA    ioBFFF  ;4;
4645   FFB9 30                  TSX             ;3;
4646   FFBA E6 01               LDAB    1,X    ;4; get pitch
4647   FFBC 08          LBLFFBC INX            ;3; timewaste 
4648   FFBD 08                  INX            ;3; timewaste 
4649   FFBE 5C                  INCB            ;2; 
4650   FFBF 26 FB               BNE     LBLFFBC ;3; (11 cycles per loop)
4651   FFC1 D6 08               LDAB    TIMER   ;3; 
4652   FFC3 C4 40               ANDB    #$40    ;2; get output compare flag  
4653   FFC5 27 ED               BEQ     LBLFFB4 ;3; toggle again if still clear... (freq = 1MHz/(11*(256-PITCH)+21))
4654   FFC7 30                  TSX             ;4;
4655   FFC8 6A 00               DEC     ,X      ;6; dec duration (=DURATION * 65.56ms)
4656   FFCA 26 E2               BNE     LBLFFAE ;3;
4657   FFCC 4F                  CLRA    
4658   FFCD B7 BF FF            STAA    ioBFFF
4659   FFD0 38                  PULX    
4660   FFD1 39          LBLFFD1 RTS
4661   FFD2             
4662   FFD2             ;        org     $FFD2
4663   FFD2 6E696C7265626D61        FCB     $6E,$69,$6C,$72,$65,$62,$6D,$61,$68,$43 ; nilrebmahC (spell it backwards)
4663   FFDA 6843        
4664   FFDC                             ; --- User ROM routines---
4665   FFDC             
4666   FFDC F8 83               FDB     SCANKBD         ;Scan keyboard
4667   FFDE F9 C6               FDB     OUTCH         ;Write char to screen
4668   FFE0 FF 4E               FDB     LBLFF4E         ;Read cassette leader
4669   FFE2 FE B9               FDB     BLKRD         ;Read cassette block
4670   FFE4 FC C0               FDB     BLKOUT         ;Write cassette block
4671   FFE6 FF AB               FDB     LBLFFAB         ;Sound
4672   FFE8 FC B7               FDB     WRLDR         ;Write cassette leader
4673   FFEA EC E3               FDB     LBLECE3        ; return D to TXTTAB
4674   FFEC EB C7               FDB     LBLEBC7        ; get result -> D
4675   FFEE             
4676   FFEE 00 C9               FCB     $00,$C9
4677   FFF0             
4678   FFF0             ;       org     $FFF0
4679   FFF0                                                     ; 6803 vectors
4680   FFF0 42 00               FDB     $4200        ;SCI   (TDRE + RDRF + ORFE)
4681   FFF2 42 03               FDB     $4203        ;TOF   Timer overflow interrupt
4682   FFF4 42 06               FDB     $4206        ;OCF   Output compare interrupt
4683   FFF6 42 09               FDB     $4209        ;ICF   Input capture interrupt
4684   FFF8 42 0C               FDB     $420C        ;IRQ1  Maskable interrupt req 1.
4685   FFFA 42 0F               FDB     $420F        ;SWI   Software interrupt
4686   FFFC 42 12               FDB     $4212        ;NMI   Non-maskable interrupt
4687   FFFE F7 2E               FDB     LBLF72E         ;Reset
4688   10000            
4689   10000                    .end
4690   10000            
4691   10000            
4692   10000            ;        { 0xE000, VECTOR },
4693   10000            ;        { 0xE030, TABLE },
4694   10000            ;        { 0xE045, TABLE_ASCII },
4695   10000            ;        { 0xE148, VECTOR },
4696   10000            ;        { 0xE18A, TABLE_ASCII },
4697   10000            ;        { 0xE1C8, CODE },
4698   10000            ;        { 0xE7C1, TABLE_ASCII },
4699   10000            ;        { 0xE7C8, CODE },
4700   10000            ;        { 0xE8AB, TABLE_ASCII },
4701   10000            ;        { 0xE8BB, CODE },
4702   10000            ;        { 0xE988, TABLE },
4703   10000            ;        { 0xE98B, CODE },
4704   10000            ;        { 0xF08B, TABLE },
4705   10000            ;        { 0xF0B9, CODE },
4706   10000            ;        { 0xF403, TABLE },
4707   10000            ;        { 0xF412, CODE },
4708   10000            ;        { 0xF524, TABLE },
4709   10000            ;        { 0xF54D, CODE },
4710   10000            ;        { 0xF59B, TABLE },
4711   10000            ;        { 0xF5C9, CODE },
4712   10000            ;        { 0xF682, TABLE_WORD },
4713   10000            ;        { 0xF686, CODE },
4714   10000            ;        { 0xF6F6, TABLE },
4715   10000            ;        { 0xF72E, CODE },
4716   10000            ;        { 0xF7F7, TABLE },
4717   10000            ;        { 0xF810, TABLE_ASCII },
4718   10000            ;        { 0xF83F, CODE },
4719   10000            ;        { 0xF956, TABLE_ASCII },
4720   10000            ;        { 0xF9C6, CODE },
4721   10000            ;        { 0xFFD2, TABLE_ASCII },
4722   10000            ;        { 0xFFDC, VECTOR },
4723   10000            ;        { 0xFFEE, TABLE },
4724   10000            ;        { 0xFFF0, TABLE_WORD },
4725   10000            ;        { 0x10000, DISASM_END },
